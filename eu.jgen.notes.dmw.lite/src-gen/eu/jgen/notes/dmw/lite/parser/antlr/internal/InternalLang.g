/*
 * generated by Xtext 2.12.0
 */
grammar InternalLang;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package eu.jgen.notes.dmw.lite.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package eu.jgen.notes.dmw.lite.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import eu.jgen.notes.dmw.lite.services.LangGrammarAccess;

}

@parser::members {

 	private LangGrammarAccess grammarAccess;

    public InternalLangParser(TokenStream input, LangGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "YWidget";
   	}

   	@Override
   	protected LangGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleYWidget
entryRuleYWidget returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYWidgetRule()); }
	iv_ruleYWidget=ruleYWidget
	{ $current=$iv_ruleYWidget.current; }
	EOF;

// Rule YWidget
ruleYWidget returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='package'
			{
				newLeafNode(otherlv_0, grammarAccess.getYWidgetAccess().getPackageKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getYWidgetAccess().getNameQualifiedNameParserRuleCall_0_1_0());
					}
					lv_name_1_0=ruleQualifiedName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getYWidgetRule());
						}
						set(
							$current,
							"name",
							lv_name_1_0,
							"eu.jgen.notes.dmw.lite.Lang.QualifiedName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2=';'
				{
					newLeafNode(otherlv_2, grammarAccess.getYWidgetAccess().getSemicolonKeyword_0_2());
				}
			)?
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getYWidgetAccess().getImportsYImportParserRuleCall_1_0());
				}
				lv_imports_3_0=ruleYImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYWidgetRule());
					}
					add(
						$current,
						"imports",
						lv_imports_3_0,
						"eu.jgen.notes.dmw.lite.Lang.YImport");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getYWidgetAccess().getAnnotationsYAnnotTopParserRuleCall_2_0());
				}
				lv_annotations_4_0=ruleYAnnotTop
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYWidgetRule());
					}
					add(
						$current,
						"annotations",
						lv_annotations_4_0,
						"eu.jgen.notes.dmw.lite.Lang.YAnnotTop");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getYWidgetAccess().getClassesYClassParserRuleCall_3_0());
				}
				lv_classes_5_0=ruleYClass
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYWidgetRule());
					}
					add(
						$current,
						"classes",
						lv_classes_5_0,
						"eu.jgen.notes.dmw.lite.Lang.YClass");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleYImport
entryRuleYImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYImportRule()); }
	iv_ruleYImport=ruleYImport
	{ $current=$iv_ruleYImport.current; }
	EOF;

// Rule YImport
ruleYImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getYImportAccess().getImportKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0());
				}
				lv_importedNamespace_1_0=ruleQualifiedNameWithWildcard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYImportRule());
					}
					set(
						$current,
						"importedNamespace",
						lv_importedNamespace_1_0,
						"eu.jgen.notes.dmw.lite.Lang.QualifiedNameWithWildcard");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getYImportAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_0());
		}
		this_ValidID_0=ruleValidID
		{
			$current.merge(this_ValidID_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				('.')=>
				kw='.'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
				}
			)
			{
				newCompositeNode(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_1_1());
			}
			this_ValidID_2=ruleValidID
			{
				$current.merge(this_ValidID_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); }
	iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard
	{ $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }
	EOF;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0());
		}
		this_QualifiedName_0=ruleQualifiedName
		{
			$current.merge(this_QualifiedName_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='.*'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1());
			}
		)?
	)
;

// Entry rule entryRuleValidID
entryRuleValidID returns [String current=null]:
	{ newCompositeNode(grammarAccess.getValidIDRule()); }
	iv_ruleValidID=ruleValidID
	{ $current=$iv_ruleValidID.current.getText(); }
	EOF;

// Rule ValidID
ruleValidID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_ID_0=RULE_ID
	{
		$current.merge(this_ID_0);
	}
	{
		newLeafNode(this_ID_0, grammarAccess.getValidIDAccess().getIDTerminalRuleCall());
	}
;

// Entry rule entryRuleYParameter
entryRuleYParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYParameterRule()); }
	iv_ruleYParameter=ruleYParameter
	{ $current=$iv_ruleYParameter.current; }
	EOF;

// Rule YParameter
ruleYParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		if ($current==null) {
			$current = createModelElement(grammarAccess.getYParameterRule());
		}
		newCompositeNode(grammarAccess.getYParameterAccess().getYTypedDeclarationParserRuleCall());
	}
	this_YTypedDeclaration_0=ruleYTypedDeclaration[$current]
	{
		$current = $this_YTypedDeclaration_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleYArgumentValue
entryRuleYArgumentValue returns [String current=null]:
	{ newCompositeNode(grammarAccess.getYArgumentValueRule()); }
	iv_ruleYArgumentValue=ruleYArgumentValue
	{ $current=$iv_ruleYArgumentValue.current.getText(); }
	EOF;

// Rule YArgumentValue
ruleYArgumentValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getYArgumentValueAccess().getINTTerminalRuleCall_0());
		}
		    |
		this_STRING_1=RULE_STRING
		{
			$current.merge(this_STRING_1);
		}
		{
			newLeafNode(this_STRING_1, grammarAccess.getYArgumentValueAccess().getSTRINGTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleYClass
entryRuleYClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYClassRule()); }
	iv_ruleYClass=ruleYClass
	{ $current=$iv_ruleYClass.current; }
	EOF;

// Rule YClass
ruleYClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='class'
		{
			newLeafNode(otherlv_0, grammarAccess.getYClassAccess().getClassKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYClassAccess().getNameValidIDParserRuleCall_1_0());
				}
				lv_name_1_0=ruleValidID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYClassRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"eu.jgen.notes.dmw.lite.Lang.ValidID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=':'
			{
				newLeafNode(otherlv_2, grammarAccess.getYClassAccess().getColonKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYClassRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getYClassAccess().getSuperclassYClassCrossReference_2_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_4='->'
			{
				newLeafNode(otherlv_4, grammarAccess.getYClassAccess().getHyphenMinusGreaterThanSignKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYClassRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getYClassAccess().getEntityYAnnotEntityCrossReference_3_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6='{'
		{
			newLeafNode(otherlv_6, grammarAccess.getYClassAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYClassAccess().getInnersYClassParserRuleCall_5_0());
				}
				lv_inners_7_0=ruleYClass
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYClassRule());
					}
					add(
						$current,
						"inners",
						lv_inners_7_0,
						"eu.jgen.notes.dmw.lite.Lang.YClass");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getYClassAccess().getMembersYMemberParserRuleCall_6_0());
				}
				lv_members_8_0=ruleYMember
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYClassRule());
					}
					add(
						$current,
						"members",
						lv_members_8_0,
						"eu.jgen.notes.dmw.lite.Lang.YMember");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getYClassAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleYMember
entryRuleYMember returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYMemberRule()); }
	iv_ruleYMember=ruleYMember
	{ $current=$iv_ruleYMember.current; }
	EOF;

// Rule YMember
ruleYMember returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getYMemberAccess().getYPropertyParserRuleCall_0());
		}
		this_YProperty_0=ruleYProperty
		{
			$current = $this_YProperty_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getYMemberAccess().getYFunctionParserRuleCall_1());
		}
		this_YFunction_1=ruleYFunction
		{
			$current = $this_YFunction_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;


// Rule YTypedDeclaration
ruleYTypedDeclaration[EObject in_current]  returns [EObject current=in_current]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getYTypedDeclarationAccess().getNameValidIDParserRuleCall_0_0());
				}
				lv_name_0_0=ruleValidID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYTypedDeclarationRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"eu.jgen.notes.dmw.lite.Lang.ValidID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getYTypedDeclarationAccess().getColonKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYTypedDeclarationRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getYTypedDeclarationAccess().getTypeYClassCrossReference_2_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleYProperty
entryRuleYProperty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYPropertyRule()); }
	iv_ruleYProperty=ruleYProperty
	{ $current=$iv_ruleYProperty.current; }
	EOF;

// Rule YProperty
ruleYProperty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getYPropertyAccess().getAccessYAccessLevelEnumRuleCall_0_0());
				}
				lv_access_0_0=ruleYAccessLevel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYPropertyRule());
					}
					set(
						$current,
						"access",
						lv_access_0_0,
						"eu.jgen.notes.dmw.lite.Lang.YAccessLevel");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1='var'
		{
			newLeafNode(otherlv_1, grammarAccess.getYPropertyAccess().getVarKeyword_1());
		}
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getYPropertyRule());
			}
			newCompositeNode(grammarAccess.getYPropertyAccess().getYTypedDeclarationParserRuleCall_2());
		}
		this_YTypedDeclaration_2=ruleYTypedDeclaration[$current]
		{
			$current = $this_YTypedDeclaration_2.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYPropertyAccess().getTuplesYTuplesParserRuleCall_3_0());
				}
				lv_tuples_3_0=ruleYTuples
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYPropertyRule());
					}
					set(
						$current,
						"tuples",
						lv_tuples_3_0,
						"eu.jgen.notes.dmw.lite.Lang.YTuples");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_optional_4_0='?'
				{
					newLeafNode(lv_optional_4_0, grammarAccess.getYPropertyAccess().getOptionalQuestionMarkKeyword_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYPropertyRule());
					}
					setWithLastConsumed($current, "optional", true, "?");
				}
			)
		)?
		(
			otherlv_5='->'
			{
				newLeafNode(otherlv_5, grammarAccess.getYPropertyAccess().getHyphenMinusGreaterThanSignKeyword_5_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYPropertyRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getYPropertyAccess().getAttrYAnnotAttrCrossReference_5_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getYPropertyAccess().getPropYAnnotParserRuleCall_6_0());
				}
				lv_prop_7_0=ruleYAnnot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYPropertyRule());
					}
					add(
						$current,
						"prop",
						lv_prop_7_0,
						"eu.jgen.notes.dmw.lite.Lang.YAnnot");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_8=';'
		{
			newLeafNode(otherlv_8, grammarAccess.getYPropertyAccess().getSemicolonKeyword_7());
		}
	)
;

// Entry rule entryRuleYTuples
entryRuleYTuples returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYTuplesRule()); }
	iv_ruleYTuples=ruleYTuples
	{ $current=$iv_ruleYTuples.current; }
	EOF;

// Rule YTuples
ruleYTuples returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYTuplesAccess().getYTuplesAction_0(),
					$current);
			}
		)
		otherlv_1='<'
		{
			newLeafNode(otherlv_1, grammarAccess.getYTuplesAccess().getLessThanSignKeyword_1());
		}
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYTuplesRule());
						}
					}
					otherlv_2=RULE_ID
					{
						newLeafNode(otherlv_2, grammarAccess.getYTuplesAccess().getIncludesYPropertyCrossReference_2_0_0());
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getYTuplesAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getYTuplesRule());
							}
						}
						otherlv_4=RULE_ID
						{
							newLeafNode(otherlv_4, grammarAccess.getYTuplesAccess().getIncludesYPropertyCrossReference_2_1_1_0());
						}
					)
				)
			)*
		)?
		otherlv_5='>'
		{
			newLeafNode(otherlv_5, grammarAccess.getYTuplesAccess().getGreaterThanSignKeyword_3());
		}
	)
;

// Entry rule entryRuleYFunction
entryRuleYFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYFunctionRule()); }
	iv_ruleYFunction=ruleYFunction
	{ $current=$iv_ruleYFunction.current; }
	EOF;

// Rule YFunction
ruleYFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getYFunctionAccess().getAccessYAccessLevelEnumRuleCall_0_0());
				}
				lv_access_0_0=ruleYAccessLevel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYFunctionRule());
					}
					set(
						$current,
						"access",
						lv_access_0_0,
						"eu.jgen.notes.dmw.lite.Lang.YAccessLevel");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1='func'
		{
			newLeafNode(otherlv_1, grammarAccess.getYFunctionAccess().getFuncKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYFunctionAccess().getNameValidIDParserRuleCall_2_0());
				}
				lv_name_2_0=ruleValidID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYFunctionRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"eu.jgen.notes.dmw.lite.Lang.ValidID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getYFunctionAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getYFunctionAccess().getParamsYParameterParserRuleCall_4_0_0());
					}
					lv_params_4_0=ruleYParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getYFunctionRule());
						}
						add(
							$current,
							"params",
							lv_params_4_0,
							"eu.jgen.notes.dmw.lite.Lang.YParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getYFunctionAccess().getCommaKeyword_4_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getYFunctionAccess().getParamsYParameterParserRuleCall_4_1_1_0());
						}
						lv_params_6_0=ruleYParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getYFunctionRule());
							}
							add(
								$current,
								"params",
								lv_params_6_0,
								"eu.jgen.notes.dmw.lite.Lang.YParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getYFunctionAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				lv_returnvalue_8_0='->'
				{
					newLeafNode(lv_returnvalue_8_0, grammarAccess.getYFunctionAccess().getReturnvalueHyphenMinusGreaterThanSignKeyword_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYFunctionRule());
					}
					setWithLastConsumed($current, "returnvalue", true, "->");
				}
			)
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYFunctionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getYFunctionAccess().getTypeYClassCrossReference_7_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getYFunctionAccess().getBodyYBlockParserRuleCall_8_0());
				}
				lv_body_10_0=ruleYBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYFunctionRule());
					}
					set(
						$current,
						"body",
						lv_body_10_0,
						"eu.jgen.notes.dmw.lite.Lang.YBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleYBlock
entryRuleYBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYBlockRule()); }
	iv_ruleYBlock=ruleYBlock
	{ $current=$iv_ruleYBlock.current; }
	EOF;

// Rule YBlock
ruleYBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYBlockAccess().getYBlockAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getYBlockAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYBlockAccess().getStatementsYStatementParserRuleCall_2_0());
				}
				lv_statements_2_0=ruleYStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYBlockRule());
					}
					add(
						$current,
						"statements",
						lv_statements_2_0,
						"eu.jgen.notes.dmw.lite.Lang.YStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getYBlockAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleYStatement
entryRuleYStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYStatementRule()); }
	iv_ruleYStatement=ruleYStatement
	{ $current=$iv_ruleYStatement.current; }
	EOF;

// Rule YStatement
ruleYStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getYStatementAccess().getYVariableDeclarationParserRuleCall_0());
		}
		this_YVariableDeclaration_0=ruleYVariableDeclaration
		{
			$current = $this_YVariableDeclaration_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getYStatementAccess().getYReturnParserRuleCall_1());
		}
		this_YReturn_1=ruleYReturn
		{
			$current = $this_YReturn_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getYStatementAccess().getYReadStatementParserRuleCall_2());
		}
		this_YReadStatement_2=ruleYReadStatement
		{
			$current = $this_YReadStatement_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getYStatementAccess().getYCreateStatementParserRuleCall_3());
		}
		this_YCreateStatement_3=ruleYCreateStatement
		{
			$current = $this_YCreateStatement_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getYStatementAccess().getYUpdateStatementParserRuleCall_4());
		}
		this_YUpdateStatement_4=ruleYUpdateStatement
		{
			$current = $this_YUpdateStatement_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getYStatementAccess().getYAssociateStatementParserRuleCall_5());
		}
		this_YAssociateStatement_5=ruleYAssociateStatement
		{
			$current = $this_YAssociateStatement_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getYStatementAccess().getYDeleteStatementParserRuleCall_6());
		}
		this_YDeleteStatement_6=ruleYDeleteStatement
		{
			$current = $this_YDeleteStatement_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getYStatementAccess().getYReadEachStatementParserRuleCall_7());
		}
		this_YReadEachStatement_7=ruleYReadEachStatement
		{
			$current = $this_YReadEachStatement_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getYStatementAccess().getYWhileStatementParserRuleCall_8());
		}
		this_YWhileStatement_8=ruleYWhileStatement
		{
			$current = $this_YWhileStatement_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getYStatementAccess().getYRepeatWhileStatementParserRuleCall_9());
		}
		this_YRepeatWhileStatement_9=ruleYRepeatWhileStatement
		{
			$current = $this_YRepeatWhileStatement_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getYStatementAccess().getYForInStatementParserRuleCall_10());
		}
		this_YForInStatement_10=ruleYForInStatement
		{
			$current = $this_YForInStatement_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			{
				newCompositeNode(grammarAccess.getYStatementAccess().getYExpressionParserRuleCall_11_0());
			}
			this_YExpression_11=ruleYExpression
			{
				$current = $this_YExpression_11.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_12=';'
			{
				newLeafNode(otherlv_12, grammarAccess.getYStatementAccess().getSemicolonKeyword_11_1());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getYStatementAccess().getYIfStatementParserRuleCall_12());
		}
		this_YIfStatement_13=ruleYIfStatement
		{
			$current = $this_YIfStatement_13.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getYStatementAccess().getYSwitchStatementParserRuleCall_13());
		}
		this_YSwitchStatement_14=ruleYSwitchStatement
		{
			$current = $this_YSwitchStatement_14.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleYVariableDeclaration
entryRuleYVariableDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYVariableDeclarationRule()); }
	iv_ruleYVariableDeclaration=ruleYVariableDeclaration
	{ $current=$iv_ruleYVariableDeclaration.current; }
	EOF;

// Rule YVariableDeclaration
ruleYVariableDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getYVariableDeclarationRule());
			}
			newCompositeNode(grammarAccess.getYVariableDeclarationAccess().getYTypedDeclarationParserRuleCall_0());
		}
		this_YTypedDeclaration_0=ruleYTypedDeclaration[$current]
		{
			$current = $this_YTypedDeclaration_0.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getYVariableDeclarationAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYVariableDeclarationAccess().getExpressionYOrExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleYOrExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYVariableDeclarationRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"eu.jgen.notes.dmw.lite.Lang.YOrExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getYVariableDeclarationAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleYReturn
entryRuleYReturn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYReturnRule()); }
	iv_ruleYReturn=ruleYReturn
	{ $current=$iv_ruleYReturn.current; }
	EOF;

// Rule YReturn
ruleYReturn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYReturnAccess().getYReturnAction_0(),
					$current);
			}
		)
		otherlv_1='return'
		{
			newLeafNode(otherlv_1, grammarAccess.getYReturnAccess().getReturnKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYReturnAccess().getExpressionYOrExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleYOrExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYReturnRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"eu.jgen.notes.dmw.lite.Lang.YOrExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getYReturnAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleYIfStatement
entryRuleYIfStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYIfStatementRule()); }
	iv_ruleYIfStatement=ruleYIfStatement
	{ $current=$iv_ruleYIfStatement.current; }
	EOF;

// Rule YIfStatement
ruleYIfStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getYIfStatementAccess().getIfKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getYIfStatementAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYIfStatementAccess().getExpressionYOrExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleYOrExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYIfStatementRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"eu.jgen.notes.dmw.lite.Lang.YOrExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getYIfStatementAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYIfStatementAccess().getThenBlockYIfBlockParserRuleCall_4_0());
				}
				lv_thenBlock_4_0=ruleYIfBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYIfStatementRule());
					}
					set(
						$current,
						"thenBlock",
						lv_thenBlock_4_0,
						"eu.jgen.notes.dmw.lite.Lang.YIfBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				('else')=>
				otherlv_5='else'
				{
					newLeafNode(otherlv_5, grammarAccess.getYIfStatementAccess().getElseKeyword_5_0());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getYIfStatementAccess().getElseBlockYIfBlockParserRuleCall_5_1_0());
					}
					lv_elseBlock_6_0=ruleYIfBlock
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getYIfStatementRule());
						}
						set(
							$current,
							"elseBlock",
							lv_elseBlock_6_0,
							"eu.jgen.notes.dmw.lite.Lang.YIfBlock");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleYIfBlock
entryRuleYIfBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYIfBlockRule()); }
	iv_ruleYIfBlock=ruleYIfBlock
	{ $current=$iv_ruleYIfBlock.current; }
	EOF;

// Rule YIfBlock
ruleYIfBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getYIfBlockAccess().getStatementsYStatementParserRuleCall_0_0());
				}
				lv_statements_0_0=ruleYStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYIfBlockRule());
					}
					add(
						$current,
						"statements",
						lv_statements_0_0,
						"eu.jgen.notes.dmw.lite.Lang.YStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getYIfBlockAccess().getYBlockParserRuleCall_1());
		}
		this_YBlock_1=ruleYBlock
		{
			$current = $this_YBlock_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleYSwitchStatement
entryRuleYSwitchStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYSwitchStatementRule()); }
	iv_ruleYSwitchStatement=ruleYSwitchStatement
	{ $current=$iv_ruleYSwitchStatement.current; }
	EOF;

// Rule YSwitchStatement
ruleYSwitchStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYSwitchStatementAccess().getYSwitchStatementAction_0(),
					$current);
			}
		)
		otherlv_1='switch'
		{
			newLeafNode(otherlv_1, grammarAccess.getYSwitchStatementAccess().getSwitchKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYSwitchStatementAccess().getSwitchYExpressionParserRuleCall_2_0());
				}
				lv_switch_2_0=ruleYExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYSwitchStatementRule());
					}
					set(
						$current,
						"switch",
						lv_switch_2_0,
						"eu.jgen.notes.dmw.lite.Lang.YExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getYSwitchStatementAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYSwitchStatementAccess().getCasesYSwitchCaseParserRuleCall_4_0());
				}
				lv_cases_4_0=ruleYSwitchCase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYSwitchStatementRule());
					}
					add(
						$current,
						"cases",
						lv_cases_4_0,
						"eu.jgen.notes.dmw.lite.Lang.YSwitchCase");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			otherlv_5='default'
			{
				newLeafNode(otherlv_5, grammarAccess.getYSwitchStatementAccess().getDefaultKeyword_5_0());
			}
			otherlv_6=':'
			{
				newLeafNode(otherlv_6, grammarAccess.getYSwitchStatementAccess().getColonKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getYSwitchStatementAccess().getDefaultYBlockParserRuleCall_5_2_0());
					}
					lv_default_7_0=ruleYBlock
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getYSwitchStatementRule());
						}
						set(
							$current,
							"default",
							lv_default_7_0,
							"eu.jgen.notes.dmw.lite.Lang.YBlock");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getYSwitchStatementAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleYSwitchCase
entryRuleYSwitchCase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYSwitchCaseRule()); }
	iv_ruleYSwitchCase=ruleYSwitchCase
	{ $current=$iv_ruleYSwitchCase.current; }
	EOF;

// Rule YSwitchCase
ruleYSwitchCase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYSwitchCaseAccess().getYSwitchCaseAction_0(),
					$current);
			}
		)
		(
			otherlv_1='case'
			{
				newLeafNode(otherlv_1, grammarAccess.getYSwitchCaseAccess().getCaseKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getYSwitchCaseAccess().getCaseYExpressionParserRuleCall_1_1_0());
					}
					lv_case_2_0=ruleYExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getYSwitchCaseRule());
						}
						set(
							$current,
							"case",
							lv_case_2_0,
							"eu.jgen.notes.dmw.lite.Lang.YExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getYSwitchCaseAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYSwitchCaseAccess().getThenYBlockParserRuleCall_3_0());
				}
				lv_then_4_0=ruleYBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYSwitchCaseRule());
					}
					set(
						$current,
						"then",
						lv_then_4_0,
						"eu.jgen.notes.dmw.lite.Lang.YBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleYSymbol
entryRuleYSymbol returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYSymbolRule()); }
	iv_ruleYSymbol=ruleYSymbol
	{ $current=$iv_ruleYSymbol.current; }
	EOF;

// Rule YSymbol
ruleYSymbol returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getYSymbolAccess().getYVariableDeclarationParserRuleCall_0());
		}
		this_YVariableDeclaration_0=ruleYVariableDeclaration
		{
			$current = $this_YVariableDeclaration_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getYSymbolAccess().getYParameterParserRuleCall_1());
		}
		this_YParameter_1=ruleYParameter
		{
			$current = $this_YParameter_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleYExpression
entryRuleYExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYExpressionRule()); }
	iv_ruleYExpression=ruleYExpression
	{ $current=$iv_ruleYExpression.current; }
	EOF;

// Rule YExpression
ruleYExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getYExpressionAccess().getYAssignmentParserRuleCall());
	}
	this_YAssignment_0=ruleYAssignment
	{
		$current = $this_YAssignment_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleYAssignment
entryRuleYAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAssignmentRule()); }
	iv_ruleYAssignment=ruleYAssignment
	{ $current=$iv_ruleYAssignment.current; }
	EOF;

// Rule YAssignment
ruleYAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getYAssignmentAccess().getYSelectionExpressionParserRuleCall_0());
		}
		this_YSelectionExpression_0=ruleYSelectionExpression
		{
			$current = $this_YSelectionExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getYAssignmentAccess().getYAssignmentLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='='
			{
				newLeafNode(otherlv_2, grammarAccess.getYAssignmentAccess().getEqualsSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getYAssignmentAccess().getRightYOrExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleYOrExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getYAssignmentRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"eu.jgen.notes.dmw.lite.Lang.YOrExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleYSelectionExpression
entryRuleYSelectionExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYSelectionExpressionRule()); }
	iv_ruleYSelectionExpression=ruleYSelectionExpression
	{ $current=$iv_ruleYSelectionExpression.current; }
	EOF;

// Rule YSelectionExpression
ruleYSelectionExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getYSelectionExpressionAccess().getYTerminalExpressionParserRuleCall_0());
		}
		this_YTerminalExpression_0=ruleYTerminalExpression
		{
			$current = $this_YTerminalExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getYSelectionExpressionAccess().getYMemberSelectionReceiverAction_1_0(),
						$current);
				}
			)
			otherlv_2='.'
			{
				newLeafNode(otherlv_2, grammarAccess.getYSelectionExpressionAccess().getFullStopKeyword_1_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYSelectionExpressionRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getYSelectionExpressionAccess().getMemberYMemberCrossReference_1_2_0());
					}
				)
			)
			(
				(
					(
						lv_functioninvocation_4_0='('
						{
							newLeafNode(lv_functioninvocation_4_0, grammarAccess.getYSelectionExpressionAccess().getFunctioninvocationLeftParenthesisKeyword_1_3_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getYSelectionExpressionRule());
							}
							setWithLastConsumed($current, "functioninvocation", true, "(");
						}
					)
				)
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getYSelectionExpressionAccess().getArgsYOrExpressionParserRuleCall_1_3_1_0_0());
							}
							lv_args_5_0=ruleYOrExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getYSelectionExpressionRule());
								}
								add(
									$current,
									"args",
									lv_args_5_0,
									"eu.jgen.notes.dmw.lite.Lang.YOrExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_6=','
						{
							newLeafNode(otherlv_6, grammarAccess.getYSelectionExpressionAccess().getCommaKeyword_1_3_1_1_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getYSelectionExpressionAccess().getArgsYOrExpressionParserRuleCall_1_3_1_1_1_0());
								}
								lv_args_7_0=ruleYOrExpression
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getYSelectionExpressionRule());
									}
									add(
										$current,
										"args",
										lv_args_7_0,
										"eu.jgen.notes.dmw.lite.Lang.YOrExpression");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)*
				)?
				otherlv_8=')'
				{
					newLeafNode(otherlv_8, grammarAccess.getYSelectionExpressionAccess().getRightParenthesisKeyword_1_3_2());
				}
			)?
		)*
	)
;

// Entry rule entryRuleYOrExpression
entryRuleYOrExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYOrExpressionRule()); }
	iv_ruleYOrExpression=ruleYOrExpression
	{ $current=$iv_ruleYOrExpression.current; }
	EOF;

// Rule YOrExpression
ruleYOrExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getYOrExpressionAccess().getYAndExpressionParserRuleCall_0());
		}
		this_YAndExpression_0=ruleYAndExpression
		{
			$current = $this_YAndExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getYOrExpressionAccess().getYOrExpressionLeftAction_1_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getYOrExpressionAccess().getOpOrParserRuleCall_1_1());
			}
			ruleOpOr
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getYOrExpressionAccess().getRightYAndExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleYAndExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getYOrExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"eu.jgen.notes.dmw.lite.Lang.YAndExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOpOr
entryRuleOpOr returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOpOrRule()); }
	iv_ruleOpOr=ruleOpOr
	{ $current=$iv_ruleOpOr.current.getText(); }
	EOF;

// Rule OpOr
ruleOpOr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='||'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getOpOrAccess().getVerticalLineVerticalLineKeyword());
	}
;

// Entry rule entryRuleYAndExpression
entryRuleYAndExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAndExpressionRule()); }
	iv_ruleYAndExpression=ruleYAndExpression
	{ $current=$iv_ruleYAndExpression.current; }
	EOF;

// Rule YAndExpression
ruleYAndExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getYAndExpressionAccess().getYEqualityExpressionParserRuleCall_0());
		}
		this_YEqualityExpression_0=ruleYEqualityExpression
		{
			$current = $this_YEqualityExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getYAndExpressionAccess().getYAndExpressionLeftAction_1_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getYAndExpressionAccess().getOpAndParserRuleCall_1_1());
			}
			ruleOpAnd
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getYAndExpressionAccess().getRightYEqualityExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleYEqualityExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getYAndExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"eu.jgen.notes.dmw.lite.Lang.YEqualityExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOpAnd
entryRuleOpAnd returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOpAndRule()); }
	iv_ruleOpAnd=ruleOpAnd
	{ $current=$iv_ruleOpAnd.current.getText(); }
	EOF;

// Rule OpAnd
ruleOpAnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='&&'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getOpAndAccess().getAmpersandAmpersandKeyword());
	}
;

// Entry rule entryRuleYEqualityExpression
entryRuleYEqualityExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYEqualityExpressionRule()); }
	iv_ruleYEqualityExpression=ruleYEqualityExpression
	{ $current=$iv_ruleYEqualityExpression.current; }
	EOF;

// Rule YEqualityExpression
ruleYEqualityExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getYEqualityExpressionAccess().getYComparisonExpressionParserRuleCall_0());
		}
		this_YComparisonExpression_0=ruleYComparisonExpression
		{
			$current = $this_YComparisonExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getYEqualityExpressionAccess().getYEqualityExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1='=='
						{
							newLeafNode(lv_op_2_1, grammarAccess.getYEqualityExpressionAccess().getOpEqualsSignEqualsSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getYEqualityExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2='!='
						{
							newLeafNode(lv_op_2_2, grammarAccess.getYEqualityExpressionAccess().getOpExclamationMarkEqualsSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getYEqualityExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getYEqualityExpressionAccess().getRightYComparisonExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleYComparisonExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getYEqualityExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"eu.jgen.notes.dmw.lite.Lang.YComparisonExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleYComparisonExpression
entryRuleYComparisonExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYComparisonExpressionRule()); }
	iv_ruleYComparisonExpression=ruleYComparisonExpression
	{ $current=$iv_ruleYComparisonExpression.current; }
	EOF;

// Rule YComparisonExpression
ruleYComparisonExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getYComparisonExpressionAccess().getYAdditiveExpressionParserRuleCall_0());
		}
		this_YAdditiveExpression_0=ruleYAdditiveExpression
		{
			$current = $this_YAdditiveExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getYComparisonExpressionAccess().getYComparisonExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getYComparisonExpressionAccess().getOpOpCompareParserRuleCall_1_1_0());
					}
					lv_op_2_0=ruleOpCompare
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getYComparisonExpressionRule());
						}
						set(
							$current,
							"op",
							lv_op_2_0,
							"eu.jgen.notes.dmw.lite.Lang.OpCompare");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getYComparisonExpressionAccess().getRightYAdditiveExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleYAdditiveExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getYComparisonExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"eu.jgen.notes.dmw.lite.Lang.YAdditiveExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOpCompare
entryRuleOpCompare returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOpCompareRule()); }
	iv_ruleOpCompare=ruleOpCompare
	{ $current=$iv_ruleOpCompare.current.getText(); }
	EOF;

// Rule OpCompare
ruleOpCompare returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='>='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpCompareAccess().getGreaterThanSignEqualsSignKeyword_0());
		}
		    |
		(
			kw='<'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOpCompareAccess().getLessThanSignKeyword_1_0());
			}
			kw='='
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOpCompareAccess().getEqualsSignKeyword_1_1());
			}
		)
		    |
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpCompareAccess().getGreaterThanSignKeyword_2());
		}
		    |
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpCompareAccess().getLessThanSignKeyword_3());
		}
	)
;

// Entry rule entryRuleYAdditiveExpression
entryRuleYAdditiveExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAdditiveExpressionRule()); }
	iv_ruleYAdditiveExpression=ruleYAdditiveExpression
	{ $current=$iv_ruleYAdditiveExpression.current; }
	EOF;

// Rule YAdditiveExpression
ruleYAdditiveExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getYAdditiveExpressionAccess().getYMultiplicativeExpressionParserRuleCall_0());
		}
		this_YMultiplicativeExpression_0=ruleYMultiplicativeExpression
		{
			$current = $this_YMultiplicativeExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getYAdditiveExpressionAccess().getYPlusLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='+'
					{
						newLeafNode(otherlv_2, grammarAccess.getYAdditiveExpressionAccess().getPlusSignKeyword_1_0_0_1());
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getYAdditiveExpressionAccess().getYMinusLeftAction_1_0_1_0(),
								$current);
						}
					)
					otherlv_4='-'
					{
						newLeafNode(otherlv_4, grammarAccess.getYAdditiveExpressionAccess().getHyphenMinusKeyword_1_0_1_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getYAdditiveExpressionAccess().getRightYMultiplicativeExpressionParserRuleCall_1_1_0());
					}
					lv_right_5_0=ruleYMultiplicativeExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getYAdditiveExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"eu.jgen.notes.dmw.lite.Lang.YMultiplicativeExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleYMultiplicativeExpression
entryRuleYMultiplicativeExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYMultiplicativeExpressionRule()); }
	iv_ruleYMultiplicativeExpression=ruleYMultiplicativeExpression
	{ $current=$iv_ruleYMultiplicativeExpression.current; }
	EOF;

// Rule YMultiplicativeExpression
ruleYMultiplicativeExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getYMultiplicativeExpressionAccess().getYPrimaryParserRuleCall_0());
		}
		this_YPrimary_0=ruleYPrimary
		{
			$current = $this_YPrimary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getYMultiplicativeExpressionAccess().getYMulOrDivLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1='*'
						{
							newLeafNode(lv_op_2_1, grammarAccess.getYMultiplicativeExpressionAccess().getOpAsteriskKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getYMultiplicativeExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2='/'
						{
							newLeafNode(lv_op_2_2, grammarAccess.getYMultiplicativeExpressionAccess().getOpSolidusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getYMultiplicativeExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getYMultiplicativeExpressionAccess().getRightYPrimaryParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleYPrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getYMultiplicativeExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"eu.jgen.notes.dmw.lite.Lang.YPrimary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleYPrimary
entryRuleYPrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYPrimaryRule()); }
	iv_ruleYPrimary=ruleYPrimary
	{ $current=$iv_ruleYPrimary.current; }
	EOF;

// Rule YPrimary
ruleYPrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getYPrimaryAccess().getYParentiesAction_0_0(),
						$current);
				}
			)
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getYPrimaryAccess().getLeftParenthesisKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getYPrimaryAccess().getAYOrExpressionParserRuleCall_0_2_0());
					}
					lv_a_2_0=ruleYOrExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getYPrimaryRule());
						}
						set(
							$current,
							"a",
							lv_a_2_0,
							"eu.jgen.notes.dmw.lite.Lang.YOrExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getYPrimaryAccess().getRightParenthesisKeyword_0_3());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getYPrimaryAccess().getYNotAction_1_0(),
						$current);
				}
			)
			otherlv_5='!'
			{
				newLeafNode(otherlv_5, grammarAccess.getYPrimaryAccess().getExclamationMarkKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getYPrimaryAccess().getExpressionYPrimaryParserRuleCall_1_2_0());
					}
					lv_expression_6_0=ruleYPrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getYPrimaryRule());
						}
						set(
							$current,
							"expression",
							lv_expression_6_0,
							"eu.jgen.notes.dmw.lite.Lang.YPrimary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getYPrimaryAccess().getYSelectionExpressionParserRuleCall_2());
		}
		this_YSelectionExpression_7=ruleYSelectionExpression
		{
			$current = $this_YSelectionExpression_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleYTerminalExpression
entryRuleYTerminalExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYTerminalExpressionRule()); }
	iv_ruleYTerminalExpression=ruleYTerminalExpression
	{ $current=$iv_ruleYTerminalExpression.current; }
	EOF;

// Rule YTerminalExpression
ruleYTerminalExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getYTerminalExpressionAccess().getYStringConstantAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_value_1_0=RULE_STRING
					{
						newLeafNode(lv_value_1_0, grammarAccess.getYTerminalExpressionAccess().getValueSTRINGTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYTerminalExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_1_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getYTerminalExpressionAccess().getYIntConstantAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_value_3_0=RULE_INT
					{
						newLeafNode(lv_value_3_0, grammarAccess.getYTerminalExpressionAccess().getValueINTTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYTerminalExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getYTerminalExpressionAccess().getYBoolConstantAction_2_0(),
						$current);
				}
			)
			(
				(
					(
						lv_value_5_1='true'
						{
							newLeafNode(lv_value_5_1, grammarAccess.getYTerminalExpressionAccess().getValueTrueKeyword_2_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getYTerminalExpressionRule());
							}
							setWithLastConsumed($current, "value", lv_value_5_1, null);
						}
						    |
						lv_value_5_2='false'
						{
							newLeafNode(lv_value_5_2, grammarAccess.getYTerminalExpressionAccess().getValueFalseKeyword_2_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getYTerminalExpressionRule());
							}
							setWithLastConsumed($current, "value", lv_value_5_2, null);
						}
					)
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getYTerminalExpressionAccess().getYSelfAction_3_0(),
						$current);
				}
			)
			otherlv_7='self'
			{
				newLeafNode(otherlv_7, grammarAccess.getYTerminalExpressionAccess().getSelfKeyword_3_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getYTerminalExpressionAccess().getYSuperAction_4_0(),
						$current);
				}
			)
			otherlv_9='super'
			{
				newLeafNode(otherlv_9, grammarAccess.getYTerminalExpressionAccess().getSuperKeyword_4_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getYTerminalExpressionAccess().getYNullAction_5_0(),
						$current);
				}
			)
			otherlv_11='null'
			{
				newLeafNode(otherlv_11, grammarAccess.getYTerminalExpressionAccess().getNullKeyword_5_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getYTerminalExpressionAccess().getYSymbolRefAction_6_0(),
						$current);
				}
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYTerminalExpressionRule());
						}
					}
					otherlv_13=RULE_ID
					{
						newLeafNode(otherlv_13, grammarAccess.getYTerminalExpressionAccess().getSymbolYSymbolCrossReference_6_1_0());
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getYTerminalExpressionAccess().getYNewAction_7_0(),
						$current);
				}
			)
			otherlv_15='new'
			{
				newLeafNode(otherlv_15, grammarAccess.getYTerminalExpressionAccess().getNewKeyword_7_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYTerminalExpressionRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getYTerminalExpressionAccess().getTypeYClassCrossReference_7_2_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_17='('
			{
				newLeafNode(otherlv_17, grammarAccess.getYTerminalExpressionAccess().getLeftParenthesisKeyword_7_3());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getYTerminalExpressionAccess().getArgumentsYOrExpressionParserRuleCall_7_4_0_0());
						}
						lv_arguments_18_0=ruleYOrExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getYTerminalExpressionRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_18_0,
								"eu.jgen.notes.dmw.lite.Lang.YOrExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_19=','
					{
						newLeafNode(otherlv_19, grammarAccess.getYTerminalExpressionAccess().getCommaKeyword_7_4_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getYTerminalExpressionAccess().getArgumentsYOrExpressionParserRuleCall_7_4_1_1_0());
							}
							lv_arguments_20_0=ruleYOrExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getYTerminalExpressionRule());
								}
								add(
									$current,
									"arguments",
									lv_arguments_20_0,
									"eu.jgen.notes.dmw.lite.Lang.YOrExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_21=')'
			{
				newLeafNode(otherlv_21, grammarAccess.getYTerminalExpressionAccess().getRightParenthesisKeyword_7_5());
			}
		)
	)
;

// Entry rule entryRuleYReadStatement
entryRuleYReadStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYReadStatementRule()); }
	iv_ruleYReadStatement=ruleYReadStatement
	{ $current=$iv_ruleYReadStatement.current; }
	EOF;

// Rule YReadStatement
ruleYReadStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='read'
		{
			newLeafNode(otherlv_0, grammarAccess.getYReadStatementAccess().getReadKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYReadStatementAccess().getStructsYStructRefPairParserRuleCall_1_0());
				}
				lv_structs_1_0=ruleYStructRefPair
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYReadStatementRule());
					}
					add(
						$current,
						"structs",
						lv_structs_1_0,
						"eu.jgen.notes.dmw.lite.Lang.YStructRefPair");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getYReadStatementAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getYReadStatementAccess().getStructsYStructRefPairParserRuleCall_2_1_0());
					}
					lv_structs_3_0=ruleYStructRefPair
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getYReadStatementRule());
						}
						add(
							$current,
							"structs",
							lv_structs_3_0,
							"eu.jgen.notes.dmw.lite.Lang.YStructRefPair");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getYReadStatementAccess().getJoinclauseYJoinParserRuleCall_3_0());
				}
				lv_joinclause_4_0=ruleYJoin
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYReadStatementRule());
					}
					set(
						$current,
						"joinclause",
						lv_joinclause_4_0,
						"eu.jgen.notes.dmw.lite.Lang.YJoin");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getYReadStatementAccess().getWhereclauseYWhereParserRuleCall_4_0());
				}
				lv_whereclause_5_0=ruleYWhere
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYReadStatementRule());
					}
					set(
						$current,
						"whereclause",
						lv_whereclause_5_0,
						"eu.jgen.notes.dmw.lite.Lang.YWhere");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_6='success'
		{
			newLeafNode(otherlv_6, grammarAccess.getYReadStatementAccess().getSuccessKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYReadStatementAccess().getSuccessYBlockParserRuleCall_6_0());
				}
				lv_success_7_0=ruleYBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYReadStatementRule());
					}
					set(
						$current,
						"success",
						lv_success_7_0,
						"eu.jgen.notes.dmw.lite.Lang.YBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8='not'
		{
			newLeafNode(otherlv_8, grammarAccess.getYReadStatementAccess().getNotKeyword_7());
		}
		otherlv_9='found'
		{
			newLeafNode(otherlv_9, grammarAccess.getYReadStatementAccess().getFoundKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYReadStatementAccess().getNotfoundYBlockParserRuleCall_9_0());
				}
				lv_notfound_10_0=ruleYBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYReadStatementRule());
					}
					set(
						$current,
						"notfound",
						lv_notfound_10_0,
						"eu.jgen.notes.dmw.lite.Lang.YBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleYReadEachStatement
entryRuleYReadEachStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYReadEachStatementRule()); }
	iv_ruleYReadEachStatement=ruleYReadEachStatement
	{ $current=$iv_ruleYReadEachStatement.current; }
	EOF;

// Rule YReadEachStatement
ruleYReadEachStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='read'
		{
			newLeafNode(otherlv_0, grammarAccess.getYReadEachStatementAccess().getReadKeyword_0());
		}
		otherlv_1='each'
		{
			newLeafNode(otherlv_1, grammarAccess.getYReadEachStatementAccess().getEachKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYReadEachStatementAccess().getStructsYStructRefPairParserRuleCall_2_0());
				}
				lv_structs_2_0=ruleYStructRefPair
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYReadEachStatementRule());
					}
					add(
						$current,
						"structs",
						lv_structs_2_0,
						"eu.jgen.notes.dmw.lite.Lang.YStructRefPair");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getYReadEachStatementAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getYReadEachStatementAccess().getStructsYStructRefPairParserRuleCall_3_1_0());
					}
					lv_structs_4_0=ruleYStructRefPair
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getYReadEachStatementRule());
						}
						add(
							$current,
							"structs",
							lv_structs_4_0,
							"eu.jgen.notes.dmw.lite.Lang.YStructRefPair");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getYReadEachStatementAccess().getJoinclauseYJoinParserRuleCall_4_0());
				}
				lv_joinclause_5_0=ruleYJoin
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYReadEachStatementRule());
					}
					set(
						$current,
						"joinclause",
						lv_joinclause_5_0,
						"eu.jgen.notes.dmw.lite.Lang.YJoin");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getYReadEachStatementAccess().getWhereclauseYWhereParserRuleCall_5_0());
				}
				lv_whereclause_6_0=ruleYWhere
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYReadEachStatementRule());
					}
					set(
						$current,
						"whereclause",
						lv_whereclause_6_0,
						"eu.jgen.notes.dmw.lite.Lang.YWhere");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_7='target'
		{
			newLeafNode(otherlv_7, grammarAccess.getYReadEachStatementAccess().getTargetKeyword_6());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYReadEachStatementRule());
					}
				}
				otherlv_8=RULE_ID
				{
					newLeafNode(otherlv_8, grammarAccess.getYReadEachStatementAccess().getTargetYPropertyCrossReference_7_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getYReadEachStatementAccess().getSuccessYBlockParserRuleCall_8_0());
				}
				lv_success_9_0=ruleYBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYReadEachStatementRule());
					}
					set(
						$current,
						"success",
						lv_success_9_0,
						"eu.jgen.notes.dmw.lite.Lang.YBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleYCreateStatement
entryRuleYCreateStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYCreateStatementRule()); }
	iv_ruleYCreateStatement=ruleYCreateStatement
	{ $current=$iv_ruleYCreateStatement.current; }
	EOF;

// Rule YCreateStatement
ruleYCreateStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='create'
		{
			newLeafNode(otherlv_0, grammarAccess.getYCreateStatementAccess().getCreateKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYCreateStatementAccess().getStructYStructRefPairParserRuleCall_1_0());
				}
				lv_struct_1_0=ruleYStructRefPair
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYCreateStatementRule());
					}
					set(
						$current,
						"struct",
						lv_struct_1_0,
						"eu.jgen.notes.dmw.lite.Lang.YStructRefPair");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getYCreateStatementAccess().getSetBlockYBlockParserRuleCall_2_0());
				}
				lv_setBlock_2_0=ruleYBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYCreateStatementRule());
					}
					set(
						$current,
						"setBlock",
						lv_setBlock_2_0,
						"eu.jgen.notes.dmw.lite.Lang.YBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='success'
		{
			newLeafNode(otherlv_3, grammarAccess.getYCreateStatementAccess().getSuccessKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYCreateStatementAccess().getSuccessYBlockParserRuleCall_4_0());
				}
				lv_success_4_0=ruleYBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYCreateStatementRule());
					}
					set(
						$current,
						"success",
						lv_success_4_0,
						"eu.jgen.notes.dmw.lite.Lang.YBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='already'
		{
			newLeafNode(otherlv_5, grammarAccess.getYCreateStatementAccess().getAlreadyKeyword_5());
		}
		otherlv_6='exist'
		{
			newLeafNode(otherlv_6, grammarAccess.getYCreateStatementAccess().getExistKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYCreateStatementAccess().getAlreadyExistYBlockParserRuleCall_7_0());
				}
				lv_alreadyExist_7_0=ruleYBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYCreateStatementRule());
					}
					set(
						$current,
						"alreadyExist",
						lv_alreadyExist_7_0,
						"eu.jgen.notes.dmw.lite.Lang.YBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleYUpdateStatement
entryRuleYUpdateStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYUpdateStatementRule()); }
	iv_ruleYUpdateStatement=ruleYUpdateStatement
	{ $current=$iv_ruleYUpdateStatement.current; }
	EOF;

// Rule YUpdateStatement
ruleYUpdateStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='update'
		{
			newLeafNode(otherlv_0, grammarAccess.getYUpdateStatementAccess().getUpdateKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYUpdateStatementAccess().getStructYStructRefPairParserRuleCall_1_0());
				}
				lv_struct_1_0=ruleYStructRefPair
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYUpdateStatementRule());
					}
					set(
						$current,
						"struct",
						lv_struct_1_0,
						"eu.jgen.notes.dmw.lite.Lang.YStructRefPair");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getYUpdateStatementAccess().getSetBlockYBlockParserRuleCall_2_0());
				}
				lv_setBlock_2_0=ruleYBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYUpdateStatementRule());
					}
					set(
						$current,
						"setBlock",
						lv_setBlock_2_0,
						"eu.jgen.notes.dmw.lite.Lang.YBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='success'
		{
			newLeafNode(otherlv_3, grammarAccess.getYUpdateStatementAccess().getSuccessKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYUpdateStatementAccess().getSuccessYBlockParserRuleCall_4_0());
				}
				lv_success_4_0=ruleYBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYUpdateStatementRule());
					}
					set(
						$current,
						"success",
						lv_success_4_0,
						"eu.jgen.notes.dmw.lite.Lang.YBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleYDeleteStatement
entryRuleYDeleteStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYDeleteStatementRule()); }
	iv_ruleYDeleteStatement=ruleYDeleteStatement
	{ $current=$iv_ruleYDeleteStatement.current; }
	EOF;

// Rule YDeleteStatement
ruleYDeleteStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='delete'
		{
			newLeafNode(otherlv_0, grammarAccess.getYDeleteStatementAccess().getDeleteKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYDeleteStatementAccess().getStructYStructRefPairParserRuleCall_1_0());
				}
				lv_struct_1_0=ruleYStructRefPair
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYDeleteStatementRule());
					}
					set(
						$current,
						"struct",
						lv_struct_1_0,
						"eu.jgen.notes.dmw.lite.Lang.YStructRefPair");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getYDeleteStatementAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleYAssociateStatement
entryRuleYAssociateStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAssociateStatementRule()); }
	iv_ruleYAssociateStatement=ruleYAssociateStatement
	{ $current=$iv_ruleYAssociateStatement.current; }
	EOF;

// Rule YAssociateStatement
ruleYAssociateStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='associate'
		{
			newLeafNode(otherlv_0, grammarAccess.getYAssociateStatementAccess().getAssociateKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYAssociateStatementAccess().getJoinrefYJoinDefParserRuleCall_1_0());
				}
				lv_joinref_1_0=ruleYJoinDef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAssociateStatementRule());
					}
					set(
						$current,
						"joinref",
						lv_joinref_1_0,
						"eu.jgen.notes.dmw.lite.Lang.YJoinDef");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getYAssociateStatementAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleYStructRefPair
entryRuleYStructRefPair returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYStructRefPairRule()); }
	iv_ruleYStructRefPair=ruleYStructRefPair
	{ $current=$iv_ruleYStructRefPair.current; }
	EOF;

// Rule YStructRefPair
ruleYStructRefPair returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYStructRefPairRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getYStructRefPairAccess().getStructpropertyYPropertyCrossReference_0_0());
				}
			)
		)
		otherlv_1='->'
		{
			newLeafNode(otherlv_1, grammarAccess.getYStructRefPairAccess().getHyphenMinusGreaterThanSignKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYStructRefPairRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getYStructRefPairAccess().getStructclassYAnnotEntityCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleYJoin
entryRuleYJoin returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYJoinRule()); }
	iv_ruleYJoin=ruleYJoin
	{ $current=$iv_ruleYJoin.current; }
	EOF;

// Rule YJoin
ruleYJoin returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYJoinAccess().getYJoinAction_0(),
					$current);
			}
		)
		otherlv_1='join'
		{
			newLeafNode(otherlv_1, grammarAccess.getYJoinAccess().getJoinKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYJoinAccess().getJoindefYJoinDefParserRuleCall_2_0());
				}
				lv_joindef_2_0=ruleYJoinDef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYJoinRule());
					}
					add(
						$current,
						"joindef",
						lv_joindef_2_0,
						"eu.jgen.notes.dmw.lite.Lang.YJoinDef");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getYJoinAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getYJoinAccess().getJoindefYJoinDefParserRuleCall_3_1_0());
					}
					lv_joindef_4_0=ruleYJoinDef
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getYJoinRule());
						}
						add(
							$current,
							"joindef",
							lv_joindef_4_0,
							"eu.jgen.notes.dmw.lite.Lang.YJoinDef");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleYJoinDef
entryRuleYJoinDef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYJoinDefRule()); }
	iv_ruleYJoinDef=ruleYJoinDef
	{ $current=$iv_ruleYJoinDef.current; }
	EOF;

// Rule YJoinDef
ruleYJoinDef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYJoinDefRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getYJoinDefAccess().getFromViewYPropertyCrossReference_0_0());
				}
			)
		)
		otherlv_1='->'
		{
			newLeafNode(otherlv_1, grammarAccess.getYJoinDefAccess().getHyphenMinusGreaterThanSignKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYJoinDefRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getYJoinDefAccess().getRelRefYAnnotRelCrossReference_2_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='->'
		{
			newLeafNode(otherlv_3, grammarAccess.getYJoinDefAccess().getHyphenMinusGreaterThanSignKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYJoinDefRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getYJoinDefAccess().getToViewYPropertyCrossReference_4_0());
				}
			)
		)
	)
;

// Entry rule entryRuleYWhere
entryRuleYWhere returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYWhereRule()); }
	iv_ruleYWhere=ruleYWhere
	{ $current=$iv_ruleYWhere.current; }
	EOF;

// Rule YWhere
ruleYWhere returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYWhereAccess().getYWhereAction_0(),
					$current);
			}
		)
		otherlv_1='where'
		{
			newLeafNode(otherlv_1, grammarAccess.getYWhereAccess().getWhereKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYWhereAccess().getExpressionYOrExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleYOrExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYWhereRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"eu.jgen.notes.dmw.lite.Lang.YOrExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleYWhileStatement
entryRuleYWhileStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYWhileStatementRule()); }
	iv_ruleYWhileStatement=ruleYWhileStatement
	{ $current=$iv_ruleYWhileStatement.current; }
	EOF;

// Rule YWhileStatement
ruleYWhileStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='while'
		{
			newLeafNode(otherlv_0, grammarAccess.getYWhileStatementAccess().getWhileKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYWhileStatementAccess().getExpressionYOrExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleYOrExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYWhileStatementRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"eu.jgen.notes.dmw.lite.Lang.YOrExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getYWhileStatementAccess().getBodyYBlockParserRuleCall_2_0());
				}
				lv_body_2_0=ruleYBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYWhileStatementRule());
					}
					set(
						$current,
						"body",
						lv_body_2_0,
						"eu.jgen.notes.dmw.lite.Lang.YBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleYRepeatWhileStatement
entryRuleYRepeatWhileStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYRepeatWhileStatementRule()); }
	iv_ruleYRepeatWhileStatement=ruleYRepeatWhileStatement
	{ $current=$iv_ruleYRepeatWhileStatement.current; }
	EOF;

// Rule YRepeatWhileStatement
ruleYRepeatWhileStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='repeat'
		{
			newLeafNode(otherlv_0, grammarAccess.getYRepeatWhileStatementAccess().getRepeatKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYRepeatWhileStatementAccess().getBodyYBlockParserRuleCall_1_0());
				}
				lv_body_1_0=ruleYBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYRepeatWhileStatementRule());
					}
					set(
						$current,
						"body",
						lv_body_1_0,
						"eu.jgen.notes.dmw.lite.Lang.YBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='while'
		{
			newLeafNode(otherlv_2, grammarAccess.getYRepeatWhileStatementAccess().getWhileKeyword_2());
		}
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getYRepeatWhileStatementAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYRepeatWhileStatementAccess().getExpressionYOrExpressionParserRuleCall_4_0());
				}
				lv_expression_4_0=ruleYOrExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYRepeatWhileStatementRule());
					}
					set(
						$current,
						"expression",
						lv_expression_4_0,
						"eu.jgen.notes.dmw.lite.Lang.YOrExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getYRepeatWhileStatementAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleYForInStatement
entryRuleYForInStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYForInStatementRule()); }
	iv_ruleYForInStatement=ruleYForInStatement
	{ $current=$iv_ruleYForInStatement.current; }
	EOF;

// Rule YForInStatement
ruleYForInStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='for'
		{
			newLeafNode(otherlv_0, grammarAccess.getYForInStatementAccess().getForKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYForInStatementRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getYForInStatementAccess().getItemYPropertyCrossReference_1_0());
				}
			)
		)
		otherlv_2='in'
		{
			newLeafNode(otherlv_2, grammarAccess.getYForInStatementAccess().getInKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYForInStatementRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getYForInStatementAccess().getCollectionYPropertyCrossReference_3_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getYForInStatementAccess().getBodyYBlockParserRuleCall_4_0());
				}
				lv_body_4_0=ruleYBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYForInStatementRule());
					}
					set(
						$current,
						"body",
						lv_body_4_0,
						"eu.jgen.notes.dmw.lite.Lang.YBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleYAnnot
entryRuleYAnnot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotRule()); }
	iv_ruleYAnnot=ruleYAnnot
	{ $current=$iv_ruleYAnnot.current; }
	EOF;

// Rule YAnnot
ruleYAnnot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYAnnotAccess().getYAnnotAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getYAnnotAccess().getTypeYAnnotLengthParserRuleCall_1_0_0());
					}
					lv_type_1_1=ruleYAnnotLength
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getYAnnotRule());
						}
						set(
							$current,
							"type",
							lv_type_1_1,
							"eu.jgen.notes.dmw.lite.Lang.YAnnotLength");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getYAnnotAccess().getTypeYAnnotDecimalParserRuleCall_1_0_1());
					}
					lv_type_1_2=ruleYAnnotDecimal
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getYAnnotRule());
						}
						set(
							$current,
							"type",
							lv_type_1_2,
							"eu.jgen.notes.dmw.lite.Lang.YAnnotDecimal");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getYAnnotAccess().getTypeYAnnotActionParserRuleCall_1_0_2());
					}
					lv_type_1_3=ruleYAnnotAction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getYAnnotRule());
						}
						set(
							$current,
							"type",
							lv_type_1_3,
							"eu.jgen.notes.dmw.lite.Lang.YAnnotAction");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getYAnnotAccess().getTypeYAnnotMessageParserRuleCall_1_0_3());
					}
					lv_type_1_4=ruleYAnnotMessage
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getYAnnotRule());
						}
						set(
							$current,
							"type",
							lv_type_1_4,
							"eu.jgen.notes.dmw.lite.Lang.YAnnotMessage");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getYAnnotAccess().getTypeYAnnotMsgTypeParserRuleCall_1_0_4());
					}
					lv_type_1_5=ruleYAnnotMsgType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getYAnnotRule());
						}
						set(
							$current,
							"type",
							lv_type_1_5,
							"eu.jgen.notes.dmw.lite.Lang.YAnnotMsgType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleYAnnotTop
entryRuleYAnnotTop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotTopRule()); }
	iv_ruleYAnnotTop=ruleYAnnotTop
	{ $current=$iv_ruleYAnnotTop.current; }
	EOF;

// Rule YAnnotTop
ruleYAnnotTop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getYAnnotTopAccess().getTypeYAnnotEntityParserRuleCall_0_0());
				}
				lv_type_0_1=ruleYAnnotEntity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAnnotTopRule());
					}
					set(
						$current,
						"type",
						lv_type_0_1,
						"eu.jgen.notes.dmw.lite.Lang.YAnnotEntity");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getYAnnotTopAccess().getTypeYAnnotTechnicalDesignParserRuleCall_0_1());
				}
				lv_type_0_2=ruleYAnnotTechnicalDesign
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAnnotTopRule());
					}
					set(
						$current,
						"type",
						lv_type_0_2,
						"eu.jgen.notes.dmw.lite.Lang.YAnnotTechnicalDesign");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getYAnnotTopAccess().getTypeYAnnotSwiftParserRuleCall_0_2());
				}
				lv_type_0_3=ruleYAnnotSwift
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAnnotTopRule());
					}
					set(
						$current,
						"type",
						lv_type_0_3,
						"eu.jgen.notes.dmw.lite.Lang.YAnnotSwift");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getYAnnotTopAccess().getTypeYAnnotJavaParserRuleCall_0_3());
				}
				lv_type_0_4=ruleYAnnotJava
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAnnotTopRule());
					}
					set(
						$current,
						"type",
						lv_type_0_4,
						"eu.jgen.notes.dmw.lite.Lang.YAnnotJava");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getYAnnotTopAccess().getTypeYAnnotDatabaseParserRuleCall_0_4());
				}
				lv_type_0_5=ruleYAnnotDatabase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAnnotTopRule());
					}
					set(
						$current,
						"type",
						lv_type_0_5,
						"eu.jgen.notes.dmw.lite.Lang.YAnnotDatabase");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleYAnnotLength
entryRuleYAnnotLength returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotLengthRule()); }
	iv_ruleYAnnotLength=ruleYAnnotLength
	{ $current=$iv_ruleYAnnotLength.current; }
	EOF;

// Rule YAnnotLength
ruleYAnnotLength returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYAnnotLengthAccess().getYAnnotLengthAction_0(),
					$current);
			}
		)
		otherlv_1='@length'
		{
			newLeafNode(otherlv_1, grammarAccess.getYAnnotLengthAccess().getLengthKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getYAnnotLengthAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				lv_length_3_0=RULE_INT
				{
					newLeafNode(lv_length_3_0, grammarAccess.getYAnnotLengthAccess().getLengthINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYAnnotLengthRule());
					}
					setWithLastConsumed(
						$current,
						"length",
						lv_length_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getYAnnotLengthAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleYAnnotDecimal
entryRuleYAnnotDecimal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotDecimalRule()); }
	iv_ruleYAnnotDecimal=ruleYAnnotDecimal
	{ $current=$iv_ruleYAnnotDecimal.current; }
	EOF;

// Rule YAnnotDecimal
ruleYAnnotDecimal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYAnnotDecimalAccess().getYAnnotDecimalAction_0(),
					$current);
			}
		)
		otherlv_1='@decimal'
		{
			newLeafNode(otherlv_1, grammarAccess.getYAnnotDecimalAccess().getDecimalKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getYAnnotDecimalAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				lv_length_3_0=RULE_INT
				{
					newLeafNode(lv_length_3_0, grammarAccess.getYAnnotDecimalAccess().getLengthINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYAnnotDecimalRule());
					}
					setWithLastConsumed(
						$current,
						"length",
						lv_length_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getYAnnotDecimalAccess().getCommaKeyword_4());
		}
		(
			(
				lv_decimal_5_0=RULE_INT
				{
					newLeafNode(lv_decimal_5_0, grammarAccess.getYAnnotDecimalAccess().getDecimalINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYAnnotDecimalRule());
					}
					setWithLastConsumed(
						$current,
						"decimal",
						lv_decimal_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getYAnnotDecimalAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleYAnnotAction
entryRuleYAnnotAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotActionRule()); }
	iv_ruleYAnnotAction=ruleYAnnotAction
	{ $current=$iv_ruleYAnnotAction.current; }
	EOF;

// Rule YAnnotAction
ruleYAnnotAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYAnnotActionAccess().getYAnnotActionAction_0(),
					$current);
			}
		)
		otherlv_1='@action'
		{
			newLeafNode(otherlv_1, grammarAccess.getYAnnotActionAccess().getActionKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getYAnnotActionAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYAnnotActionAccess().getActionValidIDParserRuleCall_3_0());
				}
				lv_action_3_0=ruleValidID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAnnotActionRule());
					}
					set(
						$current,
						"action",
						lv_action_3_0,
						"eu.jgen.notes.dmw.lite.Lang.ValidID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getYAnnotActionAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleYAnnotMessage
entryRuleYAnnotMessage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotMessageRule()); }
	iv_ruleYAnnotMessage=ruleYAnnotMessage
	{ $current=$iv_ruleYAnnotMessage.current; }
	EOF;

// Rule YAnnotMessage
ruleYAnnotMessage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYAnnotMessageAccess().getYAnnotMessageAction_0(),
					$current);
			}
		)
		otherlv_1='@message'
		{
			newLeafNode(otherlv_1, grammarAccess.getYAnnotMessageAccess().getMessageKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getYAnnotMessageAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				lv_msg_3_0=RULE_STRING
				{
					newLeafNode(lv_msg_3_0, grammarAccess.getYAnnotMessageAccess().getMsgSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYAnnotMessageRule());
					}
					setWithLastConsumed(
						$current,
						"msg",
						lv_msg_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getYAnnotMessageAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleYAnnotMsgType
entryRuleYAnnotMsgType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotMsgTypeRule()); }
	iv_ruleYAnnotMsgType=ruleYAnnotMsgType
	{ $current=$iv_ruleYAnnotMsgType.current; }
	EOF;

// Rule YAnnotMsgType
ruleYAnnotMsgType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='@msgtype'
		{
			newLeafNode(otherlv_0, grammarAccess.getYAnnotMsgTypeAccess().getMsgtypeKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getYAnnotMsgTypeAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYAnnotMsgTypeAccess().getMsgtypeValidIDParserRuleCall_2_0());
				}
				lv_msgtype_2_0=ruleValidID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAnnotMsgTypeRule());
					}
					set(
						$current,
						"msgtype",
						lv_msgtype_2_0,
						"eu.jgen.notes.dmw.lite.Lang.ValidID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getYAnnotMsgTypeAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleYAnnotEntityInner
entryRuleYAnnotEntityInner returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotEntityInnerRule()); }
	iv_ruleYAnnotEntityInner=ruleYAnnotEntityInner
	{ $current=$iv_ruleYAnnotEntityInner.current; }
	EOF;

// Rule YAnnotEntityInner
ruleYAnnotEntityInner returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getYAnnotEntityInnerAccess().getYAnnotAttrParserRuleCall_0());
		}
		this_YAnnotAttr_0=ruleYAnnotAttr
		{
			$current = $this_YAnnotAttr_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getYAnnotEntityInnerAccess().getYAnnotRelParserRuleCall_1());
		}
		this_YAnnotRel_1=ruleYAnnotRel
		{
			$current = $this_YAnnotRel_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getYAnnotEntityInnerAccess().getYAnnotIdParserRuleCall_2());
		}
		this_YAnnotId_2=ruleYAnnotId
		{
			$current = $this_YAnnotId_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleYAnnotEntity
entryRuleYAnnotEntity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotEntityRule()); }
	iv_ruleYAnnotEntity=ruleYAnnotEntity
	{ $current=$iv_ruleYAnnotEntity.current; }
	EOF;

// Rule YAnnotEntity
ruleYAnnotEntity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='@entity'
		{
			newLeafNode(otherlv_0, grammarAccess.getYAnnotEntityAccess().getEntityKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYAnnotEntityAccess().getNameValidIDParserRuleCall_1_0());
				}
				lv_name_1_0=ruleValidID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAnnotEntityRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"eu.jgen.notes.dmw.lite.Lang.ValidID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=':'
			{
				newLeafNode(otherlv_2, grammarAccess.getYAnnotEntityAccess().getColonKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYAnnotEntityRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getYAnnotEntityAccess().getSuperannotYAnnotEntityCrossReference_2_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getYAnnotEntityAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYAnnotEntityAccess().getAnnotsYAnnotEntityInnerParserRuleCall_4_0());
				}
				lv_annots_5_0=ruleYAnnotEntityInner
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAnnotEntityRule());
					}
					add(
						$current,
						"annots",
						lv_annots_5_0,
						"eu.jgen.notes.dmw.lite.Lang.YAnnotEntityInner");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getYAnnotEntityAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleYAnnotAttr
entryRuleYAnnotAttr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotAttrRule()); }
	iv_ruleYAnnotAttr=ruleYAnnotAttr
	{ $current=$iv_ruleYAnnotAttr.current; }
	EOF;

// Rule YAnnotAttr
ruleYAnnotAttr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYAnnotAttrAccess().getYAnnotAttrAction_0(),
					$current);
			}
		)
		otherlv_1='@attr'
		{
			newLeafNode(otherlv_1, grammarAccess.getYAnnotAttrAccess().getAttrKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYAnnotAttrAccess().getNameValidIDParserRuleCall_2_0());
				}
				lv_name_2_0=ruleValidID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAnnotAttrRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"eu.jgen.notes.dmw.lite.Lang.ValidID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getYAnnotAttrAccess().getColonKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYAnnotAttrRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getYAnnotAttrAccess().getYclassYClassCrossReference_4_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_optional_5_0='?'
				{
					newLeafNode(lv_optional_5_0, grammarAccess.getYAnnotAttrAccess().getOptionalQuestionMarkKeyword_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYAnnotAttrRule());
					}
					setWithLastConsumed($current, "optional", lv_optional_5_0, "?");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getYAnnotAttrAccess().getAnnotsYAnnotParserRuleCall_6_0());
				}
				lv_annots_6_0=ruleYAnnot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAnnotAttrRule());
					}
					add(
						$current,
						"annots",
						lv_annots_6_0,
						"eu.jgen.notes.dmw.lite.Lang.YAnnot");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			otherlv_7=';'
			{
				newLeafNode(otherlv_7, grammarAccess.getYAnnotAttrAccess().getSemicolonKeyword_7());
			}
		)?
	)
;

// Entry rule entryRuleYAnnotRel
entryRuleYAnnotRel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotRelRule()); }
	iv_ruleYAnnotRel=ruleYAnnotRel
	{ $current=$iv_ruleYAnnotRel.current; }
	EOF;

// Rule YAnnotRel
ruleYAnnotRel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYAnnotRelAccess().getYAnnotRelAction_0(),
					$current);
			}
		)
		otherlv_1='@rel'
		{
			newLeafNode(otherlv_1, grammarAccess.getYAnnotRelAccess().getRelKeyword_1());
		}
		(
			(
				lv_parent_2_0='@parent'
				{
					newLeafNode(lv_parent_2_0, grammarAccess.getYAnnotRelAccess().getParentParentKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYAnnotRelRule());
					}
					setWithLastConsumed($current, "parent", true, "@parent");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getYAnnotRelAccess().getNameValidIDParserRuleCall_3_0());
				}
				lv_name_3_0=ruleValidID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAnnotRelRule());
					}
					set(
						$current,
						"name",
						lv_name_3_0,
						"eu.jgen.notes.dmw.lite.Lang.ValidID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_optional_4_0='?'
				{
					newLeafNode(lv_optional_4_0, grammarAccess.getYAnnotRelAccess().getOptionalQuestionMarkKeyword_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYAnnotRelRule());
					}
					setWithLastConsumed($current, "optional", true, "?");
				}
			)
		)?
		otherlv_5='->'
		{
			newLeafNode(otherlv_5, grammarAccess.getYAnnotRelAccess().getHyphenMinusGreaterThanSignKeyword_5());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYAnnotRelRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getYAnnotRelAccess().getTargetYAnnotEntityCrossReference_6_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_many_7_0='*'
				{
					newLeafNode(lv_many_7_0, grammarAccess.getYAnnotRelAccess().getManyAsteriskKeyword_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYAnnotRelRule());
					}
					setWithLastConsumed($current, "many", true, "*");
				}
			)
		)?
		(
			otherlv_8='<-'
			{
				newLeafNode(otherlv_8, grammarAccess.getYAnnotRelAccess().getLessThanSignHyphenMinusKeyword_8_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYAnnotRelRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getYAnnotRelAccess().getInverseYAnnotRelCrossReference_8_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_10=';'
			{
				newLeafNode(otherlv_10, grammarAccess.getYAnnotRelAccess().getSemicolonKeyword_9());
			}
		)?
	)
;

// Entry rule entryRuleYAnnotId
entryRuleYAnnotId returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotIdRule()); }
	iv_ruleYAnnotId=ruleYAnnotId
	{ $current=$iv_ruleYAnnotId.current; }
	EOF;

// Rule YAnnotId
ruleYAnnotId returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYAnnotIdAccess().getYAnnotIdAction_0(),
					$current);
			}
		)
		otherlv_1='@id'
		{
			newLeafNode(otherlv_1, grammarAccess.getYAnnotIdAccess().getIdKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYAnnotIdAccess().getNameValidIDParserRuleCall_2_0());
				}
				lv_name_2_0=ruleValidID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAnnotIdRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"eu.jgen.notes.dmw.lite.Lang.ValidID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getYAnnotIdAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYAnnotIdRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getYAnnotIdAccess().getAnnotsYAnnotEntityInnerCrossReference_4_0());
				}
			)
		)
		(
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getYAnnotIdAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYAnnotIdRule());
						}
					}
					otherlv_6=RULE_ID
					{
						newLeafNode(otherlv_6, grammarAccess.getYAnnotIdAccess().getAnnotsYAnnotEntityInnerCrossReference_5_1_0());
					}
				)
			)
		)*
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getYAnnotIdAccess().getRightParenthesisKeyword_6());
		}
		(
			otherlv_8=';'
			{
				newLeafNode(otherlv_8, grammarAccess.getYAnnotIdAccess().getSemicolonKeyword_7());
			}
		)?
	)
;

// Entry rule entryRuleYAnnotTechnicalDesign
entryRuleYAnnotTechnicalDesign returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotTechnicalDesignRule()); }
	iv_ruleYAnnotTechnicalDesign=ruleYAnnotTechnicalDesign
	{ $current=$iv_ruleYAnnotTechnicalDesign.current; }
	EOF;

// Rule YAnnotTechnicalDesign
ruleYAnnotTechnicalDesign returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYAnnotTechnicalDesignAccess().getYAnnotTechnicalDesignAction_0(),
					$current);
			}
		)
		otherlv_1='@td'
		{
			newLeafNode(otherlv_1, grammarAccess.getYAnnotTechnicalDesignAccess().getTdKeyword_1());
		}
		otherlv_2='database'
		{
			newLeafNode(otherlv_2, grammarAccess.getYAnnotTechnicalDesignAccess().getDatabaseKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYAnnotTechnicalDesignRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getYAnnotTechnicalDesignAccess().getDatabaseYAnnotDatabaseCrossReference_3_0());
				}
			)
		)
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getYAnnotTechnicalDesignAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYAnnotTechnicalDesignAccess().getFeaturesYAnnotTableParserRuleCall_5_0());
				}
				lv_features_5_0=ruleYAnnotTable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAnnotTechnicalDesignRule());
					}
					add(
						$current,
						"features",
						lv_features_5_0,
						"eu.jgen.notes.dmw.lite.Lang.YAnnotTable");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getYAnnotTechnicalDesignAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleYAnnotTable
entryRuleYAnnotTable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotTableRule()); }
	iv_ruleYAnnotTable=ruleYAnnotTable
	{ $current=$iv_ruleYAnnotTable.current; }
	EOF;

// Rule YAnnotTable
ruleYAnnotTable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYAnnotTableAccess().getYAnnotTableAction_0(),
					$current);
			}
		)
		otherlv_1='@table'
		{
			newLeafNode(otherlv_1, grammarAccess.getYAnnotTableAccess().getTableKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYAnnotTableAccess().getNameValidIDParserRuleCall_2_0());
				}
				lv_name_2_0=ruleValidID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAnnotTableRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"eu.jgen.notes.dmw.lite.Lang.ValidID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='->'
		{
			newLeafNode(otherlv_3, grammarAccess.getYAnnotTableAccess().getHyphenMinusGreaterThanSignKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYAnnotTableRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getYAnnotTableAccess().getEntityrefYAnnotEntityCrossReference_4_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getYAnnotTableAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYAnnotTableAccess().getColumnsYAnnotAbstractColumnParserRuleCall_6_0());
				}
				lv_columns_6_0=ruleYAnnotAbstractColumn
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAnnotTableRule());
					}
					add(
						$current,
						"columns",
						lv_columns_6_0,
						"eu.jgen.notes.dmw.lite.Lang.YAnnotAbstractColumn");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getYAnnotTableAccess().getPrimarykeyYAnnotPrimaryKeyParserRuleCall_7_0());
				}
				lv_primarykey_7_0=ruleYAnnotPrimaryKey
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAnnotTableRule());
					}
					set(
						$current,
						"primarykey",
						lv_primarykey_7_0,
						"eu.jgen.notes.dmw.lite.Lang.YAnnotPrimaryKey");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getYAnnotTableAccess().getForeignkeysYAnnotForeignKeyParserRuleCall_8_0());
				}
				lv_foreignkeys_8_0=ruleYAnnotForeignKey
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAnnotTableRule());
					}
					add(
						$current,
						"foreignkeys",
						lv_foreignkeys_8_0,
						"eu.jgen.notes.dmw.lite.Lang.YAnnotForeignKey");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getYAnnotTableAccess().getRightCurlyBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleYAnnotColumn
entryRuleYAnnotColumn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotColumnRule()); }
	iv_ruleYAnnotColumn=ruleYAnnotColumn
	{ $current=$iv_ruleYAnnotColumn.current; }
	EOF;

// Rule YAnnotColumn
ruleYAnnotColumn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYAnnotColumnAccess().getYAnnotColumnAction_0(),
					$current);
			}
		)
		otherlv_1='->'
		{
			newLeafNode(otherlv_1, grammarAccess.getYAnnotColumnAccess().getHyphenMinusGreaterThanSignKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYAnnotColumnRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getYAnnotColumnAccess().getAttrrefYAnnotAttrCrossReference_2_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='as'
		{
			newLeafNode(otherlv_3, grammarAccess.getYAnnotColumnAccess().getAsKeyword_3());
		}
		(
			(
				(
					lv_type_4_1='VARCHAR'
					{
						newLeafNode(lv_type_4_1, grammarAccess.getYAnnotColumnAccess().getTypeVARCHARKeyword_4_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYAnnotColumnRule());
						}
						setWithLastConsumed($current, "type", lv_type_4_1, null);
					}
					    |
					lv_type_4_2='CHAR'
					{
						newLeafNode(lv_type_4_2, grammarAccess.getYAnnotColumnAccess().getTypeCHARKeyword_4_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYAnnotColumnRule());
						}
						setWithLastConsumed($current, "type", lv_type_4_2, null);
					}
					    |
					lv_type_4_3='INTEGER'
					{
						newLeafNode(lv_type_4_3, grammarAccess.getYAnnotColumnAccess().getTypeINTEGERKeyword_4_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYAnnotColumnRule());
						}
						setWithLastConsumed($current, "type", lv_type_4_3, null);
					}
					    |
					lv_type_4_4='BIGINT'
					{
						newLeafNode(lv_type_4_4, grammarAccess.getYAnnotColumnAccess().getTypeBIGINTKeyword_4_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYAnnotColumnRule());
						}
						setWithLastConsumed($current, "type", lv_type_4_4, null);
					}
					    |
					lv_type_4_5='SMALLINT'
					{
						newLeafNode(lv_type_4_5, grammarAccess.getYAnnotColumnAccess().getTypeSMALLINTKeyword_4_0_4());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYAnnotColumnRule());
						}
						setWithLastConsumed($current, "type", lv_type_4_5, null);
					}
					    |
					lv_type_4_6='DECIMAL'
					{
						newLeafNode(lv_type_4_6, grammarAccess.getYAnnotColumnAccess().getTypeDECIMALKeyword_4_0_5());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYAnnotColumnRule());
						}
						setWithLastConsumed($current, "type", lv_type_4_6, null);
					}
					    |
					lv_type_4_7='TIME'
					{
						newLeafNode(lv_type_4_7, grammarAccess.getYAnnotColumnAccess().getTypeTIMEKeyword_4_0_6());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYAnnotColumnRule());
						}
						setWithLastConsumed($current, "type", lv_type_4_7, null);
					}
					    |
					lv_type_4_8='DATE'
					{
						newLeafNode(lv_type_4_8, grammarAccess.getYAnnotColumnAccess().getTypeDATEKeyword_4_0_7());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYAnnotColumnRule());
						}
						setWithLastConsumed($current, "type", lv_type_4_8, null);
					}
					    |
					lv_type_4_9='TIMESTAMP'
					{
						newLeafNode(lv_type_4_9, grammarAccess.getYAnnotColumnAccess().getTypeTIMESTAMPKeyword_4_0_8());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYAnnotColumnRule());
						}
						setWithLastConsumed($current, "type", lv_type_4_9, null);
					}
					    |
					lv_type_4_10='BOOLEAN'
					{
						newLeafNode(lv_type_4_10, grammarAccess.getYAnnotColumnAccess().getTypeBOOLEANKeyword_4_0_9());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYAnnotColumnRule());
						}
						setWithLastConsumed($current, "type", lv_type_4_10, null);
					}
				)
			)
		)
		(
			(
				lv_optional_5_0='?'
				{
					newLeafNode(lv_optional_5_0, grammarAccess.getYAnnotColumnAccess().getOptionalQuestionMarkKeyword_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYAnnotColumnRule());
					}
					setWithLastConsumed($current, "optional", lv_optional_5_0, "?");
				}
			)
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getYAnnotColumnAccess().getAnnotsYAnnotLengthParserRuleCall_6_0_0());
					}
					lv_annots_6_1=ruleYAnnotLength
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getYAnnotColumnRule());
						}
						add(
							$current,
							"annots",
							lv_annots_6_1,
							"eu.jgen.notes.dmw.lite.Lang.YAnnotLength");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getYAnnotColumnAccess().getAnnotsYAnnotDecimalParserRuleCall_6_0_1());
					}
					lv_annots_6_2=ruleYAnnotDecimal
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getYAnnotColumnRule());
						}
						add(
							$current,
							"annots",
							lv_annots_6_2,
							"eu.jgen.notes.dmw.lite.Lang.YAnnotDecimal");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_7=';'
			{
				newLeafNode(otherlv_7, grammarAccess.getYAnnotColumnAccess().getSemicolonKeyword_7());
			}
		)?
	)
;

// Entry rule entryRuleYAnnotColumnLike
entryRuleYAnnotColumnLike returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotColumnLikeRule()); }
	iv_ruleYAnnotColumnLike=ruleYAnnotColumnLike
	{ $current=$iv_ruleYAnnotColumnLike.current; }
	EOF;

// Rule YAnnotColumnLike
ruleYAnnotColumnLike returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYAnnotColumnLikeAccess().getYAnnotColumnLikeAction_0(),
					$current);
			}
		)
		otherlv_1='->'
		{
			newLeafNode(otherlv_1, grammarAccess.getYAnnotColumnLikeAccess().getHyphenMinusGreaterThanSignKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYAnnotColumnLikeRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getYAnnotColumnLikeAccess().getColumnrefYAnnotAbstractColumnCrossReference_2_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getYAnnotColumnLikeAccess().getSemicolonKeyword_3());
			}
		)?
	)
;

// Entry rule entryRuleYAnnotAbstractColumn
entryRuleYAnnotAbstractColumn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotAbstractColumnRule()); }
	iv_ruleYAnnotAbstractColumn=ruleYAnnotAbstractColumn
	{ $current=$iv_ruleYAnnotAbstractColumn.current; }
	EOF;

// Rule YAnnotAbstractColumn
ruleYAnnotAbstractColumn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYAnnotAbstractColumnAccess().getYAnnotAbstractColumnAction_0(),
					$current);
			}
		)
		otherlv_1='@column'
		{
			newLeafNode(otherlv_1, grammarAccess.getYAnnotAbstractColumnAccess().getColumnKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYAnnotAbstractColumnAccess().getNameValidIDParserRuleCall_2_0());
				}
				lv_name_2_0=ruleValidID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAnnotAbstractColumnRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"eu.jgen.notes.dmw.lite.Lang.ValidID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getYAnnotAbstractColumnAccess().getTypeYAnnotColumnParserRuleCall_3_0_0());
					}
					lv_type_3_1=ruleYAnnotColumn
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getYAnnotAbstractColumnRule());
						}
						set(
							$current,
							"type",
							lv_type_3_1,
							"eu.jgen.notes.dmw.lite.Lang.YAnnotColumn");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getYAnnotAbstractColumnAccess().getTypeYAnnotColumnLikeParserRuleCall_3_0_1());
					}
					lv_type_3_2=ruleYAnnotColumnLike
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getYAnnotAbstractColumnRule());
						}
						set(
							$current,
							"type",
							lv_type_3_2,
							"eu.jgen.notes.dmw.lite.Lang.YAnnotColumnLike");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleYAnnotPrimaryKey
entryRuleYAnnotPrimaryKey returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotPrimaryKeyRule()); }
	iv_ruleYAnnotPrimaryKey=ruleYAnnotPrimaryKey
	{ $current=$iv_ruleYAnnotPrimaryKey.current; }
	EOF;

// Rule YAnnotPrimaryKey
ruleYAnnotPrimaryKey returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYAnnotPrimaryKeyAccess().getYAnnotPrimaryKeyAction_0(),
					$current);
			}
		)
		otherlv_1='@primary'
		{
			newLeafNode(otherlv_1, grammarAccess.getYAnnotPrimaryKeyAccess().getPrimaryKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getYAnnotPrimaryKeyAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYAnnotPrimaryKeyRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getYAnnotPrimaryKeyAccess().getColumnsYAnnotAbstractColumnCrossReference_3_0());
				}
			)
		)*
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getYAnnotPrimaryKeyAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYAnnotPrimaryKeyRule());
						}
					}
					otherlv_5=RULE_ID
					{
						newLeafNode(otherlv_5, grammarAccess.getYAnnotPrimaryKeyAccess().getColumnsYAnnotAbstractColumnCrossReference_4_1_0());
					}
				)
			)
		)*
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getYAnnotPrimaryKeyAccess().getRightParenthesisKeyword_5());
		}
		(
			otherlv_7=';'
			{
				newLeafNode(otherlv_7, grammarAccess.getYAnnotPrimaryKeyAccess().getSemicolonKeyword_6());
			}
		)?
	)
;

// Entry rule entryRuleYAnnotForeignKey
entryRuleYAnnotForeignKey returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotForeignKeyRule()); }
	iv_ruleYAnnotForeignKey=ruleYAnnotForeignKey
	{ $current=$iv_ruleYAnnotForeignKey.current; }
	EOF;

// Rule YAnnotForeignKey
ruleYAnnotForeignKey returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYAnnotForeignKeyAccess().getYAnnotForeignKeyAction_0(),
					$current);
			}
		)
		otherlv_1='@foreign'
		{
			newLeafNode(otherlv_1, grammarAccess.getYAnnotForeignKeyAccess().getForeignKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYAnnotForeignKeyRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getYAnnotForeignKeyAccess().getRelationshipYAnnotRelCrossReference_2_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getYAnnotForeignKeyAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYAnnotForeignKeyAccess().getColumnsYAnnotAbstractColumnParserRuleCall_4_0());
				}
				lv_columns_4_0=ruleYAnnotAbstractColumn
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAnnotForeignKeyRule());
					}
					add(
						$current,
						"columns",
						lv_columns_4_0,
						"eu.jgen.notes.dmw.lite.Lang.YAnnotAbstractColumn");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getYAnnotForeignKeyAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getYAnnotForeignKeyAccess().getColumnsYAnnotAbstractColumnParserRuleCall_5_1_0());
					}
					lv_columns_6_0=ruleYAnnotAbstractColumn
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getYAnnotForeignKeyRule());
						}
						add(
							$current,
							"columns",
							lv_columns_6_0,
							"eu.jgen.notes.dmw.lite.Lang.YAnnotAbstractColumn");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getYAnnotForeignKeyAccess().getRightCurlyBracketKeyword_6());
		}
		(
			otherlv_8=';'
			{
				newLeafNode(otherlv_8, grammarAccess.getYAnnotForeignKeyAccess().getSemicolonKeyword_7());
			}
		)?
	)
;

// Entry rule entryRuleYAnnotJava
entryRuleYAnnotJava returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotJavaRule()); }
	iv_ruleYAnnotJava=ruleYAnnotJava
	{ $current=$iv_ruleYAnnotJava.current; }
	EOF;

// Rule YAnnotJava
ruleYAnnotJava returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYAnnotJavaAccess().getYAnnotJavaAction_0(),
					$current);
			}
		)
		otherlv_1='@java'
		{
			newLeafNode(otherlv_1, grammarAccess.getYAnnotJavaAccess().getJavaKeyword_1());
		}
		(
			otherlv_2='uses'
			{
				newLeafNode(otherlv_2, grammarAccess.getYAnnotJavaAccess().getUsesKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYAnnotJavaRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getYAnnotJavaAccess().getDatabaseYAnnotDatabaseCrossReference_2_1_0());
					}
				)
			)
		)?
		(
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getYAnnotJavaAccess().getSemicolonKeyword_3());
			}
		)?
	)
;

// Entry rule entryRuleYAnnotSwift
entryRuleYAnnotSwift returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotSwiftRule()); }
	iv_ruleYAnnotSwift=ruleYAnnotSwift
	{ $current=$iv_ruleYAnnotSwift.current; }
	EOF;

// Rule YAnnotSwift
ruleYAnnotSwift returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYAnnotSwiftAccess().getYAnnotSwiftAction_0(),
					$current);
			}
		)
		otherlv_1='@swift'
		{
			newLeafNode(otherlv_1, grammarAccess.getYAnnotSwiftAccess().getSwiftKeyword_1());
		}
		otherlv_2='module'
		{
			newLeafNode(otherlv_2, grammarAccess.getYAnnotSwiftAccess().getModuleKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYAnnotSwiftAccess().getNameValidIDParserRuleCall_3_0());
				}
				lv_name_3_0=ruleValidID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAnnotSwiftRule());
					}
					set(
						$current,
						"name",
						lv_name_3_0,
						"eu.jgen.notes.dmw.lite.Lang.ValidID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='uses'
			{
				newLeafNode(otherlv_4, grammarAccess.getYAnnotSwiftAccess().getUsesKeyword_4_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getYAnnotSwiftRule());
						}
					}
					otherlv_5=RULE_ID
					{
						newLeafNode(otherlv_5, grammarAccess.getYAnnotSwiftAccess().getDatabaseYAnnotDatabaseCrossReference_4_1_0());
					}
				)
			)
		)?
		(
			otherlv_6=';'
			{
				newLeafNode(otherlv_6, grammarAccess.getYAnnotSwiftAccess().getSemicolonKeyword_5());
			}
		)?
	)
;

// Entry rule entryRuleYAnnotDatabase
entryRuleYAnnotDatabase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYAnnotDatabaseRule()); }
	iv_ruleYAnnotDatabase=ruleYAnnotDatabase
	{ $current=$iv_ruleYAnnotDatabase.current; }
	EOF;

// Rule YAnnotDatabase
ruleYAnnotDatabase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYAnnotDatabaseAccess().getYAnnotDatabaseAction_0(),
					$current);
			}
		)
		otherlv_1='@database'
		{
			newLeafNode(otherlv_1, grammarAccess.getYAnnotDatabaseAccess().getDatabaseKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYAnnotDatabaseAccess().getNameValidIDParserRuleCall_2_0());
				}
				lv_name_2_0=ruleValidID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYAnnotDatabaseRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"eu.jgen.notes.dmw.lite.Lang.ValidID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getYAnnotDatabaseAccess().getSemicolonKeyword_3());
			}
		)?
	)
;

// Rule YAccessLevel
ruleYAccessLevel returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='private'
			{
				$current = grammarAccess.getYAccessLevelAccess().getPRIVATEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getYAccessLevelAccess().getPRIVATEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='protected'
			{
				$current = grammarAccess.getYAccessLevelAccess().getPROTECTEDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getYAccessLevelAccess().getPROTECTEDEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='public'
			{
				$current = grammarAccess.getYAccessLevelAccess().getPUBLICEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getYAccessLevelAccess().getPUBLICEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
