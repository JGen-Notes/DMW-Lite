/*
 * generated by Xtext 2.15.0
 */
package eu.jgen.notes.dmw.lite.serializer;

import com.google.inject.Inject;
import eu.jgen.notes.dmw.lite.lang.DBBinaryOperation;
import eu.jgen.notes.dmw.lite.lang.DBExpression;
import eu.jgen.notes.dmw.lite.lang.LangPackage;
import eu.jgen.notes.dmw.lite.lang.YAnnot;
import eu.jgen.notes.dmw.lite.lang.YAnnotAbstractColumn;
import eu.jgen.notes.dmw.lite.lang.YAnnotAction;
import eu.jgen.notes.dmw.lite.lang.YAnnotAttr;
import eu.jgen.notes.dmw.lite.lang.YAnnotColumn;
import eu.jgen.notes.dmw.lite.lang.YAnnotColumnLike;
import eu.jgen.notes.dmw.lite.lang.YAnnotDatabase;
import eu.jgen.notes.dmw.lite.lang.YAnnotDecimal;
import eu.jgen.notes.dmw.lite.lang.YAnnotDefault;
import eu.jgen.notes.dmw.lite.lang.YAnnotDefaultNumber;
import eu.jgen.notes.dmw.lite.lang.YAnnotDefaultText;
import eu.jgen.notes.dmw.lite.lang.YAnnotEntity;
import eu.jgen.notes.dmw.lite.lang.YAnnotForeignKey;
import eu.jgen.notes.dmw.lite.lang.YAnnotId;
import eu.jgen.notes.dmw.lite.lang.YAnnotJava;
import eu.jgen.notes.dmw.lite.lang.YAnnotLength;
import eu.jgen.notes.dmw.lite.lang.YAnnotMax;
import eu.jgen.notes.dmw.lite.lang.YAnnotMessage;
import eu.jgen.notes.dmw.lite.lang.YAnnotPrimaryKey;
import eu.jgen.notes.dmw.lite.lang.YAnnotRel;
import eu.jgen.notes.dmw.lite.lang.YAnnotSwift;
import eu.jgen.notes.dmw.lite.lang.YAnnotTable;
import eu.jgen.notes.dmw.lite.lang.YAnnotTechnicalDesign;
import eu.jgen.notes.dmw.lite.lang.YAnnotTop;
import eu.jgen.notes.dmw.lite.lang.YAssociateStatement;
import eu.jgen.notes.dmw.lite.lang.YClass;
import eu.jgen.notes.dmw.lite.lang.YCreateStatement;
import eu.jgen.notes.dmw.lite.lang.YDeleteStatement;
import eu.jgen.notes.dmw.lite.lang.YFunction;
import eu.jgen.notes.dmw.lite.lang.YJoin;
import eu.jgen.notes.dmw.lite.lang.YJoinDef;
import eu.jgen.notes.dmw.lite.lang.YPackageDeclaration;
import eu.jgen.notes.dmw.lite.lang.YProperty;
import eu.jgen.notes.dmw.lite.lang.YReadEachStatement;
import eu.jgen.notes.dmw.lite.lang.YReadStatement;
import eu.jgen.notes.dmw.lite.lang.YStructRefPair;
import eu.jgen.notes.dmw.lite.lang.YTuples;
import eu.jgen.notes.dmw.lite.lang.YUpdateStatement;
import eu.jgen.notes.dmw.lite.lang.YWhere;
import eu.jgen.notes.dmw.lite.lang.YWidget;
import eu.jgen.notes.dmw.lite.services.LangGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericArrayTypeReference;
import org.eclipse.xtext.common.types.JvmInnerTypeReference;
import org.eclipse.xtext.common.types.JvmLowerBound;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmTypeParameter;
import org.eclipse.xtext.common.types.JvmUpperBound;
import org.eclipse.xtext.common.types.JvmWildcardTypeReference;
import org.eclipse.xtext.common.types.TypesPackage;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.eclipse.xtext.xbase.XAssignment;
import org.eclipse.xtext.xbase.XBasicForLoopExpression;
import org.eclipse.xtext.xbase.XBinaryOperation;
import org.eclipse.xtext.xbase.XBlockExpression;
import org.eclipse.xtext.xbase.XBooleanLiteral;
import org.eclipse.xtext.xbase.XCasePart;
import org.eclipse.xtext.xbase.XCastedExpression;
import org.eclipse.xtext.xbase.XCatchClause;
import org.eclipse.xtext.xbase.XClosure;
import org.eclipse.xtext.xbase.XConstructorCall;
import org.eclipse.xtext.xbase.XDoWhileExpression;
import org.eclipse.xtext.xbase.XFeatureCall;
import org.eclipse.xtext.xbase.XForLoopExpression;
import org.eclipse.xtext.xbase.XIfExpression;
import org.eclipse.xtext.xbase.XInstanceOfExpression;
import org.eclipse.xtext.xbase.XListLiteral;
import org.eclipse.xtext.xbase.XMemberFeatureCall;
import org.eclipse.xtext.xbase.XNullLiteral;
import org.eclipse.xtext.xbase.XNumberLiteral;
import org.eclipse.xtext.xbase.XPostfixOperation;
import org.eclipse.xtext.xbase.XReturnExpression;
import org.eclipse.xtext.xbase.XSetLiteral;
import org.eclipse.xtext.xbase.XStringLiteral;
import org.eclipse.xtext.xbase.XSwitchExpression;
import org.eclipse.xtext.xbase.XSynchronizedExpression;
import org.eclipse.xtext.xbase.XThrowExpression;
import org.eclipse.xtext.xbase.XTryCatchFinallyExpression;
import org.eclipse.xtext.xbase.XTypeLiteral;
import org.eclipse.xtext.xbase.XUnaryOperation;
import org.eclipse.xtext.xbase.XVariableDeclaration;
import org.eclipse.xtext.xbase.XWhileExpression;
import org.eclipse.xtext.xbase.XbasePackage;
import org.eclipse.xtext.xbase.serializer.XbaseSemanticSequencer;
import org.eclipse.xtext.xtype.XFunctionTypeRef;
import org.eclipse.xtext.xtype.XImportDeclaration;
import org.eclipse.xtext.xtype.XImportSection;
import org.eclipse.xtext.xtype.XtypePackage;

@SuppressWarnings("all")
public class LangSemanticSequencer extends XbaseSemanticSequencer {

	@Inject
	private LangGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == LangPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case LangPackage.DB_BINARY_OPERATION:
				if (rule == grammarAccess.getDBAndExpressionRule()
						|| action == grammarAccess.getDBAndExpressionAccess().getDBBinaryOperationLeftOperandAction_1_0_0_0()) {
					sequence_DBAndExpression_DBEqualityExpression(context, (DBBinaryOperation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDBExpressionRule()
						|| rule == grammarAccess.getDBOrExpressionRule()
						|| action == grammarAccess.getDBOrExpressionAccess().getDBBinaryOperationLeftOperandAction_1_0_0_0()) {
					sequence_DBAndExpression_DBEqualityExpression_DBOrExpression(context, (DBBinaryOperation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDBEqualityExpressionRule()
						|| action == grammarAccess.getDBEqualityExpressionAccess().getDBBinaryOperationLeftOperandAction_1_0_0_0()) {
					sequence_DBEqualityExpression(context, (DBBinaryOperation) semanticObject); 
					return; 
				}
				else break;
			case LangPackage.DB_EXPRESSION:
				sequence_DBRelationalExpression(context, (DBExpression) semanticObject); 
				return; 
			case LangPackage.YANNOT:
				if (rule == grammarAccess.getYAnnotMsgTypeRule()) {
					sequence_YAnnotMsgType(context, (YAnnot) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getYAnnotRule()) {
					sequence_YAnnot(context, (YAnnot) semanticObject); 
					return; 
				}
				else break;
			case LangPackage.YANNOT_ABSTRACT_COLUMN:
				sequence_YAnnotAbstractColumn(context, (YAnnotAbstractColumn) semanticObject); 
				return; 
			case LangPackage.YANNOT_ACTION:
				sequence_YAnnotAction(context, (YAnnotAction) semanticObject); 
				return; 
			case LangPackage.YANNOT_ATTR:
				sequence_YAnnotAttr(context, (YAnnotAttr) semanticObject); 
				return; 
			case LangPackage.YANNOT_COLUMN:
				sequence_YAnnotColumn(context, (YAnnotColumn) semanticObject); 
				return; 
			case LangPackage.YANNOT_COLUMN_LIKE:
				sequence_YAnnotColumnLike(context, (YAnnotColumnLike) semanticObject); 
				return; 
			case LangPackage.YANNOT_DATABASE:
				sequence_YAnnotDatabase(context, (YAnnotDatabase) semanticObject); 
				return; 
			case LangPackage.YANNOT_DECIMAL:
				sequence_YAnnotDecimal(context, (YAnnotDecimal) semanticObject); 
				return; 
			case LangPackage.YANNOT_DEFAULT:
				sequence_YAnnotDefault(context, (YAnnotDefault) semanticObject); 
				return; 
			case LangPackage.YANNOT_DEFAULT_NUMBER:
				sequence_YAnnotDefaultNumber(context, (YAnnotDefaultNumber) semanticObject); 
				return; 
			case LangPackage.YANNOT_DEFAULT_TEXT:
				sequence_YAnnotDefaultText(context, (YAnnotDefaultText) semanticObject); 
				return; 
			case LangPackage.YANNOT_ENTITY:
				sequence_YAnnotEntity(context, (YAnnotEntity) semanticObject); 
				return; 
			case LangPackage.YANNOT_FOREIGN_KEY:
				sequence_YAnnotForeignKey(context, (YAnnotForeignKey) semanticObject); 
				return; 
			case LangPackage.YANNOT_ID:
				sequence_YAnnotId(context, (YAnnotId) semanticObject); 
				return; 
			case LangPackage.YANNOT_JAVA:
				sequence_YAnnotJava(context, (YAnnotJava) semanticObject); 
				return; 
			case LangPackage.YANNOT_LENGTH:
				sequence_YAnnotLength(context, (YAnnotLength) semanticObject); 
				return; 
			case LangPackage.YANNOT_MAX:
				sequence_YAnnotMax(context, (YAnnotMax) semanticObject); 
				return; 
			case LangPackage.YANNOT_MESSAGE:
				sequence_YAnnotMessage(context, (YAnnotMessage) semanticObject); 
				return; 
			case LangPackage.YANNOT_PRIMARY_KEY:
				sequence_YAnnotPrimaryKey(context, (YAnnotPrimaryKey) semanticObject); 
				return; 
			case LangPackage.YANNOT_REL:
				sequence_YAnnotRel(context, (YAnnotRel) semanticObject); 
				return; 
			case LangPackage.YANNOT_SWIFT:
				sequence_YAnnotSwift(context, (YAnnotSwift) semanticObject); 
				return; 
			case LangPackage.YANNOT_TABLE:
				sequence_YAnnotTable(context, (YAnnotTable) semanticObject); 
				return; 
			case LangPackage.YANNOT_TECHNICAL_DESIGN:
				sequence_YAnnotTechnicalDesign(context, (YAnnotTechnicalDesign) semanticObject); 
				return; 
			case LangPackage.YANNOT_TOP:
				sequence_YAnnotTop(context, (YAnnotTop) semanticObject); 
				return; 
			case LangPackage.YASSOCIATE_STATEMENT:
				sequence_YAssociateStatement(context, (YAssociateStatement) semanticObject); 
				return; 
			case LangPackage.YCLASS:
				sequence_YClass(context, (YClass) semanticObject); 
				return; 
			case LangPackage.YCREATE_STATEMENT:
				sequence_YCreateStatement(context, (YCreateStatement) semanticObject); 
				return; 
			case LangPackage.YDELETE_STATEMENT:
				sequence_YDeleteStatement(context, (YDeleteStatement) semanticObject); 
				return; 
			case LangPackage.YFUNCTION:
				sequence_YFunction(context, (YFunction) semanticObject); 
				return; 
			case LangPackage.YJOIN:
				sequence_YJoin(context, (YJoin) semanticObject); 
				return; 
			case LangPackage.YJOIN_DEF:
				sequence_YJoinDef(context, (YJoinDef) semanticObject); 
				return; 
			case LangPackage.YPACKAGE_DECLARATION:
				sequence_YPackageDeclaration(context, (YPackageDeclaration) semanticObject); 
				return; 
			case LangPackage.YPROPERTY:
				sequence_YProperty(context, (YProperty) semanticObject); 
				return; 
			case LangPackage.YREAD_EACH_STATEMENT:
				sequence_YReadEachStatement(context, (YReadEachStatement) semanticObject); 
				return; 
			case LangPackage.YREAD_STATEMENT:
				sequence_YReadStatement(context, (YReadStatement) semanticObject); 
				return; 
			case LangPackage.YSTRUCT_REF_PAIR:
				sequence_YStructRefPair(context, (YStructRefPair) semanticObject); 
				return; 
			case LangPackage.YTUPLES:
				sequence_YTuples(context, (YTuples) semanticObject); 
				return; 
			case LangPackage.YUPDATE_STATEMENT:
				sequence_YUpdateStatement(context, (YUpdateStatement) semanticObject); 
				return; 
			case LangPackage.YWHERE:
				sequence_YWhere(context, (YWhere) semanticObject); 
				return; 
			case LangPackage.YWIDGET:
				sequence_YWidget(context, (YWidget) semanticObject); 
				return; 
			}
		else if (epackage == TypesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TypesPackage.JVM_FORMAL_PARAMETER:
				if (rule == grammarAccess.getFullJvmFormalParameterRule()) {
					sequence_FullJvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmFormalParameterRule()) {
					sequence_JvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_GENERIC_ARRAY_TYPE_REFERENCE:
				sequence_JvmTypeReference(context, (JvmGenericArrayTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_INNER_TYPE_REFERENCE:
				sequence_JvmParameterizedTypeReference(context, (JvmInnerTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_LOWER_BOUND:
				if (rule == grammarAccess.getJvmLowerBoundAndedRule()) {
					sequence_JvmLowerBoundAnded(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmLowerBoundRule()) {
					sequence_JvmLowerBound(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_PARAMETERIZED_TYPE_REFERENCE:
				if (action == grammarAccess.getJvmParameterizedTypeReferenceAccess().getJvmInnerTypeReferenceOuterAction_1_4_0_0_0()) {
					sequence_JvmParameterizedTypeReference_JvmInnerTypeReference_1_4_0_0_0(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmTypeReferenceRule()
						|| action == grammarAccess.getJvmTypeReferenceAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0()
						|| rule == grammarAccess.getJvmParameterizedTypeReferenceRule()
						|| rule == grammarAccess.getJvmArgumentTypeReferenceRule()) {
					sequence_JvmParameterizedTypeReference(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_TYPE_PARAMETER:
				sequence_JvmTypeParameter(context, (JvmTypeParameter) semanticObject); 
				return; 
			case TypesPackage.JVM_UPPER_BOUND:
				if (rule == grammarAccess.getJvmUpperBoundAndedRule()) {
					sequence_JvmUpperBoundAnded(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmUpperBoundRule()) {
					sequence_JvmUpperBound(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_WILDCARD_TYPE_REFERENCE:
				sequence_JvmWildcardTypeReference(context, (JvmWildcardTypeReference) semanticObject); 
				return; 
			}
		else if (epackage == XbasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XbasePackage.XASSIGNMENT:
				sequence_XAssignment_XMemberFeatureCall(context, (XAssignment) semanticObject); 
				return; 
			case XbasePackage.XBASIC_FOR_LOOP_EXPRESSION:
				sequence_XBasicForLoopExpression(context, (XBasicForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XBINARY_OPERATION:
				sequence_XAdditiveExpression_XAndExpression_XAssignment_XEqualityExpression_XMultiplicativeExpression_XOrExpression_XOtherOperatorExpression_XRelationalExpression(context, (XBinaryOperation) semanticObject); 
				return; 
			case XbasePackage.XBLOCK_EXPRESSION:
				if (rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXbaseXPrimaryExpressionRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXBlockExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XBlockExpression(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXExpressionInClosureRule()) {
					sequence_XExpressionInClosure(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XBOOLEAN_LITERAL:
				sequence_XBooleanLiteral(context, (XBooleanLiteral) semanticObject); 
				return; 
			case XbasePackage.XCASE_PART:
				sequence_XCasePart(context, (XCasePart) semanticObject); 
				return; 
			case XbasePackage.XCASTED_EXPRESSION:
				sequence_XCastedExpression(context, (XCastedExpression) semanticObject); 
				return; 
			case XbasePackage.XCATCH_CLAUSE:
				sequence_XCatchClause(context, (XCatchClause) semanticObject); 
				return; 
			case XbasePackage.XCLOSURE:
				if (rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXbaseXPrimaryExpressionRule()
						|| rule == grammarAccess.getXLiteralRule()
						|| rule == grammarAccess.getXClosureRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXShortClosureRule()) {
					sequence_XShortClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XCONSTRUCTOR_CALL:
				sequence_XConstructorCall(context, (XConstructorCall) semanticObject); 
				return; 
			case XbasePackage.XDO_WHILE_EXPRESSION:
				sequence_XDoWhileExpression(context, (XDoWhileExpression) semanticObject); 
				return; 
			case XbasePackage.XFEATURE_CALL:
				sequence_XFeatureCall(context, (XFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XFOR_LOOP_EXPRESSION:
				sequence_XForLoopExpression(context, (XForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XIF_EXPRESSION:
				sequence_XIfExpression(context, (XIfExpression) semanticObject); 
				return; 
			case XbasePackage.XINSTANCE_OF_EXPRESSION:
				sequence_XRelationalExpression(context, (XInstanceOfExpression) semanticObject); 
				return; 
			case XbasePackage.XLIST_LITERAL:
				sequence_XListLiteral(context, (XListLiteral) semanticObject); 
				return; 
			case XbasePackage.XMEMBER_FEATURE_CALL:
				sequence_XMemberFeatureCall(context, (XMemberFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XNULL_LITERAL:
				sequence_XNullLiteral(context, (XNullLiteral) semanticObject); 
				return; 
			case XbasePackage.XNUMBER_LITERAL:
				sequence_XNumberLiteral(context, (XNumberLiteral) semanticObject); 
				return; 
			case XbasePackage.XPOSTFIX_OPERATION:
				sequence_XPostfixOperation(context, (XPostfixOperation) semanticObject); 
				return; 
			case XbasePackage.XRETURN_EXPRESSION:
				sequence_XReturnExpression(context, (XReturnExpression) semanticObject); 
				return; 
			case XbasePackage.XSET_LITERAL:
				sequence_XSetLiteral(context, (XSetLiteral) semanticObject); 
				return; 
			case XbasePackage.XSTRING_LITERAL:
				sequence_XStringLiteral(context, (XStringLiteral) semanticObject); 
				return; 
			case XbasePackage.XSWITCH_EXPRESSION:
				sequence_XSwitchExpression(context, (XSwitchExpression) semanticObject); 
				return; 
			case XbasePackage.XSYNCHRONIZED_EXPRESSION:
				sequence_XSynchronizedExpression(context, (XSynchronizedExpression) semanticObject); 
				return; 
			case XbasePackage.XTHROW_EXPRESSION:
				sequence_XThrowExpression(context, (XThrowExpression) semanticObject); 
				return; 
			case XbasePackage.XTRY_CATCH_FINALLY_EXPRESSION:
				sequence_XTryCatchFinallyExpression(context, (XTryCatchFinallyExpression) semanticObject); 
				return; 
			case XbasePackage.XTYPE_LITERAL:
				sequence_XTypeLiteral(context, (XTypeLiteral) semanticObject); 
				return; 
			case XbasePackage.XUNARY_OPERATION:
				sequence_XUnaryOperation(context, (XUnaryOperation) semanticObject); 
				return; 
			case XbasePackage.XVARIABLE_DECLARATION:
				sequence_XVariableDeclaration(context, (XVariableDeclaration) semanticObject); 
				return; 
			case XbasePackage.XWHILE_EXPRESSION:
				sequence_XWhileExpression(context, (XWhileExpression) semanticObject); 
				return; 
			}
		else if (epackage == XtypePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XtypePackage.XFUNCTION_TYPE_REF:
				sequence_XFunctionTypeRef(context, (XFunctionTypeRef) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_DECLARATION:
				sequence_XImportDeclaration(context, (XImportDeclaration) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_SECTION:
				sequence_XImportSection(context, (XImportSection) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     DBAndExpression returns DBBinaryOperation
	 *     DBAndExpression.DBBinaryOperation_1_0_0_0 returns DBBinaryOperation
	 *
	 * Constraint:
	 *     (
	 *         (leftOperand=DBAndExpression_DBBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpAnd] rightOperand=DBEqualityExpression) | 
	 *         (leftOperand=DBEqualityExpression_DBBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpEquality] rightOperand=DBRelationalExpression)
	 *     )
	 */
	protected void sequence_DBAndExpression_DBEqualityExpression(ISerializationContext context, DBBinaryOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DBExpression returns DBBinaryOperation
	 *     DBOrExpression returns DBBinaryOperation
	 *     DBOrExpression.DBBinaryOperation_1_0_0_0 returns DBBinaryOperation
	 *
	 * Constraint:
	 *     (
	 *         (leftOperand=DBOrExpression_DBBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpOr] rightOperand=DBAndExpression) | 
	 *         (leftOperand=DBAndExpression_DBBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpAnd] rightOperand=DBEqualityExpression) | 
	 *         (leftOperand=DBEqualityExpression_DBBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpEquality] rightOperand=DBRelationalExpression)
	 *     )
	 */
	protected void sequence_DBAndExpression_DBEqualityExpression_DBOrExpression(ISerializationContext context, DBBinaryOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DBEqualityExpression returns DBBinaryOperation
	 *     DBEqualityExpression.DBBinaryOperation_1_0_0_0 returns DBBinaryOperation
	 *
	 * Constraint:
	 *     (leftOperand=DBEqualityExpression_DBBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpEquality] rightOperand=DBRelationalExpression)
	 */
	protected void sequence_DBEqualityExpression(ISerializationContext context, DBBinaryOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LangPackage.Literals.DB_EXPRESSION__LEFT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LangPackage.Literals.DB_EXPRESSION__LEFT_OPERAND));
			if (transientValues.isValueTransient(semanticObject, LangPackage.Literals.DB_BINARY_OPERATION__FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LangPackage.Literals.DB_BINARY_OPERATION__FEATURE));
			if (transientValues.isValueTransient(semanticObject, LangPackage.Literals.DB_EXPRESSION__RIGHT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LangPackage.Literals.DB_EXPRESSION__RIGHT_OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDBEqualityExpressionAccess().getDBBinaryOperationLeftOperandAction_1_0_0_0(), semanticObject.eGet(LangPackage.Literals.DB_EXPRESSION__LEFT_OPERAND, false));
		feeder.accept(grammarAccess.getDBEqualityExpressionAccess().getFeatureJvmIdentifiableElementOpEqualityParserRuleCall_1_0_0_1_0_1(), semanticObject.eGet(LangPackage.Literals.DB_BINARY_OPERATION__FEATURE, false));
		feeder.accept(grammarAccess.getDBEqualityExpressionAccess().getRightOperandDBRelationalExpressionParserRuleCall_1_1_0(), semanticObject.eGet(LangPackage.Literals.DB_EXPRESSION__RIGHT_OPERAND, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DBExpression returns DBExpression
	 *     DBOrExpression returns DBExpression
	 *     DBOrExpression.DBBinaryOperation_1_0_0_0 returns DBExpression
	 *     DBAndExpression returns DBExpression
	 *     DBAndExpression.DBBinaryOperation_1_0_0_0 returns DBExpression
	 *     DBEqualityExpression returns DBExpression
	 *     DBEqualityExpression.DBBinaryOperation_1_0_0_0 returns DBExpression
	 *     DBRelationalExpression returns DBExpression
	 *
	 * Constraint:
	 *     (leftOperand=[JvmIdentifiableElement|OpCompare] rightOperand=[JvmIdentifiableElement|OpCompare])
	 */
	protected void sequence_DBRelationalExpression(ISerializationContext context, DBExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LangPackage.Literals.DB_EXPRESSION__LEFT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LangPackage.Literals.DB_EXPRESSION__LEFT_OPERAND));
			if (transientValues.isValueTransient(semanticObject, LangPackage.Literals.DB_EXPRESSION__RIGHT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LangPackage.Literals.DB_EXPRESSION__RIGHT_OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDBRelationalExpressionAccess().getLeftOperandJvmIdentifiableElementOpCompareParserRuleCall_0_0_1(), semanticObject.eGet(LangPackage.Literals.DB_EXPRESSION__LEFT_OPERAND, false));
		feeder.accept(grammarAccess.getDBRelationalExpressionAccess().getRightOperandJvmIdentifiableElementOpCompareParserRuleCall_1_0_1(), semanticObject.eGet(LangPackage.Literals.DB_EXPRESSION__RIGHT_OPERAND, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotAbstractColumn returns YAnnotAbstractColumn
	 *
	 * Constraint:
	 *     (name=ValidID (type=YAnnotColumn | type=YAnnotColumnLike))
	 */
	protected void sequence_YAnnotAbstractColumn(ISerializationContext context, YAnnotAbstractColumn semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotAction returns YAnnotAction
	 *
	 * Constraint:
	 *     action=ValidID
	 */
	protected void sequence_YAnnotAction(ISerializationContext context, YAnnotAction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LangPackage.Literals.YANNOT_ACTION__ACTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LangPackage.Literals.YANNOT_ACTION__ACTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getYAnnotActionAccess().getActionValidIDParserRuleCall_3_0(), semanticObject.getAction());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotEntityInner returns YAnnotAttr
	 *     YAnnotAttr returns YAnnotAttr
	 *     YAnnotIdInner returns YAnnotAttr
	 *
	 * Constraint:
	 *     (name=ValidID yclass=JvmTypeReference optional='?'? annots+=YAnnot*)
	 */
	protected void sequence_YAnnotAttr(ISerializationContext context, YAnnotAttr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotColumnLike returns YAnnotColumnLike
	 *
	 * Constraint:
	 *     columnref=[YAnnotAbstractColumn|QualifiedName]
	 */
	protected void sequence_YAnnotColumnLike(ISerializationContext context, YAnnotColumnLike semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LangPackage.Literals.YANNOT_COLUMN_LIKE__COLUMNREF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LangPackage.Literals.YANNOT_COLUMN_LIKE__COLUMNREF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getYAnnotColumnLikeAccess().getColumnrefYAnnotAbstractColumnQualifiedNameParserRuleCall_2_0_1(), semanticObject.eGet(LangPackage.Literals.YANNOT_COLUMN_LIKE__COLUMNREF, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotColumn returns YAnnotColumn
	 *
	 * Constraint:
	 *     (
	 *         attrref=[YAnnotAttr|QualifiedName] 
	 *         (
	 *             type='VARCHAR' | 
	 *             type='CHAR' | 
	 *             type='INTEGER' | 
	 *             type='BIGINT' | 
	 *             type='SMALLINT' | 
	 *             type='DECIMAL' | 
	 *             type='TIME' | 
	 *             type='DATE' | 
	 *             type='TIMESTAMP' | 
	 *             type='BOOLEAN'
	 *         ) 
	 *         optional='?'? 
	 *         annots+=YAnnotLength? 
	 *         (annots+=YAnnotDecimal? annots+=YAnnotLength?)*
	 *     )
	 */
	protected void sequence_YAnnotColumn(ISerializationContext context, YAnnotColumn semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotDatabase returns YAnnotDatabase
	 *
	 * Constraint:
	 *     name=ValidID
	 */
	protected void sequence_YAnnotDatabase(ISerializationContext context, YAnnotDatabase semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LangPackage.Literals.YANNOT_DATABASE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LangPackage.Literals.YANNOT_DATABASE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getYAnnotDatabaseAccess().getNameValidIDParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotDecimal returns YAnnotDecimal
	 *
	 * Constraint:
	 *     (length=INT decimal=INT)
	 */
	protected void sequence_YAnnotDecimal(ISerializationContext context, YAnnotDecimal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LangPackage.Literals.YANNOT_DECIMAL__LENGTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LangPackage.Literals.YANNOT_DECIMAL__LENGTH));
			if (transientValues.isValueTransient(semanticObject, LangPackage.Literals.YANNOT_DECIMAL__DECIMAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LangPackage.Literals.YANNOT_DECIMAL__DECIMAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getYAnnotDecimalAccess().getLengthINTTerminalRuleCall_3_0(), semanticObject.getLength());
		feeder.accept(grammarAccess.getYAnnotDecimalAccess().getDecimalINTTerminalRuleCall_5_0(), semanticObject.getDecimal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotDefaultType returns YAnnotDefaultNumber
	 *     YAnnotDefaultNumber returns YAnnotDefaultNumber
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_YAnnotDefaultNumber(ISerializationContext context, YAnnotDefaultNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LangPackage.Literals.YANNOT_DEFAULT_NUMBER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LangPackage.Literals.YANNOT_DEFAULT_NUMBER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getYAnnotDefaultNumberAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotDefaultType returns YAnnotDefaultText
	 *     YAnnotDefaultText returns YAnnotDefaultText
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_YAnnotDefaultText(ISerializationContext context, YAnnotDefaultText semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LangPackage.Literals.YANNOT_DEFAULT_TEXT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LangPackage.Literals.YANNOT_DEFAULT_TEXT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getYAnnotDefaultTextAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotDefault returns YAnnotDefault
	 *
	 * Constraint:
	 *     type=YAnnotDefaultType
	 */
	protected void sequence_YAnnotDefault(ISerializationContext context, YAnnotDefault semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LangPackage.Literals.YANNOT__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LangPackage.Literals.YANNOT__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getYAnnotDefaultAccess().getTypeYAnnotDefaultTypeParserRuleCall_3_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotEntity returns YAnnotEntity
	 *
	 * Constraint:
	 *     (name=ValidID superannot=[YAnnotEntity|QualifiedName]? annots+=YAnnotEntityInner*)
	 */
	protected void sequence_YAnnotEntity(ISerializationContext context, YAnnotEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotForeignKey returns YAnnotForeignKey
	 *
	 * Constraint:
	 *     (relationship=[YAnnotRel|QualifiedName] columns+=YAnnotAbstractColumn columns+=YAnnotAbstractColumn*)
	 */
	protected void sequence_YAnnotForeignKey(ISerializationContext context, YAnnotForeignKey semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotEntityInner returns YAnnotId
	 *     YAnnotId returns YAnnotId
	 *
	 * Constraint:
	 *     (name=ValidID annots+=[YAnnotEntityInner|ID] annots+=[YAnnotEntityInner|ID]*)
	 */
	protected void sequence_YAnnotId(ISerializationContext context, YAnnotId semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotJava returns YAnnotJava
	 *
	 * Constraint:
	 *     database=[YAnnotDatabase|ID]?
	 */
	protected void sequence_YAnnotJava(ISerializationContext context, YAnnotJava semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotLength returns YAnnotLength
	 *
	 * Constraint:
	 *     length=INT
	 */
	protected void sequence_YAnnotLength(ISerializationContext context, YAnnotLength semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LangPackage.Literals.YANNOT_LENGTH__LENGTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LangPackage.Literals.YANNOT_LENGTH__LENGTH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getYAnnotLengthAccess().getLengthINTTerminalRuleCall_3_0(), semanticObject.getLength());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotMax returns YAnnotMax
	 *
	 * Constraint:
	 *     length=INT
	 */
	protected void sequence_YAnnotMax(ISerializationContext context, YAnnotMax semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LangPackage.Literals.YANNOT_MAX__LENGTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LangPackage.Literals.YANNOT_MAX__LENGTH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getYAnnotMaxAccess().getLengthINTTerminalRuleCall_3_0(), semanticObject.getLength());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotMessage returns YAnnotMessage
	 *
	 * Constraint:
	 *     msg=STRING
	 */
	protected void sequence_YAnnotMessage(ISerializationContext context, YAnnotMessage semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LangPackage.Literals.YANNOT_MESSAGE__MSG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LangPackage.Literals.YANNOT_MESSAGE__MSG));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getYAnnotMessageAccess().getMsgSTRINGTerminalRuleCall_3_0(), semanticObject.getMsg());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotMsgType returns YAnnot
	 *
	 * Constraint:
	 *     msgtype=ValidID
	 */
	protected void sequence_YAnnotMsgType(ISerializationContext context, YAnnot semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LangPackage.Literals.YANNOT__MSGTYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LangPackage.Literals.YANNOT__MSGTYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getYAnnotMsgTypeAccess().getMsgtypeValidIDParserRuleCall_2_0(), semanticObject.getMsgtype());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotPrimaryKey returns YAnnotPrimaryKey
	 *
	 * Constraint:
	 *     (columns+=[YAnnotAbstractColumn|ID]* columns+=[YAnnotAbstractColumn|ID]*)
	 */
	protected void sequence_YAnnotPrimaryKey(ISerializationContext context, YAnnotPrimaryKey semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotEntityInner returns YAnnotRel
	 *     YAnnotRel returns YAnnotRel
	 *     YAnnotIdInner returns YAnnotRel
	 *
	 * Constraint:
	 *     (
	 *         parent?='@parent'? 
	 *         name=ValidID 
	 *         optional?='?'? 
	 *         target=[YAnnotEntity|QualifiedName] 
	 *         many?='*'? 
	 *         inverse=[YAnnotRel|QualifiedName]?
	 *     )
	 */
	protected void sequence_YAnnotRel(ISerializationContext context, YAnnotRel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotSwift returns YAnnotSwift
	 *
	 * Constraint:
	 *     (name=ValidID database=[YAnnotDatabase|ID]?)
	 */
	protected void sequence_YAnnotSwift(ISerializationContext context, YAnnotSwift semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotTable returns YAnnotTable
	 *
	 * Constraint:
	 *     (name=ValidID entityref=[YAnnotEntity|QualifiedName] columns+=YAnnotAbstractColumn* primarykey=YAnnotPrimaryKey? foreignkeys+=YAnnotForeignKey*)
	 */
	protected void sequence_YAnnotTable(ISerializationContext context, YAnnotTable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotTechnicalDesign returns YAnnotTechnicalDesign
	 *
	 * Constraint:
	 *     (database=[YAnnotDatabase|ID] features+=YAnnotTable*)
	 */
	protected void sequence_YAnnotTechnicalDesign(ISerializationContext context, YAnnotTechnicalDesign semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YAnnotTop returns YAnnotTop
	 *
	 * Constraint:
	 *     (type=YAnnotEntity | type=YAnnotTechnicalDesign | type=YAnnotSwift | type=YAnnotJava | type=YAnnotDatabase)
	 */
	protected void sequence_YAnnotTop(ISerializationContext context, YAnnotTop semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YAnnot returns YAnnot
	 *
	 * Constraint:
	 *     (
	 *         type=YAnnotLength | 
	 *         type=YAnnotDecimal | 
	 *         type=YAnnotAction | 
	 *         type=YAnnotMessage | 
	 *         type=YAnnotMsgType | 
	 *         type=YAnnotDefault | 
	 *         type=YAnnotMax
	 *     )
	 */
	protected void sequence_YAnnot(ISerializationContext context, YAnnot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YAssociateStatement returns YAssociateStatement
	 *
	 * Constraint:
	 *     joinref=YJoinDef
	 */
	protected void sequence_YAssociateStatement(ISerializationContext context, YAssociateStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LangPackage.Literals.YASSOCIATE_STATEMENT__JOINREF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LangPackage.Literals.YASSOCIATE_STATEMENT__JOINREF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getYAssociateStatementAccess().getJoinrefYJoinDefParserRuleCall_1_0(), semanticObject.getJoinref());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     YClass returns YClass
	 *     YMember returns YClass
	 *
	 * Constraint:
	 *     (name=ValidID superclass=JvmTypeReference? entityRef=[YAnnotEntity|QualifiedName]? members+=YMember*)
	 */
	protected void sequence_YClass(ISerializationContext context, YClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YCreateStatement returns YCreateStatement
	 *     XPrimaryExpression returns YCreateStatement
	 *     XExpression returns YCreateStatement
	 *     XAssignment returns YCreateStatement
	 *     XAssignment.XBinaryOperation_1_1_0_0_0 returns YCreateStatement
	 *     XOrExpression returns YCreateStatement
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns YCreateStatement
	 *     XAndExpression returns YCreateStatement
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns YCreateStatement
	 *     XEqualityExpression returns YCreateStatement
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns YCreateStatement
	 *     XRelationalExpression returns YCreateStatement
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns YCreateStatement
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns YCreateStatement
	 *     XOtherOperatorExpression returns YCreateStatement
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns YCreateStatement
	 *     XAdditiveExpression returns YCreateStatement
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns YCreateStatement
	 *     XMultiplicativeExpression returns YCreateStatement
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns YCreateStatement
	 *     XUnaryOperation returns YCreateStatement
	 *     XCastedExpression returns YCreateStatement
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns YCreateStatement
	 *     XPostfixOperation returns YCreateStatement
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns YCreateStatement
	 *     XMemberFeatureCall returns YCreateStatement
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns YCreateStatement
	 *     XMemberFeatureCall.XMemberFeatureCall_1_1_0_0_0 returns YCreateStatement
	 *     XPrimaryExpression returns YCreateStatement
	 *     XParenthesizedExpression returns YCreateStatement
	 *     XExpressionOrVarDeclaration returns YCreateStatement
	 *
	 * Constraint:
	 *     (struct=YStructRefPair setExpressions+=XExpression* successExpressions+=XExpression* alreadyExistExpressions+=XExpression*)
	 */
	protected void sequence_YCreateStatement(ISerializationContext context, YCreateStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YDeleteStatement returns YDeleteStatement
	 *     XPrimaryExpression returns YDeleteStatement
	 *     XExpression returns YDeleteStatement
	 *     XAssignment returns YDeleteStatement
	 *     XAssignment.XBinaryOperation_1_1_0_0_0 returns YDeleteStatement
	 *     XOrExpression returns YDeleteStatement
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns YDeleteStatement
	 *     XAndExpression returns YDeleteStatement
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns YDeleteStatement
	 *     XEqualityExpression returns YDeleteStatement
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns YDeleteStatement
	 *     XRelationalExpression returns YDeleteStatement
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns YDeleteStatement
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns YDeleteStatement
	 *     XOtherOperatorExpression returns YDeleteStatement
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns YDeleteStatement
	 *     XAdditiveExpression returns YDeleteStatement
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns YDeleteStatement
	 *     XMultiplicativeExpression returns YDeleteStatement
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns YDeleteStatement
	 *     XUnaryOperation returns YDeleteStatement
	 *     XCastedExpression returns YDeleteStatement
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns YDeleteStatement
	 *     XPostfixOperation returns YDeleteStatement
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns YDeleteStatement
	 *     XMemberFeatureCall returns YDeleteStatement
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns YDeleteStatement
	 *     XMemberFeatureCall.XMemberFeatureCall_1_1_0_0_0 returns YDeleteStatement
	 *     XPrimaryExpression returns YDeleteStatement
	 *     XParenthesizedExpression returns YDeleteStatement
	 *     XExpressionOrVarDeclaration returns YDeleteStatement
	 *
	 * Constraint:
	 *     struct=YStructRefPair
	 */
	protected void sequence_YDeleteStatement(ISerializationContext context, YDeleteStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LangPackage.Literals.YDELETE_STATEMENT__STRUCT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LangPackage.Literals.YDELETE_STATEMENT__STRUCT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getYDeleteStatementAccess().getStructYStructRefPairParserRuleCall_1_0(), semanticObject.getStruct());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     YMember returns YFunction
	 *     YFunction returns YFunction
	 *
	 * Constraint:
	 *     (access=YAccessLevel? name=ValidID (params+=JvmTypeReference params+=JvmTypeReference*)? type=JvmTypeReference? body=XBlockExpression)
	 */
	protected void sequence_YFunction(ISerializationContext context, YFunction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YJoinDef returns YJoinDef
	 *
	 * Constraint:
	 *     (fromView=[YProperty|ID] relRef=[YAnnotRel|QualifiedName] toView=[YProperty|ID])
	 */
	protected void sequence_YJoinDef(ISerializationContext context, YJoinDef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LangPackage.Literals.YJOIN_DEF__FROM_VIEW) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LangPackage.Literals.YJOIN_DEF__FROM_VIEW));
			if (transientValues.isValueTransient(semanticObject, LangPackage.Literals.YJOIN_DEF__REL_REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LangPackage.Literals.YJOIN_DEF__REL_REF));
			if (transientValues.isValueTransient(semanticObject, LangPackage.Literals.YJOIN_DEF__TO_VIEW) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LangPackage.Literals.YJOIN_DEF__TO_VIEW));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getYJoinDefAccess().getFromViewYPropertyIDTerminalRuleCall_0_0_1(), semanticObject.eGet(LangPackage.Literals.YJOIN_DEF__FROM_VIEW, false));
		feeder.accept(grammarAccess.getYJoinDefAccess().getRelRefYAnnotRelQualifiedNameParserRuleCall_2_0_1(), semanticObject.eGet(LangPackage.Literals.YJOIN_DEF__REL_REF, false));
		feeder.accept(grammarAccess.getYJoinDefAccess().getToViewYPropertyIDTerminalRuleCall_4_0_1(), semanticObject.eGet(LangPackage.Literals.YJOIN_DEF__TO_VIEW, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     YJoin returns YJoin
	 *
	 * Constraint:
	 *     (joindefs+=YJoinDef joindefs+=YJoinDef*)
	 */
	protected void sequence_YJoin(ISerializationContext context, YJoin semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YPackageDeclaration returns YPackageDeclaration
	 *
	 * Constraint:
	 *     name=QualifiedName
	 */
	protected void sequence_YPackageDeclaration(ISerializationContext context, YPackageDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LangPackage.Literals.YPACKAGE_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LangPackage.Literals.YPACKAGE_DECLARATION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getYPackageDeclarationAccess().getNameQualifiedNameParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     YMember returns YProperty
	 *     YProperty returns YProperty
	 *
	 * Constraint:
	 *     (
	 *         access=YAccessLevel? 
	 *         name=ValidID 
	 *         type=JvmTypeReference 
	 *         tuples=YTuples? 
	 *         optional?='?'? 
	 *         attrRef=[YAnnotAttr|QualifiedName]? 
	 *         annotations+=YAnnot*
	 *     )
	 */
	protected void sequence_YProperty(ISerializationContext context, YProperty semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YReadEachStatement returns YReadEachStatement
	 *     XPrimaryExpression returns YReadEachStatement
	 *     XExpression returns YReadEachStatement
	 *     XAssignment returns YReadEachStatement
	 *     XAssignment.XBinaryOperation_1_1_0_0_0 returns YReadEachStatement
	 *     XOrExpression returns YReadEachStatement
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns YReadEachStatement
	 *     XAndExpression returns YReadEachStatement
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns YReadEachStatement
	 *     XEqualityExpression returns YReadEachStatement
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns YReadEachStatement
	 *     XRelationalExpression returns YReadEachStatement
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns YReadEachStatement
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns YReadEachStatement
	 *     XOtherOperatorExpression returns YReadEachStatement
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns YReadEachStatement
	 *     XAdditiveExpression returns YReadEachStatement
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns YReadEachStatement
	 *     XMultiplicativeExpression returns YReadEachStatement
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns YReadEachStatement
	 *     XUnaryOperation returns YReadEachStatement
	 *     XCastedExpression returns YReadEachStatement
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns YReadEachStatement
	 *     XPostfixOperation returns YReadEachStatement
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns YReadEachStatement
	 *     XMemberFeatureCall returns YReadEachStatement
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns YReadEachStatement
	 *     XMemberFeatureCall.XMemberFeatureCall_1_1_0_0_0 returns YReadEachStatement
	 *     XPrimaryExpression returns YReadEachStatement
	 *     XParenthesizedExpression returns YReadEachStatement
	 *     XExpressionOrVarDeclaration returns YReadEachStatement
	 *
	 * Constraint:
	 *     (
	 *         structs+=YStructRefPair 
	 *         structs+=YStructRefPair* 
	 *         joinclause=YJoin? 
	 *         whereclause=XExpression? 
	 *         target=[YProperty|ID] 
	 *         success=XBlockExpression
	 *     )
	 */
	protected void sequence_YReadEachStatement(ISerializationContext context, YReadEachStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YReadStatement returns YReadStatement
	 *     XPrimaryExpression returns YReadStatement
	 *     XExpression returns YReadStatement
	 *     XAssignment returns YReadStatement
	 *     XAssignment.XBinaryOperation_1_1_0_0_0 returns YReadStatement
	 *     XOrExpression returns YReadStatement
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns YReadStatement
	 *     XAndExpression returns YReadStatement
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns YReadStatement
	 *     XEqualityExpression returns YReadStatement
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns YReadStatement
	 *     XRelationalExpression returns YReadStatement
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns YReadStatement
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns YReadStatement
	 *     XOtherOperatorExpression returns YReadStatement
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns YReadStatement
	 *     XAdditiveExpression returns YReadStatement
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns YReadStatement
	 *     XMultiplicativeExpression returns YReadStatement
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns YReadStatement
	 *     XUnaryOperation returns YReadStatement
	 *     XCastedExpression returns YReadStatement
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns YReadStatement
	 *     XPostfixOperation returns YReadStatement
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns YReadStatement
	 *     XMemberFeatureCall returns YReadStatement
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns YReadStatement
	 *     XMemberFeatureCall.XMemberFeatureCall_1_1_0_0_0 returns YReadStatement
	 *     XPrimaryExpression returns YReadStatement
	 *     XParenthesizedExpression returns YReadStatement
	 *     XExpressionOrVarDeclaration returns YReadStatement
	 *
	 * Constraint:
	 *     (
	 *         structs+=YStructRefPair 
	 *         structs+=YStructRefPair* 
	 *         joinclause=YJoin? 
	 *         whereclause=XExpression? 
	 *         successExpressions+=XExpression* 
	 *         notfoundExpressions+=XExpression*
	 *     )
	 */
	protected void sequence_YReadStatement(ISerializationContext context, YReadStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YStructRefPair returns YStructRefPair
	 *
	 * Constraint:
	 *     (structproperty=[YProperty|ID] structclass=[YAnnotEntity|ID])
	 */
	protected void sequence_YStructRefPair(ISerializationContext context, YStructRefPair semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LangPackage.Literals.YSTRUCT_REF_PAIR__STRUCTPROPERTY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LangPackage.Literals.YSTRUCT_REF_PAIR__STRUCTPROPERTY));
			if (transientValues.isValueTransient(semanticObject, LangPackage.Literals.YSTRUCT_REF_PAIR__STRUCTCLASS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LangPackage.Literals.YSTRUCT_REF_PAIR__STRUCTCLASS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getYStructRefPairAccess().getStructpropertyYPropertyIDTerminalRuleCall_0_0_1(), semanticObject.eGet(LangPackage.Literals.YSTRUCT_REF_PAIR__STRUCTPROPERTY, false));
		feeder.accept(grammarAccess.getYStructRefPairAccess().getStructclassYAnnotEntityIDTerminalRuleCall_2_0_1(), semanticObject.eGet(LangPackage.Literals.YSTRUCT_REF_PAIR__STRUCTCLASS, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     YTuples returns YTuples
	 *
	 * Constraint:
	 *     (includes+=[YProperty|ID] includes+=[YProperty|ID]*)?
	 */
	protected void sequence_YTuples(ISerializationContext context, YTuples semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     YUpdateStatement returns YUpdateStatement
	 *     XPrimaryExpression returns YUpdateStatement
	 *     XExpression returns YUpdateStatement
	 *     XAssignment returns YUpdateStatement
	 *     XAssignment.XBinaryOperation_1_1_0_0_0 returns YUpdateStatement
	 *     XOrExpression returns YUpdateStatement
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns YUpdateStatement
	 *     XAndExpression returns YUpdateStatement
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns YUpdateStatement
	 *     XEqualityExpression returns YUpdateStatement
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns YUpdateStatement
	 *     XRelationalExpression returns YUpdateStatement
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns YUpdateStatement
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns YUpdateStatement
	 *     XOtherOperatorExpression returns YUpdateStatement
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns YUpdateStatement
	 *     XAdditiveExpression returns YUpdateStatement
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns YUpdateStatement
	 *     XMultiplicativeExpression returns YUpdateStatement
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns YUpdateStatement
	 *     XUnaryOperation returns YUpdateStatement
	 *     XCastedExpression returns YUpdateStatement
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns YUpdateStatement
	 *     XPostfixOperation returns YUpdateStatement
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns YUpdateStatement
	 *     XMemberFeatureCall returns YUpdateStatement
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns YUpdateStatement
	 *     XMemberFeatureCall.XMemberFeatureCall_1_1_0_0_0 returns YUpdateStatement
	 *     XPrimaryExpression returns YUpdateStatement
	 *     XParenthesizedExpression returns YUpdateStatement
	 *     XExpressionOrVarDeclaration returns YUpdateStatement
	 *
	 * Constraint:
	 *     (struct=YStructRefPair setBlock=XBlockExpression success=XBlockExpression)
	 */
	protected void sequence_YUpdateStatement(ISerializationContext context, YUpdateStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LangPackage.Literals.YUPDATE_STATEMENT__STRUCT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LangPackage.Literals.YUPDATE_STATEMENT__STRUCT));
			if (transientValues.isValueTransient(semanticObject, LangPackage.Literals.YUPDATE_STATEMENT__SET_BLOCK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LangPackage.Literals.YUPDATE_STATEMENT__SET_BLOCK));
			if (transientValues.isValueTransient(semanticObject, LangPackage.Literals.YUPDATE_STATEMENT__SUCCESS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LangPackage.Literals.YUPDATE_STATEMENT__SUCCESS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getYUpdateStatementAccess().getStructYStructRefPairParserRuleCall_1_0(), semanticObject.getStruct());
		feeder.accept(grammarAccess.getYUpdateStatementAccess().getSetBlockXBlockExpressionParserRuleCall_2_0(), semanticObject.getSetBlock());
		feeder.accept(grammarAccess.getYUpdateStatementAccess().getSuccessXBlockExpressionParserRuleCall_4_0(), semanticObject.getSuccess());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     YWhere returns YWhere
	 *
	 * Constraint:
	 *     expression=XExpression
	 */
	protected void sequence_YWhere(ISerializationContext context, YWhere semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LangPackage.Literals.YWHERE__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LangPackage.Literals.YWHERE__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getYWhereAccess().getExpressionXExpressionParserRuleCall_2_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     YWidget returns YWidget
	 *
	 * Constraint:
	 *     (package=YPackageDeclaration importSection=XImportSection? annotations+=YAnnotTop* classes+=YClass*)
	 */
	protected void sequence_YWidget(ISerializationContext context, YWidget semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
