/**
 * generated by Xtext 2.15.0
 */
package eu.jgen.notes.dmw.lite.lang.impl;

import eu.jgen.notes.dmw.lite.lang.LangPackage;
import eu.jgen.notes.dmw.lite.lang.YCreateStatement;
import eu.jgen.notes.dmw.lite.lang.YStructRefPair;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.xtext.xbase.XExpression;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>YCreate Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link eu.jgen.notes.dmw.lite.lang.impl.YCreateStatementImpl#getStruct <em>Struct</em>}</li>
 *   <li>{@link eu.jgen.notes.dmw.lite.lang.impl.YCreateStatementImpl#getSetExpressions <em>Set Expressions</em>}</li>
 *   <li>{@link eu.jgen.notes.dmw.lite.lang.impl.YCreateStatementImpl#getSuccessExpressions <em>Success Expressions</em>}</li>
 *   <li>{@link eu.jgen.notes.dmw.lite.lang.impl.YCreateStatementImpl#getAlreadyExistExpressions <em>Already Exist Expressions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class YCreateStatementImpl extends XExpressionImpl implements YCreateStatement
{
  /**
   * The cached value of the '{@link #getStruct() <em>Struct</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStruct()
   * @generated
   * @ordered
   */
  protected YStructRefPair struct;

  /**
   * The cached value of the '{@link #getSetExpressions() <em>Set Expressions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSetExpressions()
   * @generated
   * @ordered
   */
  protected EList<XExpression> setExpressions;

  /**
   * The cached value of the '{@link #getSuccessExpressions() <em>Success Expressions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSuccessExpressions()
   * @generated
   * @ordered
   */
  protected EList<XExpression> successExpressions;

  /**
   * The cached value of the '{@link #getAlreadyExistExpressions() <em>Already Exist Expressions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlreadyExistExpressions()
   * @generated
   * @ordered
   */
  protected EList<XExpression> alreadyExistExpressions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected YCreateStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LangPackage.Literals.YCREATE_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public YStructRefPair getStruct()
  {
    return struct;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStruct(YStructRefPair newStruct, NotificationChain msgs)
  {
    YStructRefPair oldStruct = struct;
    struct = newStruct;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LangPackage.YCREATE_STATEMENT__STRUCT, oldStruct, newStruct);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStruct(YStructRefPair newStruct)
  {
    if (newStruct != struct)
    {
      NotificationChain msgs = null;
      if (struct != null)
        msgs = ((InternalEObject)struct).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LangPackage.YCREATE_STATEMENT__STRUCT, null, msgs);
      if (newStruct != null)
        msgs = ((InternalEObject)newStruct).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LangPackage.YCREATE_STATEMENT__STRUCT, null, msgs);
      msgs = basicSetStruct(newStruct, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LangPackage.YCREATE_STATEMENT__STRUCT, newStruct, newStruct));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<XExpression> getSetExpressions()
  {
    if (setExpressions == null)
    {
      setExpressions = new EObjectContainmentEList<XExpression>(XExpression.class, this, LangPackage.YCREATE_STATEMENT__SET_EXPRESSIONS);
    }
    return setExpressions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<XExpression> getSuccessExpressions()
  {
    if (successExpressions == null)
    {
      successExpressions = new EObjectContainmentEList<XExpression>(XExpression.class, this, LangPackage.YCREATE_STATEMENT__SUCCESS_EXPRESSIONS);
    }
    return successExpressions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<XExpression> getAlreadyExistExpressions()
  {
    if (alreadyExistExpressions == null)
    {
      alreadyExistExpressions = new EObjectContainmentEList<XExpression>(XExpression.class, this, LangPackage.YCREATE_STATEMENT__ALREADY_EXIST_EXPRESSIONS);
    }
    return alreadyExistExpressions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LangPackage.YCREATE_STATEMENT__STRUCT:
        return basicSetStruct(null, msgs);
      case LangPackage.YCREATE_STATEMENT__SET_EXPRESSIONS:
        return ((InternalEList<?>)getSetExpressions()).basicRemove(otherEnd, msgs);
      case LangPackage.YCREATE_STATEMENT__SUCCESS_EXPRESSIONS:
        return ((InternalEList<?>)getSuccessExpressions()).basicRemove(otherEnd, msgs);
      case LangPackage.YCREATE_STATEMENT__ALREADY_EXIST_EXPRESSIONS:
        return ((InternalEList<?>)getAlreadyExistExpressions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LangPackage.YCREATE_STATEMENT__STRUCT:
        return getStruct();
      case LangPackage.YCREATE_STATEMENT__SET_EXPRESSIONS:
        return getSetExpressions();
      case LangPackage.YCREATE_STATEMENT__SUCCESS_EXPRESSIONS:
        return getSuccessExpressions();
      case LangPackage.YCREATE_STATEMENT__ALREADY_EXIST_EXPRESSIONS:
        return getAlreadyExistExpressions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LangPackage.YCREATE_STATEMENT__STRUCT:
        setStruct((YStructRefPair)newValue);
        return;
      case LangPackage.YCREATE_STATEMENT__SET_EXPRESSIONS:
        getSetExpressions().clear();
        getSetExpressions().addAll((Collection<? extends XExpression>)newValue);
        return;
      case LangPackage.YCREATE_STATEMENT__SUCCESS_EXPRESSIONS:
        getSuccessExpressions().clear();
        getSuccessExpressions().addAll((Collection<? extends XExpression>)newValue);
        return;
      case LangPackage.YCREATE_STATEMENT__ALREADY_EXIST_EXPRESSIONS:
        getAlreadyExistExpressions().clear();
        getAlreadyExistExpressions().addAll((Collection<? extends XExpression>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LangPackage.YCREATE_STATEMENT__STRUCT:
        setStruct((YStructRefPair)null);
        return;
      case LangPackage.YCREATE_STATEMENT__SET_EXPRESSIONS:
        getSetExpressions().clear();
        return;
      case LangPackage.YCREATE_STATEMENT__SUCCESS_EXPRESSIONS:
        getSuccessExpressions().clear();
        return;
      case LangPackage.YCREATE_STATEMENT__ALREADY_EXIST_EXPRESSIONS:
        getAlreadyExistExpressions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LangPackage.YCREATE_STATEMENT__STRUCT:
        return struct != null;
      case LangPackage.YCREATE_STATEMENT__SET_EXPRESSIONS:
        return setExpressions != null && !setExpressions.isEmpty();
      case LangPackage.YCREATE_STATEMENT__SUCCESS_EXPRESSIONS:
        return successExpressions != null && !successExpressions.isEmpty();
      case LangPackage.YCREATE_STATEMENT__ALREADY_EXIST_EXPRESSIONS:
        return alreadyExistExpressions != null && !alreadyExistExpressions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //YCreateStatementImpl
