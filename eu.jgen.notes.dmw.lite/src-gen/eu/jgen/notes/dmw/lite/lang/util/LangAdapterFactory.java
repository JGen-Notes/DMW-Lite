/**
 * generated by Xtext 2.12.0
 */
package eu.jgen.notes.dmw.lite.lang.util;

import eu.jgen.notes.dmw.lite.lang.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see eu.jgen.notes.dmw.lite.lang.LangPackage
 * @generated
 */
public class LangAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static LangPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LangAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = LangPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LangSwitch<Adapter> modelSwitch =
    new LangSwitch<Adapter>()
    {
      @Override
      public Adapter caseYWidget(YWidget object)
      {
        return createYWidgetAdapter();
      }
      @Override
      public Adapter caseYImport(YImport object)
      {
        return createYImportAdapter();
      }
      @Override
      public Adapter caseYParameter(YParameter object)
      {
        return createYParameterAdapter();
      }
      @Override
      public Adapter caseYArgument(YArgument object)
      {
        return createYArgumentAdapter();
      }
      @Override
      public Adapter caseYClass(YClass object)
      {
        return createYClassAdapter();
      }
      @Override
      public Adapter caseYMember(YMember object)
      {
        return createYMemberAdapter();
      }
      @Override
      public Adapter caseYProperty(YProperty object)
      {
        return createYPropertyAdapter();
      }
      @Override
      public Adapter caseYTuples(YTuples object)
      {
        return createYTuplesAdapter();
      }
      @Override
      public Adapter caseYFunction(YFunction object)
      {
        return createYFunctionAdapter();
      }
      @Override
      public Adapter caseYBlock(YBlock object)
      {
        return createYBlockAdapter();
      }
      @Override
      public Adapter caseYStatement(YStatement object)
      {
        return createYStatementAdapter();
      }
      @Override
      public Adapter caseYVariableDeclaration(YVariableDeclaration object)
      {
        return createYVariableDeclarationAdapter();
      }
      @Override
      public Adapter caseYReturn(YReturn object)
      {
        return createYReturnAdapter();
      }
      @Override
      public Adapter caseYIfStatement(YIfStatement object)
      {
        return createYIfStatementAdapter();
      }
      @Override
      public Adapter caseYSwitchStatement(YSwitchStatement object)
      {
        return createYSwitchStatementAdapter();
      }
      @Override
      public Adapter caseYSwitchCase(YSwitchCase object)
      {
        return createYSwitchCaseAdapter();
      }
      @Override
      public Adapter caseYSymbol(YSymbol object)
      {
        return createYSymbolAdapter();
      }
      @Override
      public Adapter caseYNamedElement(YNamedElement object)
      {
        return createYNamedElementAdapter();
      }
      @Override
      public Adapter caseYExpression(YExpression object)
      {
        return createYExpressionAdapter();
      }
      @Override
      public Adapter caseYReadStatement(YReadStatement object)
      {
        return createYReadStatementAdapter();
      }
      @Override
      public Adapter caseYReadEachStatement(YReadEachStatement object)
      {
        return createYReadEachStatementAdapter();
      }
      @Override
      public Adapter caseYCreateStatement(YCreateStatement object)
      {
        return createYCreateStatementAdapter();
      }
      @Override
      public Adapter caseYUpdateStatement(YUpdateStatement object)
      {
        return createYUpdateStatementAdapter();
      }
      @Override
      public Adapter caseYDeleteStatement(YDeleteStatement object)
      {
        return createYDeleteStatementAdapter();
      }
      @Override
      public Adapter caseYAssociateStatement(YAssociateStatement object)
      {
        return createYAssociateStatementAdapter();
      }
      @Override
      public Adapter caseYStructRefPair(YStructRefPair object)
      {
        return createYStructRefPairAdapter();
      }
      @Override
      public Adapter caseYJoin(YJoin object)
      {
        return createYJoinAdapter();
      }
      @Override
      public Adapter caseYJoinDef(YJoinDef object)
      {
        return createYJoinDefAdapter();
      }
      @Override
      public Adapter caseYWhere(YWhere object)
      {
        return createYWhereAdapter();
      }
      @Override
      public Adapter caseYWhileStatement(YWhileStatement object)
      {
        return createYWhileStatementAdapter();
      }
      @Override
      public Adapter caseYRepeatWhileStatement(YRepeatWhileStatement object)
      {
        return createYRepeatWhileStatementAdapter();
      }
      @Override
      public Adapter caseYForInStatement(YForInStatement object)
      {
        return createYForInStatementAdapter();
      }
      @Override
      public Adapter caseYAnnot(YAnnot object)
      {
        return createYAnnotAdapter();
      }
      @Override
      public Adapter caseYAnnotTop(YAnnotTop object)
      {
        return createYAnnotTopAdapter();
      }
      @Override
      public Adapter caseYAnnotEntityInner(YAnnotEntityInner object)
      {
        return createYAnnotEntityInnerAdapter();
      }
      @Override
      public Adapter caseYAnnotEntity(YAnnotEntity object)
      {
        return createYAnnotEntityAdapter();
      }
      @Override
      public Adapter caseYAnnotAttr(YAnnotAttr object)
      {
        return createYAnnotAttrAdapter();
      }
      @Override
      public Adapter caseYAnnotRel(YAnnotRel object)
      {
        return createYAnnotRelAdapter();
      }
      @Override
      public Adapter caseYAnnotIdInner(YAnnotIdInner object)
      {
        return createYAnnotIdInnerAdapter();
      }
      @Override
      public Adapter caseYAnnotId(YAnnotId object)
      {
        return createYAnnotIdAdapter();
      }
      @Override
      public Adapter caseYAnnotTechnicalDesign(YAnnotTechnicalDesign object)
      {
        return createYAnnotTechnicalDesignAdapter();
      }
      @Override
      public Adapter caseYAnnotTable(YAnnotTable object)
      {
        return createYAnnotTableAdapter();
      }
      @Override
      public Adapter caseYAnnotColumn(YAnnotColumn object)
      {
        return createYAnnotColumnAdapter();
      }
      @Override
      public Adapter caseYAnnotColumnLike(YAnnotColumnLike object)
      {
        return createYAnnotColumnLikeAdapter();
      }
      @Override
      public Adapter caseYAnnotAbstractColumn(YAnnotAbstractColumn object)
      {
        return createYAnnotAbstractColumnAdapter();
      }
      @Override
      public Adapter caseYAnnotPrimaryKey(YAnnotPrimaryKey object)
      {
        return createYAnnotPrimaryKeyAdapter();
      }
      @Override
      public Adapter caseYAnnotForeignKey(YAnnotForeignKey object)
      {
        return createYAnnotForeignKeyAdapter();
      }
      @Override
      public Adapter caseYAnnotJava(YAnnotJava object)
      {
        return createYAnnotJavaAdapter();
      }
      @Override
      public Adapter caseYAnnotSwift(YAnnotSwift object)
      {
        return createYAnnotSwiftAdapter();
      }
      @Override
      public Adapter caseYAnnotDatabase(YAnnotDatabase object)
      {
        return createYAnnotDatabaseAdapter();
      }
      @Override
      public Adapter caseYAssignment(YAssignment object)
      {
        return createYAssignmentAdapter();
      }
      @Override
      public Adapter caseYMemberSelection(YMemberSelection object)
      {
        return createYMemberSelectionAdapter();
      }
      @Override
      public Adapter caseYOrExpression(YOrExpression object)
      {
        return createYOrExpressionAdapter();
      }
      @Override
      public Adapter caseYAndExpression(YAndExpression object)
      {
        return createYAndExpressionAdapter();
      }
      @Override
      public Adapter caseYEqualityExpression(YEqualityExpression object)
      {
        return createYEqualityExpressionAdapter();
      }
      @Override
      public Adapter caseYComparisonExpression(YComparisonExpression object)
      {
        return createYComparisonExpressionAdapter();
      }
      @Override
      public Adapter caseYPlus(YPlus object)
      {
        return createYPlusAdapter();
      }
      @Override
      public Adapter caseYMinus(YMinus object)
      {
        return createYMinusAdapter();
      }
      @Override
      public Adapter caseYMulOrDiv(YMulOrDiv object)
      {
        return createYMulOrDivAdapter();
      }
      @Override
      public Adapter caseYParenties(YParenties object)
      {
        return createYParentiesAdapter();
      }
      @Override
      public Adapter caseYNot(YNot object)
      {
        return createYNotAdapter();
      }
      @Override
      public Adapter caseYStringConstant(YStringConstant object)
      {
        return createYStringConstantAdapter();
      }
      @Override
      public Adapter caseYIntConstant(YIntConstant object)
      {
        return createYIntConstantAdapter();
      }
      @Override
      public Adapter caseYBoolConstant(YBoolConstant object)
      {
        return createYBoolConstantAdapter();
      }
      @Override
      public Adapter caseYSelf(YSelf object)
      {
        return createYSelfAdapter();
      }
      @Override
      public Adapter caseYSuper(YSuper object)
      {
        return createYSuperAdapter();
      }
      @Override
      public Adapter caseYNull(YNull object)
      {
        return createYNullAdapter();
      }
      @Override
      public Adapter caseYSymbolRef(YSymbolRef object)
      {
        return createYSymbolRefAdapter();
      }
      @Override
      public Adapter caseYNew(YNew object)
      {
        return createYNewAdapter();
      }
      @Override
      public Adapter caseYAnnotLength(YAnnotLength object)
      {
        return createYAnnotLengthAdapter();
      }
      @Override
      public Adapter caseYAnnotDecimal(YAnnotDecimal object)
      {
        return createYAnnotDecimalAdapter();
      }
      @Override
      public Adapter caseYAnnotAction(YAnnotAction object)
      {
        return createYAnnotActionAdapter();
      }
      @Override
      public Adapter caseYAnnotMessage(YAnnotMessage object)
      {
        return createYAnnotMessageAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YWidget <em>YWidget</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YWidget
   * @generated
   */
  public Adapter createYWidgetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YImport <em>YImport</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YImport
   * @generated
   */
  public Adapter createYImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YParameter <em>YParameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YParameter
   * @generated
   */
  public Adapter createYParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YArgument <em>YArgument</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YArgument
   * @generated
   */
  public Adapter createYArgumentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YClass <em>YClass</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YClass
   * @generated
   */
  public Adapter createYClassAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YMember <em>YMember</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YMember
   * @generated
   */
  public Adapter createYMemberAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YProperty <em>YProperty</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YProperty
   * @generated
   */
  public Adapter createYPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YTuples <em>YTuples</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YTuples
   * @generated
   */
  public Adapter createYTuplesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YFunction <em>YFunction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YFunction
   * @generated
   */
  public Adapter createYFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YBlock <em>YBlock</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YBlock
   * @generated
   */
  public Adapter createYBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YStatement <em>YStatement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YStatement
   * @generated
   */
  public Adapter createYStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YVariableDeclaration <em>YVariable Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YVariableDeclaration
   * @generated
   */
  public Adapter createYVariableDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YReturn <em>YReturn</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YReturn
   * @generated
   */
  public Adapter createYReturnAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YIfStatement <em>YIf Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YIfStatement
   * @generated
   */
  public Adapter createYIfStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YSwitchStatement <em>YSwitch Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YSwitchStatement
   * @generated
   */
  public Adapter createYSwitchStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YSwitchCase <em>YSwitch Case</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YSwitchCase
   * @generated
   */
  public Adapter createYSwitchCaseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YSymbol <em>YSymbol</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YSymbol
   * @generated
   */
  public Adapter createYSymbolAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YNamedElement <em>YNamed Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YNamedElement
   * @generated
   */
  public Adapter createYNamedElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YExpression <em>YExpression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YExpression
   * @generated
   */
  public Adapter createYExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YReadStatement <em>YRead Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YReadStatement
   * @generated
   */
  public Adapter createYReadStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YReadEachStatement <em>YRead Each Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YReadEachStatement
   * @generated
   */
  public Adapter createYReadEachStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YCreateStatement <em>YCreate Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YCreateStatement
   * @generated
   */
  public Adapter createYCreateStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YUpdateStatement <em>YUpdate Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YUpdateStatement
   * @generated
   */
  public Adapter createYUpdateStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YDeleteStatement <em>YDelete Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YDeleteStatement
   * @generated
   */
  public Adapter createYDeleteStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YAssociateStatement <em>YAssociate Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YAssociateStatement
   * @generated
   */
  public Adapter createYAssociateStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YStructRefPair <em>YStruct Ref Pair</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YStructRefPair
   * @generated
   */
  public Adapter createYStructRefPairAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YJoin <em>YJoin</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YJoin
   * @generated
   */
  public Adapter createYJoinAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YJoinDef <em>YJoin Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YJoinDef
   * @generated
   */
  public Adapter createYJoinDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YWhere <em>YWhere</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YWhere
   * @generated
   */
  public Adapter createYWhereAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YWhileStatement <em>YWhile Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YWhileStatement
   * @generated
   */
  public Adapter createYWhileStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YRepeatWhileStatement <em>YRepeat While Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YRepeatWhileStatement
   * @generated
   */
  public Adapter createYRepeatWhileStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YForInStatement <em>YFor In Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YForInStatement
   * @generated
   */
  public Adapter createYForInStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YAnnot <em>YAnnot</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YAnnot
   * @generated
   */
  public Adapter createYAnnotAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YAnnotTop <em>YAnnot Top</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YAnnotTop
   * @generated
   */
  public Adapter createYAnnotTopAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YAnnotEntityInner <em>YAnnot Entity Inner</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YAnnotEntityInner
   * @generated
   */
  public Adapter createYAnnotEntityInnerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YAnnotEntity <em>YAnnot Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YAnnotEntity
   * @generated
   */
  public Adapter createYAnnotEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YAnnotAttr <em>YAnnot Attr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YAnnotAttr
   * @generated
   */
  public Adapter createYAnnotAttrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YAnnotRel <em>YAnnot Rel</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YAnnotRel
   * @generated
   */
  public Adapter createYAnnotRelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YAnnotIdInner <em>YAnnot Id Inner</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YAnnotIdInner
   * @generated
   */
  public Adapter createYAnnotIdInnerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YAnnotId <em>YAnnot Id</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YAnnotId
   * @generated
   */
  public Adapter createYAnnotIdAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YAnnotTechnicalDesign <em>YAnnot Technical Design</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YAnnotTechnicalDesign
   * @generated
   */
  public Adapter createYAnnotTechnicalDesignAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YAnnotTable <em>YAnnot Table</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YAnnotTable
   * @generated
   */
  public Adapter createYAnnotTableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YAnnotColumn <em>YAnnot Column</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YAnnotColumn
   * @generated
   */
  public Adapter createYAnnotColumnAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YAnnotColumnLike <em>YAnnot Column Like</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YAnnotColumnLike
   * @generated
   */
  public Adapter createYAnnotColumnLikeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YAnnotAbstractColumn <em>YAnnot Abstract Column</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YAnnotAbstractColumn
   * @generated
   */
  public Adapter createYAnnotAbstractColumnAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YAnnotPrimaryKey <em>YAnnot Primary Key</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YAnnotPrimaryKey
   * @generated
   */
  public Adapter createYAnnotPrimaryKeyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YAnnotForeignKey <em>YAnnot Foreign Key</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YAnnotForeignKey
   * @generated
   */
  public Adapter createYAnnotForeignKeyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YAnnotJava <em>YAnnot Java</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YAnnotJava
   * @generated
   */
  public Adapter createYAnnotJavaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YAnnotSwift <em>YAnnot Swift</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YAnnotSwift
   * @generated
   */
  public Adapter createYAnnotSwiftAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YAnnotDatabase <em>YAnnot Database</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YAnnotDatabase
   * @generated
   */
  public Adapter createYAnnotDatabaseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YAssignment <em>YAssignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YAssignment
   * @generated
   */
  public Adapter createYAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YMemberSelection <em>YMember Selection</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YMemberSelection
   * @generated
   */
  public Adapter createYMemberSelectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YOrExpression <em>YOr Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YOrExpression
   * @generated
   */
  public Adapter createYOrExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YAndExpression <em>YAnd Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YAndExpression
   * @generated
   */
  public Adapter createYAndExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YEqualityExpression <em>YEquality Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YEqualityExpression
   * @generated
   */
  public Adapter createYEqualityExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YComparisonExpression <em>YComparison Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YComparisonExpression
   * @generated
   */
  public Adapter createYComparisonExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YPlus <em>YPlus</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YPlus
   * @generated
   */
  public Adapter createYPlusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YMinus <em>YMinus</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YMinus
   * @generated
   */
  public Adapter createYMinusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YMulOrDiv <em>YMul Or Div</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YMulOrDiv
   * @generated
   */
  public Adapter createYMulOrDivAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YParenties <em>YParenties</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YParenties
   * @generated
   */
  public Adapter createYParentiesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YNot <em>YNot</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YNot
   * @generated
   */
  public Adapter createYNotAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YStringConstant <em>YString Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YStringConstant
   * @generated
   */
  public Adapter createYStringConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YIntConstant <em>YInt Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YIntConstant
   * @generated
   */
  public Adapter createYIntConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YBoolConstant <em>YBool Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YBoolConstant
   * @generated
   */
  public Adapter createYBoolConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YSelf <em>YSelf</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YSelf
   * @generated
   */
  public Adapter createYSelfAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YSuper <em>YSuper</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YSuper
   * @generated
   */
  public Adapter createYSuperAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YNull <em>YNull</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YNull
   * @generated
   */
  public Adapter createYNullAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YSymbolRef <em>YSymbol Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YSymbolRef
   * @generated
   */
  public Adapter createYSymbolRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YNew <em>YNew</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YNew
   * @generated
   */
  public Adapter createYNewAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YAnnotLength <em>YAnnot Length</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YAnnotLength
   * @generated
   */
  public Adapter createYAnnotLengthAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YAnnotDecimal <em>YAnnot Decimal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YAnnotDecimal
   * @generated
   */
  public Adapter createYAnnotDecimalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YAnnotAction <em>YAnnot Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YAnnotAction
   * @generated
   */
  public Adapter createYAnnotActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.jgen.notes.dmw.lite.lang.YAnnotMessage <em>YAnnot Message</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.jgen.notes.dmw.lite.lang.YAnnotMessage
   * @generated
   */
  public Adapter createYAnnotMessageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //LangAdapterFactory
