/**
 * generated by Xtext 2.15.0
 */
package eu.jgen.notes.dmw.lite.lang.impl;

import eu.jgen.notes.dmw.lite.lang.DBExpression;
import eu.jgen.notes.dmw.lite.lang.LangPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>DB Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link eu.jgen.notes.dmw.lite.lang.impl.DBExpressionImpl#getLeftOperand <em>Left Operand</em>}</li>
 *   <li>{@link eu.jgen.notes.dmw.lite.lang.impl.DBExpressionImpl#getRightOperand <em>Right Operand</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DBExpressionImpl extends MinimalEObjectImpl.Container implements DBExpression
{
  /**
   * The cached value of the '{@link #getLeftOperand() <em>Left Operand</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeftOperand()
   * @generated
   * @ordered
   */
  protected EObject leftOperand;

  /**
   * The cached value of the '{@link #getRightOperand() <em>Right Operand</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRightOperand()
   * @generated
   * @ordered
   */
  protected EObject rightOperand;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DBExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LangPackage.Literals.DB_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EObject getLeftOperand()
  {
    if (leftOperand != null && leftOperand.eIsProxy())
    {
      InternalEObject oldLeftOperand = (InternalEObject)leftOperand;
      leftOperand = eResolveProxy(oldLeftOperand);
      if (leftOperand != oldLeftOperand)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, LangPackage.DB_EXPRESSION__LEFT_OPERAND, oldLeftOperand, leftOperand));
      }
    }
    return leftOperand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EObject basicGetLeftOperand()
  {
    return leftOperand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLeftOperand(EObject newLeftOperand)
  {
    EObject oldLeftOperand = leftOperand;
    leftOperand = newLeftOperand;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LangPackage.DB_EXPRESSION__LEFT_OPERAND, oldLeftOperand, leftOperand));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EObject getRightOperand()
  {
    if (rightOperand != null && rightOperand.eIsProxy())
    {
      InternalEObject oldRightOperand = (InternalEObject)rightOperand;
      rightOperand = eResolveProxy(oldRightOperand);
      if (rightOperand != oldRightOperand)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, LangPackage.DB_EXPRESSION__RIGHT_OPERAND, oldRightOperand, rightOperand));
      }
    }
    return rightOperand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EObject basicGetRightOperand()
  {
    return rightOperand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRightOperand(EObject newRightOperand)
  {
    EObject oldRightOperand = rightOperand;
    rightOperand = newRightOperand;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LangPackage.DB_EXPRESSION__RIGHT_OPERAND, oldRightOperand, rightOperand));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LangPackage.DB_EXPRESSION__LEFT_OPERAND:
        if (resolve) return getLeftOperand();
        return basicGetLeftOperand();
      case LangPackage.DB_EXPRESSION__RIGHT_OPERAND:
        if (resolve) return getRightOperand();
        return basicGetRightOperand();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LangPackage.DB_EXPRESSION__LEFT_OPERAND:
        setLeftOperand((EObject)newValue);
        return;
      case LangPackage.DB_EXPRESSION__RIGHT_OPERAND:
        setRightOperand((EObject)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LangPackage.DB_EXPRESSION__LEFT_OPERAND:
        setLeftOperand((EObject)null);
        return;
      case LangPackage.DB_EXPRESSION__RIGHT_OPERAND:
        setRightOperand((EObject)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LangPackage.DB_EXPRESSION__LEFT_OPERAND:
        return leftOperand != null;
      case LangPackage.DB_EXPRESSION__RIGHT_OPERAND:
        return rightOperand != null;
    }
    return super.eIsSet(featureID);
  }

} //DBExpressionImpl
