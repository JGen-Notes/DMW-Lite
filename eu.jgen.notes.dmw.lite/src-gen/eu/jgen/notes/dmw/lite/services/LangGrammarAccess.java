/*
 * generated by Xtext 2.15.0
 */
package eu.jgen.notes.dmw.lite.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class LangGrammarAccess extends AbstractGrammarElementFinder {
	
	public class YWidgetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YWidget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYWidgetAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPackageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackageYPackageDeclarationParserRuleCall_1_0 = (RuleCall)cPackageAssignment_1.eContents().get(0);
		private final Assignment cImportSectionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportSectionXImportSectionParserRuleCall_2_0 = (RuleCall)cImportSectionAssignment_2.eContents().get(0);
		private final Assignment cAnnotationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnnotationsYAnnotTopParserRuleCall_3_0 = (RuleCall)cAnnotationsAssignment_3.eContents().get(0);
		private final Assignment cClassesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cClassesYClassParserRuleCall_4_0 = (RuleCall)cClassesAssignment_4.eContents().get(0);
		
		//YWidget:
		//	{YWidget} package=YPackageDeclaration
		//	importSection=XImportSection?
		//	annotations+=YAnnotTop*
		//	classes+=YClass*;
		@Override public ParserRule getRule() { return rule; }
		
		//{YWidget} package=YPackageDeclaration importSection=XImportSection? annotations+=YAnnotTop* classes+=YClass*
		public Group getGroup() { return cGroup; }
		
		//{YWidget}
		public Action getYWidgetAction_0() { return cYWidgetAction_0; }
		
		//package=YPackageDeclaration
		public Assignment getPackageAssignment_1() { return cPackageAssignment_1; }
		
		//YPackageDeclaration
		public RuleCall getPackageYPackageDeclarationParserRuleCall_1_0() { return cPackageYPackageDeclarationParserRuleCall_1_0; }
		
		//importSection=XImportSection?
		public Assignment getImportSectionAssignment_2() { return cImportSectionAssignment_2; }
		
		//XImportSection
		public RuleCall getImportSectionXImportSectionParserRuleCall_2_0() { return cImportSectionXImportSectionParserRuleCall_2_0; }
		
		//annotations+=YAnnotTop*
		public Assignment getAnnotationsAssignment_3() { return cAnnotationsAssignment_3; }
		
		//YAnnotTop
		public RuleCall getAnnotationsYAnnotTopParserRuleCall_3_0() { return cAnnotationsYAnnotTopParserRuleCall_3_0; }
		
		//classes+=YClass*
		public Assignment getClassesAssignment_4() { return cClassesAssignment_4; }
		
		//YClass
		public RuleCall getClassesYClassParserRuleCall_4_0() { return cClassesYClassParserRuleCall_4_0; }
	}
	public class YPackageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YPackageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYPackageDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//YPackageDeclaration:
		//	{YPackageDeclaration} 'package' name=QualifiedName;
		@Override public ParserRule getRule() { return rule; }
		
		//{YPackageDeclaration} 'package' name=QualifiedName
		public Group getGroup() { return cGroup; }
		
		//{YPackageDeclaration}
		public Action getYPackageDeclarationAction_0() { return cYPackageDeclarationAction_0; }
		
		//'package'
		public Keyword getPackageKeyword_1() { return cPackageKeyword_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
	}
	public class YArgumentValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YArgumentValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//YArgumentValue:
		//	INT | STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}
	public class YClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYClassAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperclassAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSuperclassJvmTypeReferenceParserRuleCall_3_1_0 = (RuleCall)cSuperclassAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEntityRefAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cEntityRefYAnnotEntityCrossReference_4_1_0 = (CrossReference)cEntityRefAssignment_4_1.eContents().get(0);
		private final RuleCall cEntityRefYAnnotEntityQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cEntityRefYAnnotEntityCrossReference_4_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMembersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMembersYMemberParserRuleCall_6_0 = (RuleCall)cMembersAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//YClass:
		//	{YClass} 'class' name=ValidID (':' superclass=JvmTypeReference)? ('->' entityRef=[YAnnotEntity|QualifiedName])?
		//	'{'
		//	members+=YMember*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{YClass} 'class' name=ValidID (':' superclass=JvmTypeReference)? ('->' entityRef=[YAnnotEntity|QualifiedName])? '{'
		//members+=YMember* '}'
		public Group getGroup() { return cGroup; }
		
		//{YClass}
		public Action getYClassAction_0() { return cYClassAction_0; }
		
		//'class'
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//(':' superclass=JvmTypeReference)?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//superclass=JvmTypeReference
		public Assignment getSuperclassAssignment_3_1() { return cSuperclassAssignment_3_1; }
		
		//JvmTypeReference
		public RuleCall getSuperclassJvmTypeReferenceParserRuleCall_3_1_0() { return cSuperclassJvmTypeReferenceParserRuleCall_3_1_0; }
		
		//('->' entityRef=[YAnnotEntity|QualifiedName])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_4_0() { return cHyphenMinusGreaterThanSignKeyword_4_0; }
		
		//entityRef=[YAnnotEntity|QualifiedName]
		public Assignment getEntityRefAssignment_4_1() { return cEntityRefAssignment_4_1; }
		
		//[YAnnotEntity|QualifiedName]
		public CrossReference getEntityRefYAnnotEntityCrossReference_4_1_0() { return cEntityRefYAnnotEntityCrossReference_4_1_0; }
		
		//QualifiedName
		public RuleCall getEntityRefYAnnotEntityQualifiedNameParserRuleCall_4_1_0_1() { return cEntityRefYAnnotEntityQualifiedNameParserRuleCall_4_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//members+=YMember*
		public Assignment getMembersAssignment_6() { return cMembersAssignment_6; }
		
		//YMember
		public RuleCall getMembersYMemberParserRuleCall_6_0() { return cMembersYMemberParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class YMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cYClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cYPropertyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cYFunctionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//YMember:
		//	YClass | YProperty | YFunction;
		@Override public ParserRule getRule() { return rule; }
		
		//YClass | YProperty | YFunction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//YClass
		public RuleCall getYClassParserRuleCall_0() { return cYClassParserRuleCall_0; }
		
		//YProperty
		public RuleCall getYPropertyParserRuleCall_1() { return cYPropertyParserRuleCall_1; }
		
		//YFunction
		public RuleCall getYFunctionParserRuleCall_2() { return cYFunctionParserRuleCall_2; }
	}
	public class YPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAccessAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAccessYAccessLevelEnumRuleCall_0_0 = (RuleCall)cAccessAssignment_0.eContents().get(0);
		private final Keyword cVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Assignment cTuplesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTuplesYTuplesParserRuleCall_5_0 = (RuleCall)cTuplesAssignment_5.eContents().get(0);
		private final Assignment cOptionalAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Keyword cOptionalQuestionMarkKeyword_6_0 = (Keyword)cOptionalAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cAttrRefAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cAttrRefYAnnotAttrCrossReference_7_1_0 = (CrossReference)cAttrRefAssignment_7_1.eContents().get(0);
		private final RuleCall cAttrRefYAnnotAttrQualifiedNameParserRuleCall_7_1_0_1 = (RuleCall)cAttrRefYAnnotAttrCrossReference_7_1_0.eContents().get(1);
		private final Assignment cAnnotationsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cAnnotationsYAnnotParserRuleCall_8_0 = (RuleCall)cAnnotationsAssignment_8.eContents().get(0);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//YProperty:
		//	access=YAccessLevel? 'var' name=ValidID ':' type=JvmTypeReference tuples=YTuples? optional?='?'? ('->'
		//	attrRef=[YAnnotAttr|QualifiedName])?
		//	annotations+=YAnnot* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//access=YAccessLevel? 'var' name=ValidID ':' type=JvmTypeReference tuples=YTuples? optional?='?'? ('->'
		//attrRef=[YAnnotAttr|QualifiedName])? annotations+=YAnnot* ';'
		public Group getGroup() { return cGroup; }
		
		//access=YAccessLevel?
		public Assignment getAccessAssignment_0() { return cAccessAssignment_0; }
		
		//YAccessLevel
		public RuleCall getAccessYAccessLevelEnumRuleCall_0_0() { return cAccessYAccessLevelEnumRuleCall_0_0; }
		
		//'var'
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//type=JvmTypeReference
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_4_0() { return cTypeJvmTypeReferenceParserRuleCall_4_0; }
		
		//tuples=YTuples?
		public Assignment getTuplesAssignment_5() { return cTuplesAssignment_5; }
		
		//YTuples
		public RuleCall getTuplesYTuplesParserRuleCall_5_0() { return cTuplesYTuplesParserRuleCall_5_0; }
		
		//optional?='?'?
		public Assignment getOptionalAssignment_6() { return cOptionalAssignment_6; }
		
		//'?'
		public Keyword getOptionalQuestionMarkKeyword_6_0() { return cOptionalQuestionMarkKeyword_6_0; }
		
		//('->' attrRef=[YAnnotAttr|QualifiedName])?
		public Group getGroup_7() { return cGroup_7; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_7_0() { return cHyphenMinusGreaterThanSignKeyword_7_0; }
		
		//attrRef=[YAnnotAttr|QualifiedName]
		public Assignment getAttrRefAssignment_7_1() { return cAttrRefAssignment_7_1; }
		
		//[YAnnotAttr|QualifiedName]
		public CrossReference getAttrRefYAnnotAttrCrossReference_7_1_0() { return cAttrRefYAnnotAttrCrossReference_7_1_0; }
		
		//QualifiedName
		public RuleCall getAttrRefYAnnotAttrQualifiedNameParserRuleCall_7_1_0_1() { return cAttrRefYAnnotAttrQualifiedNameParserRuleCall_7_1_0_1; }
		
		//annotations+=YAnnot*
		public Assignment getAnnotationsAssignment_8() { return cAnnotationsAssignment_8; }
		
		//YAnnot
		public RuleCall getAnnotationsYAnnotParserRuleCall_8_0() { return cAnnotationsYAnnotParserRuleCall_8_0; }
		
		//';'
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}
	public class YTuplesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YTuples");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYTuplesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cIncludesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cIncludesYPropertyCrossReference_2_0_0 = (CrossReference)cIncludesAssignment_2_0.eContents().get(0);
		private final RuleCall cIncludesYPropertyIDTerminalRuleCall_2_0_0_1 = (RuleCall)cIncludesYPropertyCrossReference_2_0_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cIncludesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final CrossReference cIncludesYPropertyCrossReference_2_1_1_0 = (CrossReference)cIncludesAssignment_2_1_1.eContents().get(0);
		private final RuleCall cIncludesYPropertyIDTerminalRuleCall_2_1_1_0_1 = (RuleCall)cIncludesYPropertyCrossReference_2_1_1_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//YTuples:
		//	{YTuples} '<' (includes+=[YProperty] (',' includes+=[YProperty])*)? '>';
		@Override public ParserRule getRule() { return rule; }
		
		//{YTuples} '<' (includes+=[YProperty] (',' includes+=[YProperty])*)? '>'
		public Group getGroup() { return cGroup; }
		
		//{YTuples}
		public Action getYTuplesAction_0() { return cYTuplesAction_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//(includes+=[YProperty] (',' includes+=[YProperty])*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//includes+=[YProperty]
		public Assignment getIncludesAssignment_2_0() { return cIncludesAssignment_2_0; }
		
		//[YProperty]
		public CrossReference getIncludesYPropertyCrossReference_2_0_0() { return cIncludesYPropertyCrossReference_2_0_0; }
		
		//ID
		public RuleCall getIncludesYPropertyIDTerminalRuleCall_2_0_0_1() { return cIncludesYPropertyIDTerminalRuleCall_2_0_0_1; }
		
		//(',' includes+=[YProperty])*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//includes+=[YProperty]
		public Assignment getIncludesAssignment_2_1_1() { return cIncludesAssignment_2_1_1; }
		
		//[YProperty]
		public CrossReference getIncludesYPropertyCrossReference_2_1_1_0() { return cIncludesYPropertyCrossReference_2_1_1_0; }
		
		//ID
		public RuleCall getIncludesYPropertyIDTerminalRuleCall_2_1_1_0_1() { return cIncludesYPropertyIDTerminalRuleCall_2_1_1_0_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}
	public class YFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAccessAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAccessYAccessLevelEnumRuleCall_0_0 = (RuleCall)cAccessAssignment_0.eContents().get(0);
		private final Keyword cFuncKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParamsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParamsJvmTypeReferenceParserRuleCall_4_0_0 = (RuleCall)cParamsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParamsJvmTypeReferenceParserRuleCall_4_1_1_0 = (RuleCall)cParamsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cTypeAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_6_1_0 = (RuleCall)cTypeAssignment_6_1.eContents().get(0);
		private final Assignment cBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_7_0 = (RuleCall)cBodyAssignment_7.eContents().get(0);
		
		//YFunction:
		//	access=YAccessLevel? 'func' name=ValidID
		//	'(' (params+=JvmTypeReference (',' params+=JvmTypeReference)*)? ')' ('->' type=JvmTypeReference)?
		//	body=XBlockExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//access=YAccessLevel? 'func' name=ValidID '(' (params+=JvmTypeReference (',' params+=JvmTypeReference)*)? ')' ('->'
		//type=JvmTypeReference)? body=XBlockExpression
		public Group getGroup() { return cGroup; }
		
		//access=YAccessLevel?
		public Assignment getAccessAssignment_0() { return cAccessAssignment_0; }
		
		//YAccessLevel
		public RuleCall getAccessYAccessLevelEnumRuleCall_0_0() { return cAccessYAccessLevelEnumRuleCall_0_0; }
		
		//'func'
		public Keyword getFuncKeyword_1() { return cFuncKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(params+=JvmTypeReference (',' params+=JvmTypeReference)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//params+=JvmTypeReference
		public Assignment getParamsAssignment_4_0() { return cParamsAssignment_4_0; }
		
		//JvmTypeReference
		public RuleCall getParamsJvmTypeReferenceParserRuleCall_4_0_0() { return cParamsJvmTypeReferenceParserRuleCall_4_0_0; }
		
		//(',' params+=JvmTypeReference)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//params+=JvmTypeReference
		public Assignment getParamsAssignment_4_1_1() { return cParamsAssignment_4_1_1; }
		
		//JvmTypeReference
		public RuleCall getParamsJvmTypeReferenceParserRuleCall_4_1_1_0() { return cParamsJvmTypeReferenceParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//('->' type=JvmTypeReference)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_6_0() { return cHyphenMinusGreaterThanSignKeyword_6_0; }
		
		//type=JvmTypeReference
		public Assignment getTypeAssignment_6_1() { return cTypeAssignment_6_1; }
		
		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_6_1_0() { return cTypeJvmTypeReferenceParserRuleCall_6_1_0; }
		
		//body=XBlockExpression
		public Assignment getBodyAssignment_7() { return cBodyAssignment_7; }
		
		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_7_0() { return cBodyXBlockExpressionParserRuleCall_7_0; }
	}
	public class YReadStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YReadStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYReadStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDbReadKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStructsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStructsYStructRefPairParserRuleCall_2_0 = (RuleCall)cStructsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cStructsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cStructsYStructRefPairParserRuleCall_3_1_0 = (RuleCall)cStructsAssignment_3_1.eContents().get(0);
		private final Assignment cJoinclauseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cJoinclauseYJoinParserRuleCall_4_0 = (RuleCall)cJoinclauseAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cWhereKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cWhereclauseAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cWhereclauseXExpressionParserRuleCall_5_1_0 = (RuleCall)cWhereclauseAssignment_5_1.eContents().get(0);
		private final Keyword cSuccessKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cSuccessExpressionsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cSuccessExpressionsXExpressionParserRuleCall_8_0 = (RuleCall)cSuccessExpressionsAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cNotKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cFoundKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cLeftCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cNotfoundExpressionsAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cNotfoundExpressionsXExpressionParserRuleCall_13_0 = (RuleCall)cNotfoundExpressionsAssignment_13.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//YReadStatement XExpression:
		//	{YReadStatement} 'db-read' structs+=YStructRefPair (',' structs+=YStructRefPair)*
		//	joinclause=YJoin? ('where' whereclause=XExpression)?
		//	'success' '{'
		//	successExpressions+=XExpression*
		//	'}' 'not' 'found' '{'
		//	notfoundExpressions+=XExpression*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{YReadStatement} 'db-read' structs+=YStructRefPair (',' structs+=YStructRefPair)* joinclause=YJoin? ('where'
		//whereclause=XExpression)? 'success' '{' successExpressions+=XExpression* '}' 'not' 'found' '{'
		//notfoundExpressions+=XExpression* '}'
		public Group getGroup() { return cGroup; }
		
		//{YReadStatement}
		public Action getYReadStatementAction_0() { return cYReadStatementAction_0; }
		
		//'db-read'
		public Keyword getDbReadKeyword_1() { return cDbReadKeyword_1; }
		
		//structs+=YStructRefPair
		public Assignment getStructsAssignment_2() { return cStructsAssignment_2; }
		
		//YStructRefPair
		public RuleCall getStructsYStructRefPairParserRuleCall_2_0() { return cStructsYStructRefPairParserRuleCall_2_0; }
		
		//(',' structs+=YStructRefPair)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//structs+=YStructRefPair
		public Assignment getStructsAssignment_3_1() { return cStructsAssignment_3_1; }
		
		//YStructRefPair
		public RuleCall getStructsYStructRefPairParserRuleCall_3_1_0() { return cStructsYStructRefPairParserRuleCall_3_1_0; }
		
		//joinclause=YJoin?
		public Assignment getJoinclauseAssignment_4() { return cJoinclauseAssignment_4; }
		
		//YJoin
		public RuleCall getJoinclauseYJoinParserRuleCall_4_0() { return cJoinclauseYJoinParserRuleCall_4_0; }
		
		//('where' whereclause=XExpression)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'where'
		public Keyword getWhereKeyword_5_0() { return cWhereKeyword_5_0; }
		
		//whereclause=XExpression
		public Assignment getWhereclauseAssignment_5_1() { return cWhereclauseAssignment_5_1; }
		
		//XExpression
		public RuleCall getWhereclauseXExpressionParserRuleCall_5_1_0() { return cWhereclauseXExpressionParserRuleCall_5_1_0; }
		
		//'success'
		public Keyword getSuccessKeyword_6() { return cSuccessKeyword_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//successExpressions+=XExpression*
		public Assignment getSuccessExpressionsAssignment_8() { return cSuccessExpressionsAssignment_8; }
		
		//XExpression
		public RuleCall getSuccessExpressionsXExpressionParserRuleCall_8_0() { return cSuccessExpressionsXExpressionParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
		
		//'not'
		public Keyword getNotKeyword_10() { return cNotKeyword_10; }
		
		//'found'
		public Keyword getFoundKeyword_11() { return cFoundKeyword_11; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_12() { return cLeftCurlyBracketKeyword_12; }
		
		//notfoundExpressions+=XExpression*
		public Assignment getNotfoundExpressionsAssignment_13() { return cNotfoundExpressionsAssignment_13; }
		
		//XExpression
		public RuleCall getNotfoundExpressionsXExpressionParserRuleCall_13_0() { return cNotfoundExpressionsXExpressionParserRuleCall_13_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
	}
	public class YReadEachStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YReadEachStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReadeachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStructsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStructsYStructRefPairParserRuleCall_1_0 = (RuleCall)cStructsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStructsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStructsYStructRefPairParserRuleCall_2_1_0 = (RuleCall)cStructsAssignment_2_1.eContents().get(0);
		private final Assignment cJoinclauseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cJoinclauseYJoinParserRuleCall_3_0 = (RuleCall)cJoinclauseAssignment_3.eContents().get(0);
		private final Assignment cWhereclauseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cWhereclauseXExpressionParserRuleCall_4_0 = (RuleCall)cWhereclauseAssignment_4.eContents().get(0);
		private final Keyword cTargetKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTargetAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cTargetYPropertyCrossReference_6_0 = (CrossReference)cTargetAssignment_6.eContents().get(0);
		private final RuleCall cTargetYPropertyIDTerminalRuleCall_6_0_1 = (RuleCall)cTargetYPropertyCrossReference_6_0.eContents().get(1);
		private final Assignment cSuccessAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSuccessXBlockExpressionParserRuleCall_7_0 = (RuleCall)cSuccessAssignment_7.eContents().get(0);
		
		//YReadEachStatement:
		//	'readeach' structs+=YStructRefPair (',' structs+=YStructRefPair)* joinclause=YJoin? whereclause=XExpression?
		//	'target' target=[YProperty] success=XBlockExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'readeach' structs+=YStructRefPair (',' structs+=YStructRefPair)* joinclause=YJoin? whereclause=XExpression? 'target'
		//target=[YProperty] success=XBlockExpression
		public Group getGroup() { return cGroup; }
		
		//'readeach'
		public Keyword getReadeachKeyword_0() { return cReadeachKeyword_0; }
		
		//structs+=YStructRefPair
		public Assignment getStructsAssignment_1() { return cStructsAssignment_1; }
		
		//YStructRefPair
		public RuleCall getStructsYStructRefPairParserRuleCall_1_0() { return cStructsYStructRefPairParserRuleCall_1_0; }
		
		//(',' structs+=YStructRefPair)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//structs+=YStructRefPair
		public Assignment getStructsAssignment_2_1() { return cStructsAssignment_2_1; }
		
		//YStructRefPair
		public RuleCall getStructsYStructRefPairParserRuleCall_2_1_0() { return cStructsYStructRefPairParserRuleCall_2_1_0; }
		
		//joinclause=YJoin?
		public Assignment getJoinclauseAssignment_3() { return cJoinclauseAssignment_3; }
		
		//YJoin
		public RuleCall getJoinclauseYJoinParserRuleCall_3_0() { return cJoinclauseYJoinParserRuleCall_3_0; }
		
		//whereclause=XExpression?
		public Assignment getWhereclauseAssignment_4() { return cWhereclauseAssignment_4; }
		
		//XExpression
		public RuleCall getWhereclauseXExpressionParserRuleCall_4_0() { return cWhereclauseXExpressionParserRuleCall_4_0; }
		
		//'target'
		public Keyword getTargetKeyword_5() { return cTargetKeyword_5; }
		
		//target=[YProperty]
		public Assignment getTargetAssignment_6() { return cTargetAssignment_6; }
		
		//[YProperty]
		public CrossReference getTargetYPropertyCrossReference_6_0() { return cTargetYPropertyCrossReference_6_0; }
		
		//ID
		public RuleCall getTargetYPropertyIDTerminalRuleCall_6_0_1() { return cTargetYPropertyIDTerminalRuleCall_6_0_1; }
		
		//success=XBlockExpression
		public Assignment getSuccessAssignment_7() { return cSuccessAssignment_7; }
		
		//XBlockExpression
		public RuleCall getSuccessXBlockExpressionParserRuleCall_7_0() { return cSuccessXBlockExpressionParserRuleCall_7_0; }
	}
	public class YCreateStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YCreateStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYCreateStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDbCreateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStructAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStructYStructRefPairParserRuleCall_2_0 = (RuleCall)cStructAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSetExpressionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSetExpressionsXExpressionParserRuleCall_4_0 = (RuleCall)cSetExpressionsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSuccessKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cSuccessExpressionsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cSuccessExpressionsXExpressionParserRuleCall_8_0 = (RuleCall)cSuccessExpressionsAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cAlreadyKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cExistKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cLeftCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cAlreadyExistExpressionsAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cAlreadyExistExpressionsXExpressionParserRuleCall_13_0 = (RuleCall)cAlreadyExistExpressionsAssignment_13.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//YCreateStatement XExpression:
		//	{YCreateStatement} 'db-create' struct=YStructRefPair '{'
		//	setExpressions+=XExpression*
		//	'}' 'success' '{'
		//	successExpressions+=XExpression*
		//	'}' 'already' 'exist' '{'
		//	alreadyExistExpressions+=XExpression*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{YCreateStatement} 'db-create' struct=YStructRefPair '{' setExpressions+=XExpression* '}' 'success' '{'
		//successExpressions+=XExpression* '}' 'already' 'exist' '{' alreadyExistExpressions+=XExpression* '}'
		public Group getGroup() { return cGroup; }
		
		//{YCreateStatement}
		public Action getYCreateStatementAction_0() { return cYCreateStatementAction_0; }
		
		//'db-create'
		public Keyword getDbCreateKeyword_1() { return cDbCreateKeyword_1; }
		
		//struct=YStructRefPair
		public Assignment getStructAssignment_2() { return cStructAssignment_2; }
		
		//YStructRefPair
		public RuleCall getStructYStructRefPairParserRuleCall_2_0() { return cStructYStructRefPairParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//setExpressions+=XExpression*
		public Assignment getSetExpressionsAssignment_4() { return cSetExpressionsAssignment_4; }
		
		//XExpression
		public RuleCall getSetExpressionsXExpressionParserRuleCall_4_0() { return cSetExpressionsXExpressionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
		
		//'success'
		public Keyword getSuccessKeyword_6() { return cSuccessKeyword_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//successExpressions+=XExpression*
		public Assignment getSuccessExpressionsAssignment_8() { return cSuccessExpressionsAssignment_8; }
		
		//XExpression
		public RuleCall getSuccessExpressionsXExpressionParserRuleCall_8_0() { return cSuccessExpressionsXExpressionParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
		
		//'already'
		public Keyword getAlreadyKeyword_10() { return cAlreadyKeyword_10; }
		
		//'exist'
		public Keyword getExistKeyword_11() { return cExistKeyword_11; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_12() { return cLeftCurlyBracketKeyword_12; }
		
		//alreadyExistExpressions+=XExpression*
		public Assignment getAlreadyExistExpressionsAssignment_13() { return cAlreadyExistExpressionsAssignment_13; }
		
		//XExpression
		public RuleCall getAlreadyExistExpressionsXExpressionParserRuleCall_13_0() { return cAlreadyExistExpressionsXExpressionParserRuleCall_13_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
	}
	public class YUpdateStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YUpdateStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUpdateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStructAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStructYStructRefPairParserRuleCall_1_0 = (RuleCall)cStructAssignment_1.eContents().get(0);
		private final Assignment cSetBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSetBlockXBlockExpressionParserRuleCall_2_0 = (RuleCall)cSetBlockAssignment_2.eContents().get(0);
		private final Keyword cSuccessKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSuccessAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSuccessXBlockExpressionParserRuleCall_4_0 = (RuleCall)cSuccessAssignment_4.eContents().get(0);
		
		//YUpdateStatement:
		//	'update' struct=YStructRefPair
		//	setBlock=XBlockExpression
		//	'success' success=XBlockExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'update' struct=YStructRefPair setBlock=XBlockExpression 'success' success=XBlockExpression
		public Group getGroup() { return cGroup; }
		
		//'update'
		public Keyword getUpdateKeyword_0() { return cUpdateKeyword_0; }
		
		//struct=YStructRefPair
		public Assignment getStructAssignment_1() { return cStructAssignment_1; }
		
		//YStructRefPair
		public RuleCall getStructYStructRefPairParserRuleCall_1_0() { return cStructYStructRefPairParserRuleCall_1_0; }
		
		//setBlock=XBlockExpression
		public Assignment getSetBlockAssignment_2() { return cSetBlockAssignment_2; }
		
		//XBlockExpression
		public RuleCall getSetBlockXBlockExpressionParserRuleCall_2_0() { return cSetBlockXBlockExpressionParserRuleCall_2_0; }
		
		//'success'
		public Keyword getSuccessKeyword_3() { return cSuccessKeyword_3; }
		
		//success=XBlockExpression
		public Assignment getSuccessAssignment_4() { return cSuccessAssignment_4; }
		
		//XBlockExpression
		public RuleCall getSuccessXBlockExpressionParserRuleCall_4_0() { return cSuccessXBlockExpressionParserRuleCall_4_0; }
	}
	public class YDeleteStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YDeleteStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeleteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStructAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStructYStructRefPairParserRuleCall_1_0 = (RuleCall)cStructAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//YDeleteStatement:
		//	'delete' struct=YStructRefPair ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'delete' struct=YStructRefPair ';'
		public Group getGroup() { return cGroup; }
		
		//'delete'
		public Keyword getDeleteKeyword_0() { return cDeleteKeyword_0; }
		
		//struct=YStructRefPair
		public Assignment getStructAssignment_1() { return cStructAssignment_1; }
		
		//YStructRefPair
		public RuleCall getStructYStructRefPairParserRuleCall_1_0() { return cStructYStructRefPairParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class YAssociateStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAssociateStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssociateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cJoinrefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cJoinrefYJoinDefParserRuleCall_1_0 = (RuleCall)cJoinrefAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//YAssociateStatement:
		//	'associate' joinref=YJoinDef ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'associate' joinref=YJoinDef ';'
		public Group getGroup() { return cGroup; }
		
		//'associate'
		public Keyword getAssociateKeyword_0() { return cAssociateKeyword_0; }
		
		//joinref=YJoinDef
		public Assignment getJoinrefAssignment_1() { return cJoinrefAssignment_1; }
		
		//YJoinDef
		public RuleCall getJoinrefYJoinDefParserRuleCall_1_0() { return cJoinrefYJoinDefParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class YStructRefPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YStructRefPair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStructpropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cStructpropertyYPropertyCrossReference_0_0 = (CrossReference)cStructpropertyAssignment_0.eContents().get(0);
		private final RuleCall cStructpropertyYPropertyIDTerminalRuleCall_0_0_1 = (RuleCall)cStructpropertyYPropertyCrossReference_0_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStructclassAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cStructclassYAnnotEntityCrossReference_2_0 = (CrossReference)cStructclassAssignment_2.eContents().get(0);
		private final RuleCall cStructclassYAnnotEntityIDTerminalRuleCall_2_0_1 = (RuleCall)cStructclassYAnnotEntityCrossReference_2_0.eContents().get(1);
		
		//YStructRefPair:
		//	structproperty=[YProperty] '->' structclass=[YAnnotEntity];
		@Override public ParserRule getRule() { return rule; }
		
		//structproperty=[YProperty] '->' structclass=[YAnnotEntity]
		public Group getGroup() { return cGroup; }
		
		//structproperty=[YProperty]
		public Assignment getStructpropertyAssignment_0() { return cStructpropertyAssignment_0; }
		
		//[YProperty]
		public CrossReference getStructpropertyYPropertyCrossReference_0_0() { return cStructpropertyYPropertyCrossReference_0_0; }
		
		//ID
		public RuleCall getStructpropertyYPropertyIDTerminalRuleCall_0_0_1() { return cStructpropertyYPropertyIDTerminalRuleCall_0_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//structclass=[YAnnotEntity]
		public Assignment getStructclassAssignment_2() { return cStructclassAssignment_2; }
		
		//[YAnnotEntity]
		public CrossReference getStructclassYAnnotEntityCrossReference_2_0() { return cStructclassYAnnotEntityCrossReference_2_0; }
		
		//ID
		public RuleCall getStructclassYAnnotEntityIDTerminalRuleCall_2_0_1() { return cStructclassYAnnotEntityIDTerminalRuleCall_2_0_1; }
	}
	public class YJoinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YJoin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYJoinAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cJoinKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cJoindefsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cJoindefsYJoinDefParserRuleCall_2_0 = (RuleCall)cJoindefsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cJoindefsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cJoindefsYJoinDefParserRuleCall_3_1_0 = (RuleCall)cJoindefsAssignment_3_1.eContents().get(0);
		
		//YJoin:
		//	{YJoin} 'join' joindefs+=YJoinDef ("," joindefs+=YJoinDef)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{YJoin} 'join' joindefs+=YJoinDef ("," joindefs+=YJoinDef)*
		public Group getGroup() { return cGroup; }
		
		//{YJoin}
		public Action getYJoinAction_0() { return cYJoinAction_0; }
		
		//'join'
		public Keyword getJoinKeyword_1() { return cJoinKeyword_1; }
		
		//joindefs+=YJoinDef
		public Assignment getJoindefsAssignment_2() { return cJoindefsAssignment_2; }
		
		//YJoinDef
		public RuleCall getJoindefsYJoinDefParserRuleCall_2_0() { return cJoindefsYJoinDefParserRuleCall_2_0; }
		
		//("," joindefs+=YJoinDef)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//joindefs+=YJoinDef
		public Assignment getJoindefsAssignment_3_1() { return cJoindefsAssignment_3_1; }
		
		//YJoinDef
		public RuleCall getJoindefsYJoinDefParserRuleCall_3_1_0() { return cJoindefsYJoinDefParserRuleCall_3_1_0; }
	}
	public class YJoinDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YJoinDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromViewAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFromViewYPropertyCrossReference_0_0 = (CrossReference)cFromViewAssignment_0.eContents().get(0);
		private final RuleCall cFromViewYPropertyIDTerminalRuleCall_0_0_1 = (RuleCall)cFromViewYPropertyCrossReference_0_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRelRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRelRefYAnnotRelCrossReference_2_0 = (CrossReference)cRelRefAssignment_2.eContents().get(0);
		private final RuleCall cRelRefYAnnotRelQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cRelRefYAnnotRelCrossReference_2_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cToViewAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cToViewYPropertyCrossReference_4_0 = (CrossReference)cToViewAssignment_4.eContents().get(0);
		private final RuleCall cToViewYPropertyIDTerminalRuleCall_4_0_1 = (RuleCall)cToViewYPropertyCrossReference_4_0.eContents().get(1);
		
		//YJoinDef:
		//	fromView=[YProperty] '->' relRef=[YAnnotRel|QualifiedName] '->' toView=[YProperty];
		@Override public ParserRule getRule() { return rule; }
		
		//fromView=[YProperty] '->' relRef=[YAnnotRel|QualifiedName] '->' toView=[YProperty]
		public Group getGroup() { return cGroup; }
		
		//fromView=[YProperty]
		public Assignment getFromViewAssignment_0() { return cFromViewAssignment_0; }
		
		//[YProperty]
		public CrossReference getFromViewYPropertyCrossReference_0_0() { return cFromViewYPropertyCrossReference_0_0; }
		
		//ID
		public RuleCall getFromViewYPropertyIDTerminalRuleCall_0_0_1() { return cFromViewYPropertyIDTerminalRuleCall_0_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//relRef=[YAnnotRel|QualifiedName]
		public Assignment getRelRefAssignment_2() { return cRelRefAssignment_2; }
		
		//[YAnnotRel|QualifiedName]
		public CrossReference getRelRefYAnnotRelCrossReference_2_0() { return cRelRefYAnnotRelCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getRelRefYAnnotRelQualifiedNameParserRuleCall_2_0_1() { return cRelRefYAnnotRelQualifiedNameParserRuleCall_2_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//toView=[YProperty]
		public Assignment getToViewAssignment_4() { return cToViewAssignment_4; }
		
		//[YProperty]
		public CrossReference getToViewYPropertyCrossReference_4_0() { return cToViewYPropertyCrossReference_4_0; }
		
		//ID
		public RuleCall getToViewYPropertyIDTerminalRuleCall_4_0_1() { return cToViewYPropertyIDTerminalRuleCall_4_0_1; }
	}
	public class YWhereElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YWhere");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYWhereAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhereKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionXExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//YWhere XExpression:
		//	{YWhere} 'where' expression=XExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{YWhere} 'where' expression=XExpression
		public Group getGroup() { return cGroup; }
		
		//{YWhere}
		public Action getYWhereAction_0() { return cYWhereAction_0; }
		
		//'where'
		public Keyword getWhereKeyword_1() { return cWhereKeyword_1; }
		
		//expression=XExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_2_0() { return cExpressionXExpressionParserRuleCall_2_0; }
	}
	public class YAnnotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cTypeAlternatives_1_0 = (Alternatives)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeYAnnotLengthParserRuleCall_1_0_0 = (RuleCall)cTypeAlternatives_1_0.eContents().get(0);
		private final RuleCall cTypeYAnnotDecimalParserRuleCall_1_0_1 = (RuleCall)cTypeAlternatives_1_0.eContents().get(1);
		private final RuleCall cTypeYAnnotActionParserRuleCall_1_0_2 = (RuleCall)cTypeAlternatives_1_0.eContents().get(2);
		private final RuleCall cTypeYAnnotMessageParserRuleCall_1_0_3 = (RuleCall)cTypeAlternatives_1_0.eContents().get(3);
		private final RuleCall cTypeYAnnotMsgTypeParserRuleCall_1_0_4 = (RuleCall)cTypeAlternatives_1_0.eContents().get(4);
		private final RuleCall cTypeYAnnotDefaultParserRuleCall_1_0_5 = (RuleCall)cTypeAlternatives_1_0.eContents().get(5);
		private final RuleCall cTypeYAnnotMaxParserRuleCall_1_0_6 = (RuleCall)cTypeAlternatives_1_0.eContents().get(6);
		
		///*
		// * Predefined annotations
		// */ YAnnot:
		//	{YAnnot} type=(YAnnotLength | YAnnotDecimal | YAnnotAction | YAnnotMessage | YAnnotMsgType | YAnnotDefault |
		//	YAnnotMax);
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnot} type=(YAnnotLength | YAnnotDecimal | YAnnotAction | YAnnotMessage | YAnnotMsgType | YAnnotDefault | YAnnotMax)
		public Group getGroup() { return cGroup; }
		
		//{YAnnot}
		public Action getYAnnotAction_0() { return cYAnnotAction_0; }
		
		//type=(YAnnotLength | YAnnotDecimal | YAnnotAction | YAnnotMessage | YAnnotMsgType | YAnnotDefault | YAnnotMax)
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//(YAnnotLength | YAnnotDecimal | YAnnotAction | YAnnotMessage | YAnnotMsgType | YAnnotDefault | YAnnotMax)
		public Alternatives getTypeAlternatives_1_0() { return cTypeAlternatives_1_0; }
		
		//YAnnotLength
		public RuleCall getTypeYAnnotLengthParserRuleCall_1_0_0() { return cTypeYAnnotLengthParserRuleCall_1_0_0; }
		
		//YAnnotDecimal
		public RuleCall getTypeYAnnotDecimalParserRuleCall_1_0_1() { return cTypeYAnnotDecimalParserRuleCall_1_0_1; }
		
		//YAnnotAction
		public RuleCall getTypeYAnnotActionParserRuleCall_1_0_2() { return cTypeYAnnotActionParserRuleCall_1_0_2; }
		
		//YAnnotMessage
		public RuleCall getTypeYAnnotMessageParserRuleCall_1_0_3() { return cTypeYAnnotMessageParserRuleCall_1_0_3; }
		
		//YAnnotMsgType
		public RuleCall getTypeYAnnotMsgTypeParserRuleCall_1_0_4() { return cTypeYAnnotMsgTypeParserRuleCall_1_0_4; }
		
		//YAnnotDefault
		public RuleCall getTypeYAnnotDefaultParserRuleCall_1_0_5() { return cTypeYAnnotDefaultParserRuleCall_1_0_5; }
		
		//YAnnotMax
		public RuleCall getTypeYAnnotMaxParserRuleCall_1_0_6() { return cTypeYAnnotMaxParserRuleCall_1_0_6; }
	}
	public class YAnnotTopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotTop");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeYAnnotEntityParserRuleCall_0_0 = (RuleCall)cTypeAlternatives_0.eContents().get(0);
		private final RuleCall cTypeYAnnotTechnicalDesignParserRuleCall_0_1 = (RuleCall)cTypeAlternatives_0.eContents().get(1);
		private final RuleCall cTypeYAnnotSwiftParserRuleCall_0_2 = (RuleCall)cTypeAlternatives_0.eContents().get(2);
		private final RuleCall cTypeYAnnotJavaParserRuleCall_0_3 = (RuleCall)cTypeAlternatives_0.eContents().get(3);
		private final RuleCall cTypeYAnnotDatabaseParserRuleCall_0_4 = (RuleCall)cTypeAlternatives_0.eContents().get(4);
		
		//YAnnotTop:
		//	type=(YAnnotEntity | YAnnotTechnicalDesign | YAnnotSwift | YAnnotJava | YAnnotDatabase);
		@Override public ParserRule getRule() { return rule; }
		
		//type=(YAnnotEntity | YAnnotTechnicalDesign | YAnnotSwift | YAnnotJava | YAnnotDatabase)
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//(YAnnotEntity | YAnnotTechnicalDesign | YAnnotSwift | YAnnotJava | YAnnotDatabase)
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }
		
		//YAnnotEntity
		public RuleCall getTypeYAnnotEntityParserRuleCall_0_0() { return cTypeYAnnotEntityParserRuleCall_0_0; }
		
		//YAnnotTechnicalDesign
		public RuleCall getTypeYAnnotTechnicalDesignParserRuleCall_0_1() { return cTypeYAnnotTechnicalDesignParserRuleCall_0_1; }
		
		//YAnnotSwift
		public RuleCall getTypeYAnnotSwiftParserRuleCall_0_2() { return cTypeYAnnotSwiftParserRuleCall_0_2; }
		
		//YAnnotJava
		public RuleCall getTypeYAnnotJavaParserRuleCall_0_3() { return cTypeYAnnotJavaParserRuleCall_0_3; }
		
		//YAnnotDatabase
		public RuleCall getTypeYAnnotDatabaseParserRuleCall_0_4() { return cTypeYAnnotDatabaseParserRuleCall_0_4; }
	}
	public class YAnnotLengthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotLength");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotLengthAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLengthKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLengthAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLengthINTTerminalRuleCall_3_0 = (RuleCall)cLengthAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//YAnnotLength YAnnot:
		//	{YAnnotLength} '@length' '(' length=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotLength} '@length' '(' length=INT ')'
		public Group getGroup() { return cGroup; }
		
		//{YAnnotLength}
		public Action getYAnnotLengthAction_0() { return cYAnnotLengthAction_0; }
		
		//'@length'
		public Keyword getLengthKeyword_1() { return cLengthKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//length=INT
		public Assignment getLengthAssignment_3() { return cLengthAssignment_3; }
		
		//INT
		public RuleCall getLengthINTTerminalRuleCall_3_0() { return cLengthINTTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class YAnnotMaxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotMax");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotMaxAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMaxKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLengthAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLengthINTTerminalRuleCall_3_0 = (RuleCall)cLengthAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//YAnnotMax YAnnot:
		//	{YAnnotMax} '@max' '(' length=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotMax} '@max' '(' length=INT ')'
		public Group getGroup() { return cGroup; }
		
		//{YAnnotMax}
		public Action getYAnnotMaxAction_0() { return cYAnnotMaxAction_0; }
		
		//'@max'
		public Keyword getMaxKeyword_1() { return cMaxKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//length=INT
		public Assignment getLengthAssignment_3() { return cLengthAssignment_3; }
		
		//INT
		public RuleCall getLengthINTTerminalRuleCall_3_0() { return cLengthINTTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class YAnnotDecimalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotDecimal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotDecimalAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDecimalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLengthAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLengthINTTerminalRuleCall_3_0 = (RuleCall)cLengthAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDecimalAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDecimalINTTerminalRuleCall_5_0 = (RuleCall)cDecimalAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//YAnnotDecimal YAnnot:
		//	{YAnnotDecimal} '@decimal' '(' length=INT ',' decimal=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotDecimal} '@decimal' '(' length=INT ',' decimal=INT ')'
		public Group getGroup() { return cGroup; }
		
		//{YAnnotDecimal}
		public Action getYAnnotDecimalAction_0() { return cYAnnotDecimalAction_0; }
		
		//'@decimal'
		public Keyword getDecimalKeyword_1() { return cDecimalKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//length=INT
		public Assignment getLengthAssignment_3() { return cLengthAssignment_3; }
		
		//INT
		public RuleCall getLengthINTTerminalRuleCall_3_0() { return cLengthINTTerminalRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//decimal=INT
		public Assignment getDecimalAssignment_5() { return cDecimalAssignment_5; }
		
		//INT
		public RuleCall getDecimalINTTerminalRuleCall_5_0() { return cDecimalINTTerminalRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class YAnnotDefaultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotDefault");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotDefaultAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDefaultKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeYAnnotDefaultTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//YAnnotDefault YAnnot:
		//	{YAnnotDefault} '@default' '(' type=YAnnotDefaultType ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotDefault} '@default' '(' type=YAnnotDefaultType ')'
		public Group getGroup() { return cGroup; }
		
		//{YAnnotDefault}
		public Action getYAnnotDefaultAction_0() { return cYAnnotDefaultAction_0; }
		
		//'@default'
		public Keyword getDefaultKeyword_1() { return cDefaultKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//type=YAnnotDefaultType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//YAnnotDefaultType
		public RuleCall getTypeYAnnotDefaultTypeParserRuleCall_3_0() { return cTypeYAnnotDefaultTypeParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class YAnnotDefaultTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotDefaultType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cYAnnotDefaultTextParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cYAnnotDefaultNumberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//YAnnotDefaultType:
		//	YAnnotDefaultText | YAnnotDefaultNumber;
		@Override public ParserRule getRule() { return rule; }
		
		//YAnnotDefaultText | YAnnotDefaultNumber
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//YAnnotDefaultText
		public RuleCall getYAnnotDefaultTextParserRuleCall_0() { return cYAnnotDefaultTextParserRuleCall_0; }
		
		//YAnnotDefaultNumber
		public RuleCall getYAnnotDefaultNumberParserRuleCall_1() { return cYAnnotDefaultNumberParserRuleCall_1; }
	}
	public class YAnnotDefaultTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotDefaultText");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//YAnnotDefaultText:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class YAnnotDefaultNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotDefaultNumber");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//YAnnotDefaultNumber:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class YAnnotActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cActionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionValidIDParserRuleCall_3_0 = (RuleCall)cActionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//YAnnotAction YAnnot:
		//	{YAnnotAction} '@action' '(' action=ValidID ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotAction} '@action' '(' action=ValidID ')'
		public Group getGroup() { return cGroup; }
		
		//{YAnnotAction}
		public Action getYAnnotActionAction_0() { return cYAnnotActionAction_0; }
		
		//'@action'
		public Keyword getActionKeyword_1() { return cActionKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//action=ValidID
		public Assignment getActionAssignment_3() { return cActionAssignment_3; }
		
		//ValidID
		public RuleCall getActionValidIDParserRuleCall_3_0() { return cActionValidIDParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class YAnnotMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotMessageAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMessageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMsgAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMsgSTRINGTerminalRuleCall_3_0 = (RuleCall)cMsgAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//YAnnotMessage YAnnot:
		//	{YAnnotMessage} '@message' '(' msg=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotMessage} '@message' '(' msg=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//{YAnnotMessage}
		public Action getYAnnotMessageAction_0() { return cYAnnotMessageAction_0; }
		
		//'@message'
		public Keyword getMessageKeyword_1() { return cMessageKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//msg=STRING
		public Assignment getMsgAssignment_3() { return cMsgAssignment_3; }
		
		//STRING
		public RuleCall getMsgSTRINGTerminalRuleCall_3_0() { return cMsgSTRINGTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class YAnnotMsgTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotMsgType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMsgtypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMsgtypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMsgtypeValidIDParserRuleCall_2_0 = (RuleCall)cMsgtypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//YAnnotMsgType YAnnot:
		//	'@msgtype' '(' msgtype=ValidID ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'@msgtype' '(' msgtype=ValidID ')'
		public Group getGroup() { return cGroup; }
		
		//'@msgtype'
		public Keyword getMsgtypeKeyword_0() { return cMsgtypeKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//msgtype=ValidID
		public Assignment getMsgtypeAssignment_2() { return cMsgtypeAssignment_2; }
		
		//ValidID
		public RuleCall getMsgtypeValidIDParserRuleCall_2_0() { return cMsgtypeValidIDParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class YAnnotEntityInnerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotEntityInner");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cYAnnotAttrParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cYAnnotRelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cYAnnotIdParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//YAnnotEntityInner:
		//	YAnnotAttr | YAnnotRel | YAnnotId;
		@Override public ParserRule getRule() { return rule; }
		
		//YAnnotAttr | YAnnotRel | YAnnotId
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//YAnnotAttr
		public RuleCall getYAnnotAttrParserRuleCall_0() { return cYAnnotAttrParserRuleCall_0; }
		
		//YAnnotRel
		public RuleCall getYAnnotRelParserRuleCall_1() { return cYAnnotRelParserRuleCall_1; }
		
		//YAnnotId
		public RuleCall getYAnnotIdParserRuleCall_2() { return cYAnnotIdParserRuleCall_2; }
	}
	public class YAnnotEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotEntity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperannotAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperannotYAnnotEntityCrossReference_2_1_0 = (CrossReference)cSuperannotAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperannotYAnnotEntityQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cSuperannotYAnnotEntityCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAnnotsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAnnotsYAnnotEntityInnerParserRuleCall_4_0 = (RuleCall)cAnnotsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//YAnnotEntity:
		//	'@entity' name=ValidID (':' superannot=[YAnnotEntity|QualifiedName])? '{'
		//	annots+=YAnnotEntityInner*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'@entity' name=ValidID (':' superannot=[YAnnotEntity|QualifiedName])? '{' annots+=YAnnotEntityInner* '}'
		public Group getGroup() { return cGroup; }
		
		//'@entity'
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//(':' superannot=[YAnnotEntity|QualifiedName])?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//superannot=[YAnnotEntity|QualifiedName]
		public Assignment getSuperannotAssignment_2_1() { return cSuperannotAssignment_2_1; }
		
		//[YAnnotEntity|QualifiedName]
		public CrossReference getSuperannotYAnnotEntityCrossReference_2_1_0() { return cSuperannotYAnnotEntityCrossReference_2_1_0; }
		
		//QualifiedName
		public RuleCall getSuperannotYAnnotEntityQualifiedNameParserRuleCall_2_1_0_1() { return cSuperannotYAnnotEntityQualifiedNameParserRuleCall_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//annots+=YAnnotEntityInner*
		public Assignment getAnnotsAssignment_4() { return cAnnotsAssignment_4; }
		
		//YAnnotEntityInner
		public RuleCall getAnnotsYAnnotEntityInnerParserRuleCall_4_0() { return cAnnotsYAnnotEntityInnerParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class YAnnotAttrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotAttr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotAttrAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAttrKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cYclassAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cYclassJvmTypeReferenceParserRuleCall_4_0 = (RuleCall)cYclassAssignment_4.eContents().get(0);
		private final Assignment cOptionalAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cOptionalQuestionMarkKeyword_5_0 = (Keyword)cOptionalAssignment_5.eContents().get(0);
		private final Assignment cAnnotsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAnnotsYAnnotParserRuleCall_6_0 = (RuleCall)cAnnotsAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//YAnnotAttr:
		//	{YAnnotAttr} '@attr' name=ValidID ':' yclass=JvmTypeReference optional='?'? annots+=YAnnot* ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotAttr} '@attr' name=ValidID ':' yclass=JvmTypeReference optional='?'? annots+=YAnnot* ';'?
		public Group getGroup() { return cGroup; }
		
		//{YAnnotAttr}
		public Action getYAnnotAttrAction_0() { return cYAnnotAttrAction_0; }
		
		//'@attr'
		public Keyword getAttrKeyword_1() { return cAttrKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//yclass=JvmTypeReference
		public Assignment getYclassAssignment_4() { return cYclassAssignment_4; }
		
		//JvmTypeReference
		public RuleCall getYclassJvmTypeReferenceParserRuleCall_4_0() { return cYclassJvmTypeReferenceParserRuleCall_4_0; }
		
		//optional='?'?
		public Assignment getOptionalAssignment_5() { return cOptionalAssignment_5; }
		
		//'?'
		public Keyword getOptionalQuestionMarkKeyword_5_0() { return cOptionalQuestionMarkKeyword_5_0; }
		
		//annots+=YAnnot*
		public Assignment getAnnotsAssignment_6() { return cAnnotsAssignment_6; }
		
		//YAnnot
		public RuleCall getAnnotsYAnnotParserRuleCall_6_0() { return cAnnotsYAnnotParserRuleCall_6_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class YAnnotRelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotRel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotRelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cParentParentKeyword_2_0 = (Keyword)cParentAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cOptionalAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cOptionalQuestionMarkKeyword_4_0 = (Keyword)cOptionalAssignment_4.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTargetAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cTargetYAnnotEntityCrossReference_6_0 = (CrossReference)cTargetAssignment_6.eContents().get(0);
		private final RuleCall cTargetYAnnotEntityQualifiedNameParserRuleCall_6_0_1 = (RuleCall)cTargetYAnnotEntityCrossReference_6_0.eContents().get(1);
		private final Assignment cManyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Keyword cManyAsteriskKeyword_7_0 = (Keyword)cManyAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cLessThanSignHyphenMinusKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cInverseAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final CrossReference cInverseYAnnotRelCrossReference_8_1_0 = (CrossReference)cInverseAssignment_8_1.eContents().get(0);
		private final RuleCall cInverseYAnnotRelQualifiedNameParserRuleCall_8_1_0_1 = (RuleCall)cInverseYAnnotRelCrossReference_8_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//YAnnotRel:
		//	{YAnnotRel} '@rel' parent?='@parent'? name=ValidID optional?='?'? '->' target=[YAnnotEntity|QualifiedName] many?='*'?
		//	('<-'
		//	inverse=[YAnnotRel|QualifiedName])? ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotRel} '@rel' parent?='@parent'? name=ValidID optional?='?'? '->' target=[YAnnotEntity|QualifiedName] many?='*'?
		//('<-' inverse=[YAnnotRel|QualifiedName])? ';'?
		public Group getGroup() { return cGroup; }
		
		//{YAnnotRel}
		public Action getYAnnotRelAction_0() { return cYAnnotRelAction_0; }
		
		//'@rel'
		public Keyword getRelKeyword_1() { return cRelKeyword_1; }
		
		//parent?='@parent'?
		public Assignment getParentAssignment_2() { return cParentAssignment_2; }
		
		//'@parent'
		public Keyword getParentParentKeyword_2_0() { return cParentParentKeyword_2_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_3_0() { return cNameValidIDParserRuleCall_3_0; }
		
		//optional?='?'?
		public Assignment getOptionalAssignment_4() { return cOptionalAssignment_4; }
		
		//'?'
		public Keyword getOptionalQuestionMarkKeyword_4_0() { return cOptionalQuestionMarkKeyword_4_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_5() { return cHyphenMinusGreaterThanSignKeyword_5; }
		
		//target=[YAnnotEntity|QualifiedName]
		public Assignment getTargetAssignment_6() { return cTargetAssignment_6; }
		
		//[YAnnotEntity|QualifiedName]
		public CrossReference getTargetYAnnotEntityCrossReference_6_0() { return cTargetYAnnotEntityCrossReference_6_0; }
		
		//QualifiedName
		public RuleCall getTargetYAnnotEntityQualifiedNameParserRuleCall_6_0_1() { return cTargetYAnnotEntityQualifiedNameParserRuleCall_6_0_1; }
		
		//many?='*'?
		public Assignment getManyAssignment_7() { return cManyAssignment_7; }
		
		//'*'
		public Keyword getManyAsteriskKeyword_7_0() { return cManyAsteriskKeyword_7_0; }
		
		//('<-' inverse=[YAnnotRel|QualifiedName])?
		public Group getGroup_8() { return cGroup_8; }
		
		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_8_0() { return cLessThanSignHyphenMinusKeyword_8_0; }
		
		//inverse=[YAnnotRel|QualifiedName]
		public Assignment getInverseAssignment_8_1() { return cInverseAssignment_8_1; }
		
		//[YAnnotRel|QualifiedName]
		public CrossReference getInverseYAnnotRelCrossReference_8_1_0() { return cInverseYAnnotRelCrossReference_8_1_0; }
		
		//QualifiedName
		public RuleCall getInverseYAnnotRelQualifiedNameParserRuleCall_8_1_0_1() { return cInverseYAnnotRelQualifiedNameParserRuleCall_8_1_0_1; }
		
		//';'?
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}
	public class YAnnotIdInnerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotIdInner");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cYAnnotAttrParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cYAnnotRelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//YAnnotIdInner:
		//	YAnnotAttr | YAnnotRel;
		@Override public ParserRule getRule() { return rule; }
		
		//YAnnotAttr | YAnnotRel
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//YAnnotAttr
		public RuleCall getYAnnotAttrParserRuleCall_0() { return cYAnnotAttrParserRuleCall_0; }
		
		//YAnnotRel
		public RuleCall getYAnnotRelParserRuleCall_1() { return cYAnnotRelParserRuleCall_1; }
	}
	public class YAnnotIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotIdAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIdKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAnnotsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cAnnotsYAnnotEntityInnerCrossReference_4_0 = (CrossReference)cAnnotsAssignment_4.eContents().get(0);
		private final RuleCall cAnnotsYAnnotEntityInnerIDTerminalRuleCall_4_0_1 = (RuleCall)cAnnotsYAnnotEntityInnerCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAnnotsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cAnnotsYAnnotEntityInnerCrossReference_5_1_0 = (CrossReference)cAnnotsAssignment_5_1.eContents().get(0);
		private final RuleCall cAnnotsYAnnotEntityInnerIDTerminalRuleCall_5_1_0_1 = (RuleCall)cAnnotsYAnnotEntityInnerCrossReference_5_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//YAnnotId:
		//	{YAnnotId} '@id' name=ValidID '(' annots+=[YAnnotEntityInner] (',' annots+=[YAnnotEntityInner])* ')' ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotId} '@id' name=ValidID '(' annots+=[YAnnotEntityInner] (',' annots+=[YAnnotEntityInner])* ')' ';'?
		public Group getGroup() { return cGroup; }
		
		//{YAnnotId}
		public Action getYAnnotIdAction_0() { return cYAnnotIdAction_0; }
		
		//'@id'
		public Keyword getIdKeyword_1() { return cIdKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//annots+=[YAnnotEntityInner]
		public Assignment getAnnotsAssignment_4() { return cAnnotsAssignment_4; }
		
		//[YAnnotEntityInner]
		public CrossReference getAnnotsYAnnotEntityInnerCrossReference_4_0() { return cAnnotsYAnnotEntityInnerCrossReference_4_0; }
		
		//ID
		public RuleCall getAnnotsYAnnotEntityInnerIDTerminalRuleCall_4_0_1() { return cAnnotsYAnnotEntityInnerIDTerminalRuleCall_4_0_1; }
		
		//(',' annots+=[YAnnotEntityInner])*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//annots+=[YAnnotEntityInner]
		public Assignment getAnnotsAssignment_5_1() { return cAnnotsAssignment_5_1; }
		
		//[YAnnotEntityInner]
		public CrossReference getAnnotsYAnnotEntityInnerCrossReference_5_1_0() { return cAnnotsYAnnotEntityInnerCrossReference_5_1_0; }
		
		//ID
		public RuleCall getAnnotsYAnnotEntityInnerIDTerminalRuleCall_5_1_0_1() { return cAnnotsYAnnotEntityInnerIDTerminalRuleCall_5_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//';'?
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class YAnnotTechnicalDesignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotTechnicalDesign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotTechnicalDesignAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTdKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDatabaseKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDatabaseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cDatabaseYAnnotDatabaseCrossReference_3_0 = (CrossReference)cDatabaseAssignment_3.eContents().get(0);
		private final RuleCall cDatabaseYAnnotDatabaseIDTerminalRuleCall_3_0_1 = (RuleCall)cDatabaseYAnnotDatabaseCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFeaturesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFeaturesYAnnotTableParserRuleCall_5_0 = (RuleCall)cFeaturesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		///*
		// * Start Technical design
		// */ YAnnotTechnicalDesign:
		//	{YAnnotTechnicalDesign} '@td' 'database' database=[YAnnotDatabase] '{'
		//	features+=YAnnotTable*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotTechnicalDesign} '@td' 'database' database=[YAnnotDatabase] '{' features+=YAnnotTable* '}'
		public Group getGroup() { return cGroup; }
		
		//{YAnnotTechnicalDesign}
		public Action getYAnnotTechnicalDesignAction_0() { return cYAnnotTechnicalDesignAction_0; }
		
		//'@td'
		public Keyword getTdKeyword_1() { return cTdKeyword_1; }
		
		//'database'
		public Keyword getDatabaseKeyword_2() { return cDatabaseKeyword_2; }
		
		//database=[YAnnotDatabase]
		public Assignment getDatabaseAssignment_3() { return cDatabaseAssignment_3; }
		
		//[YAnnotDatabase]
		public CrossReference getDatabaseYAnnotDatabaseCrossReference_3_0() { return cDatabaseYAnnotDatabaseCrossReference_3_0; }
		
		//ID
		public RuleCall getDatabaseYAnnotDatabaseIDTerminalRuleCall_3_0_1() { return cDatabaseYAnnotDatabaseIDTerminalRuleCall_3_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//features+=YAnnotTable*
		public Assignment getFeaturesAssignment_5() { return cFeaturesAssignment_5; }
		
		//YAnnotTable
		public RuleCall getFeaturesYAnnotTableParserRuleCall_5_0() { return cFeaturesYAnnotTableParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class YAnnotTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotTableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTableKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEntityrefAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cEntityrefYAnnotEntityCrossReference_4_0 = (CrossReference)cEntityrefAssignment_4.eContents().get(0);
		private final RuleCall cEntityrefYAnnotEntityQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cEntityrefYAnnotEntityCrossReference_4_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cColumnsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cColumnsYAnnotAbstractColumnParserRuleCall_6_0 = (RuleCall)cColumnsAssignment_6.eContents().get(0);
		private final Assignment cPrimarykeyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPrimarykeyYAnnotPrimaryKeyParserRuleCall_7_0 = (RuleCall)cPrimarykeyAssignment_7.eContents().get(0);
		private final Assignment cForeignkeysAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cForeignkeysYAnnotForeignKeyParserRuleCall_8_0 = (RuleCall)cForeignkeysAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//YAnnotTable:
		//	{YAnnotTable} '@table' name=ValidID '->' entityref=[YAnnotEntity|QualifiedName] '{'
		//	columns+=YAnnotAbstractColumn*
		//	primarykey=YAnnotPrimaryKey?
		//	foreignkeys+=YAnnotForeignKey*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotTable} '@table' name=ValidID '->' entityref=[YAnnotEntity|QualifiedName] '{' columns+=YAnnotAbstractColumn*
		//primarykey=YAnnotPrimaryKey? foreignkeys+=YAnnotForeignKey* '}'
		public Group getGroup() { return cGroup; }
		
		//{YAnnotTable}
		public Action getYAnnotTableAction_0() { return cYAnnotTableAction_0; }
		
		//'@table'
		public Keyword getTableKeyword_1() { return cTableKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//entityref=[YAnnotEntity|QualifiedName]
		public Assignment getEntityrefAssignment_4() { return cEntityrefAssignment_4; }
		
		//[YAnnotEntity|QualifiedName]
		public CrossReference getEntityrefYAnnotEntityCrossReference_4_0() { return cEntityrefYAnnotEntityCrossReference_4_0; }
		
		//QualifiedName
		public RuleCall getEntityrefYAnnotEntityQualifiedNameParserRuleCall_4_0_1() { return cEntityrefYAnnotEntityQualifiedNameParserRuleCall_4_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//columns+=YAnnotAbstractColumn*
		public Assignment getColumnsAssignment_6() { return cColumnsAssignment_6; }
		
		//YAnnotAbstractColumn
		public RuleCall getColumnsYAnnotAbstractColumnParserRuleCall_6_0() { return cColumnsYAnnotAbstractColumnParserRuleCall_6_0; }
		
		//primarykey=YAnnotPrimaryKey?
		public Assignment getPrimarykeyAssignment_7() { return cPrimarykeyAssignment_7; }
		
		//YAnnotPrimaryKey
		public RuleCall getPrimarykeyYAnnotPrimaryKeyParserRuleCall_7_0() { return cPrimarykeyYAnnotPrimaryKeyParserRuleCall_7_0; }
		
		//foreignkeys+=YAnnotForeignKey*
		public Assignment getForeignkeysAssignment_8() { return cForeignkeysAssignment_8; }
		
		//YAnnotForeignKey
		public RuleCall getForeignkeysYAnnotForeignKeyParserRuleCall_8_0() { return cForeignkeysYAnnotForeignKeyParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class YAnnotColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotColumn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotColumnAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttrrefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAttrrefYAnnotAttrCrossReference_2_0 = (CrossReference)cAttrrefAssignment_2.eContents().get(0);
		private final RuleCall cAttrrefYAnnotAttrQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cAttrrefYAnnotAttrCrossReference_2_0.eContents().get(1);
		private final Keyword cAsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cTypeAlternatives_4_0 = (Alternatives)cTypeAssignment_4.eContents().get(0);
		private final Keyword cTypeVARCHARKeyword_4_0_0 = (Keyword)cTypeAlternatives_4_0.eContents().get(0);
		private final Keyword cTypeCHARKeyword_4_0_1 = (Keyword)cTypeAlternatives_4_0.eContents().get(1);
		private final Keyword cTypeINTEGERKeyword_4_0_2 = (Keyword)cTypeAlternatives_4_0.eContents().get(2);
		private final Keyword cTypeBIGINTKeyword_4_0_3 = (Keyword)cTypeAlternatives_4_0.eContents().get(3);
		private final Keyword cTypeSMALLINTKeyword_4_0_4 = (Keyword)cTypeAlternatives_4_0.eContents().get(4);
		private final Keyword cTypeDECIMALKeyword_4_0_5 = (Keyword)cTypeAlternatives_4_0.eContents().get(5);
		private final Keyword cTypeTIMEKeyword_4_0_6 = (Keyword)cTypeAlternatives_4_0.eContents().get(6);
		private final Keyword cTypeDATEKeyword_4_0_7 = (Keyword)cTypeAlternatives_4_0.eContents().get(7);
		private final Keyword cTypeTIMESTAMPKeyword_4_0_8 = (Keyword)cTypeAlternatives_4_0.eContents().get(8);
		private final Keyword cTypeBOOLEANKeyword_4_0_9 = (Keyword)cTypeAlternatives_4_0.eContents().get(9);
		private final Assignment cOptionalAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cOptionalQuestionMarkKeyword_5_0 = (Keyword)cOptionalAssignment_5.eContents().get(0);
		private final Assignment cAnnotsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Alternatives cAnnotsAlternatives_6_0 = (Alternatives)cAnnotsAssignment_6.eContents().get(0);
		private final RuleCall cAnnotsYAnnotLengthParserRuleCall_6_0_0 = (RuleCall)cAnnotsAlternatives_6_0.eContents().get(0);
		private final RuleCall cAnnotsYAnnotDecimalParserRuleCall_6_0_1 = (RuleCall)cAnnotsAlternatives_6_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//YAnnotColumn:
		//	{YAnnotColumn} '->' attrref=[YAnnotAttr|QualifiedName]
		//	'as' type=('VARCHAR' | 'CHAR' | 'INTEGER' | 'BIGINT' | 'SMALLINT' | 'DECIMAL' | 'TIME' | 'DATE' | 'TIMESTAMP' |
		//	'BOOLEAN') optional='?'? annots+=(YAnnotLength | YAnnotDecimal)* ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotColumn} '->' attrref=[YAnnotAttr|QualifiedName] 'as' type=('VARCHAR' | 'CHAR' | 'INTEGER' | 'BIGINT' | 'SMALLINT'
		//| 'DECIMAL' | 'TIME' | 'DATE' | 'TIMESTAMP' | 'BOOLEAN') optional='?'? annots+=(YAnnotLength | YAnnotDecimal)* ';'?
		public Group getGroup() { return cGroup; }
		
		//{YAnnotColumn}
		public Action getYAnnotColumnAction_0() { return cYAnnotColumnAction_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//attrref=[YAnnotAttr|QualifiedName]
		public Assignment getAttrrefAssignment_2() { return cAttrrefAssignment_2; }
		
		//[YAnnotAttr|QualifiedName]
		public CrossReference getAttrrefYAnnotAttrCrossReference_2_0() { return cAttrrefYAnnotAttrCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getAttrrefYAnnotAttrQualifiedNameParserRuleCall_2_0_1() { return cAttrrefYAnnotAttrQualifiedNameParserRuleCall_2_0_1; }
		
		//'as'
		public Keyword getAsKeyword_3() { return cAsKeyword_3; }
		
		//type=('VARCHAR' | 'CHAR' | 'INTEGER' | 'BIGINT' | 'SMALLINT' | 'DECIMAL' | 'TIME' | 'DATE' | 'TIMESTAMP' | 'BOOLEAN')
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//('VARCHAR' | 'CHAR' | 'INTEGER' | 'BIGINT' | 'SMALLINT' | 'DECIMAL' | 'TIME' | 'DATE' | 'TIMESTAMP' | 'BOOLEAN')
		public Alternatives getTypeAlternatives_4_0() { return cTypeAlternatives_4_0; }
		
		//'VARCHAR'
		public Keyword getTypeVARCHARKeyword_4_0_0() { return cTypeVARCHARKeyword_4_0_0; }
		
		//'CHAR'
		public Keyword getTypeCHARKeyword_4_0_1() { return cTypeCHARKeyword_4_0_1; }
		
		//'INTEGER'
		public Keyword getTypeINTEGERKeyword_4_0_2() { return cTypeINTEGERKeyword_4_0_2; }
		
		//'BIGINT'
		public Keyword getTypeBIGINTKeyword_4_0_3() { return cTypeBIGINTKeyword_4_0_3; }
		
		//'SMALLINT'
		public Keyword getTypeSMALLINTKeyword_4_0_4() { return cTypeSMALLINTKeyword_4_0_4; }
		
		//'DECIMAL'
		public Keyword getTypeDECIMALKeyword_4_0_5() { return cTypeDECIMALKeyword_4_0_5; }
		
		//'TIME'
		public Keyword getTypeTIMEKeyword_4_0_6() { return cTypeTIMEKeyword_4_0_6; }
		
		//'DATE'
		public Keyword getTypeDATEKeyword_4_0_7() { return cTypeDATEKeyword_4_0_7; }
		
		//'TIMESTAMP'
		public Keyword getTypeTIMESTAMPKeyword_4_0_8() { return cTypeTIMESTAMPKeyword_4_0_8; }
		
		//'BOOLEAN'
		public Keyword getTypeBOOLEANKeyword_4_0_9() { return cTypeBOOLEANKeyword_4_0_9; }
		
		//optional='?'?
		public Assignment getOptionalAssignment_5() { return cOptionalAssignment_5; }
		
		//'?'
		public Keyword getOptionalQuestionMarkKeyword_5_0() { return cOptionalQuestionMarkKeyword_5_0; }
		
		//annots+=(YAnnotLength | YAnnotDecimal)*
		public Assignment getAnnotsAssignment_6() { return cAnnotsAssignment_6; }
		
		//(YAnnotLength | YAnnotDecimal)
		public Alternatives getAnnotsAlternatives_6_0() { return cAnnotsAlternatives_6_0; }
		
		//YAnnotLength
		public RuleCall getAnnotsYAnnotLengthParserRuleCall_6_0_0() { return cAnnotsYAnnotLengthParserRuleCall_6_0_0; }
		
		//YAnnotDecimal
		public RuleCall getAnnotsYAnnotDecimalParserRuleCall_6_0_1() { return cAnnotsYAnnotDecimalParserRuleCall_6_0_1; }
		
		//';'?
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class YAnnotColumnLikeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotColumnLike");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotColumnLikeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColumnrefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cColumnrefYAnnotAbstractColumnCrossReference_2_0 = (CrossReference)cColumnrefAssignment_2.eContents().get(0);
		private final RuleCall cColumnrefYAnnotAbstractColumnQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cColumnrefYAnnotAbstractColumnCrossReference_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//YAnnotColumnLike:
		//	{YAnnotColumnLike} '->' columnref=[YAnnotAbstractColumn|QualifiedName] ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotColumnLike} '->' columnref=[YAnnotAbstractColumn|QualifiedName] ';'?
		public Group getGroup() { return cGroup; }
		
		//{YAnnotColumnLike}
		public Action getYAnnotColumnLikeAction_0() { return cYAnnotColumnLikeAction_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//columnref=[YAnnotAbstractColumn|QualifiedName]
		public Assignment getColumnrefAssignment_2() { return cColumnrefAssignment_2; }
		
		//[YAnnotAbstractColumn|QualifiedName]
		public CrossReference getColumnrefYAnnotAbstractColumnCrossReference_2_0() { return cColumnrefYAnnotAbstractColumnCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getColumnrefYAnnotAbstractColumnQualifiedNameParserRuleCall_2_0_1() { return cColumnrefYAnnotAbstractColumnQualifiedNameParserRuleCall_2_0_1; }
		
		//';'?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class YAnnotAbstractColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotAbstractColumn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotAbstractColumnAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cColumnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cTypeAlternatives_3_0 = (Alternatives)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeYAnnotColumnParserRuleCall_3_0_0 = (RuleCall)cTypeAlternatives_3_0.eContents().get(0);
		private final RuleCall cTypeYAnnotColumnLikeParserRuleCall_3_0_1 = (RuleCall)cTypeAlternatives_3_0.eContents().get(1);
		
		//YAnnotAbstractColumn:
		//	{YAnnotAbstractColumn} '@column' name=ValidID type=(YAnnotColumn | YAnnotColumnLike);
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotAbstractColumn} '@column' name=ValidID type=(YAnnotColumn | YAnnotColumnLike)
		public Group getGroup() { return cGroup; }
		
		//{YAnnotAbstractColumn}
		public Action getYAnnotAbstractColumnAction_0() { return cYAnnotAbstractColumnAction_0; }
		
		//'@column'
		public Keyword getColumnKeyword_1() { return cColumnKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//type=(YAnnotColumn | YAnnotColumnLike)
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//(YAnnotColumn | YAnnotColumnLike)
		public Alternatives getTypeAlternatives_3_0() { return cTypeAlternatives_3_0; }
		
		//YAnnotColumn
		public RuleCall getTypeYAnnotColumnParserRuleCall_3_0_0() { return cTypeYAnnotColumnParserRuleCall_3_0_0; }
		
		//YAnnotColumnLike
		public RuleCall getTypeYAnnotColumnLikeParserRuleCall_3_0_1() { return cTypeYAnnotColumnLikeParserRuleCall_3_0_1; }
	}
	public class YAnnotPrimaryKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotPrimaryKey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotPrimaryKeyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrimaryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColumnsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cColumnsYAnnotAbstractColumnCrossReference_3_0 = (CrossReference)cColumnsAssignment_3.eContents().get(0);
		private final RuleCall cColumnsYAnnotAbstractColumnIDTerminalRuleCall_3_0_1 = (RuleCall)cColumnsYAnnotAbstractColumnCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cColumnsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cColumnsYAnnotAbstractColumnCrossReference_4_1_0 = (CrossReference)cColumnsAssignment_4_1.eContents().get(0);
		private final RuleCall cColumnsYAnnotAbstractColumnIDTerminalRuleCall_4_1_0_1 = (RuleCall)cColumnsYAnnotAbstractColumnCrossReference_4_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//YAnnotPrimaryKey:
		//	{YAnnotPrimaryKey} '@primary' '(' columns+=[YAnnotAbstractColumn]* (',' columns+=[YAnnotAbstractColumn])* ')' ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotPrimaryKey} '@primary' '(' columns+=[YAnnotAbstractColumn]* (',' columns+=[YAnnotAbstractColumn])* ')' ';'?
		public Group getGroup() { return cGroup; }
		
		//{YAnnotPrimaryKey}
		public Action getYAnnotPrimaryKeyAction_0() { return cYAnnotPrimaryKeyAction_0; }
		
		//'@primary'
		public Keyword getPrimaryKeyword_1() { return cPrimaryKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//columns+=[YAnnotAbstractColumn]*
		public Assignment getColumnsAssignment_3() { return cColumnsAssignment_3; }
		
		//[YAnnotAbstractColumn]
		public CrossReference getColumnsYAnnotAbstractColumnCrossReference_3_0() { return cColumnsYAnnotAbstractColumnCrossReference_3_0; }
		
		//ID
		public RuleCall getColumnsYAnnotAbstractColumnIDTerminalRuleCall_3_0_1() { return cColumnsYAnnotAbstractColumnIDTerminalRuleCall_3_0_1; }
		
		//(',' columns+=[YAnnotAbstractColumn])*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//columns+=[YAnnotAbstractColumn]
		public Assignment getColumnsAssignment_4_1() { return cColumnsAssignment_4_1; }
		
		//[YAnnotAbstractColumn]
		public CrossReference getColumnsYAnnotAbstractColumnCrossReference_4_1_0() { return cColumnsYAnnotAbstractColumnCrossReference_4_1_0; }
		
		//ID
		public RuleCall getColumnsYAnnotAbstractColumnIDTerminalRuleCall_4_1_0_1() { return cColumnsYAnnotAbstractColumnIDTerminalRuleCall_4_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//';'?
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class YAnnotForeignKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotForeignKey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotForeignKeyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForeignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRelationshipAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRelationshipYAnnotRelCrossReference_2_0 = (CrossReference)cRelationshipAssignment_2.eContents().get(0);
		private final RuleCall cRelationshipYAnnotRelQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cRelationshipYAnnotRelCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cColumnsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cColumnsYAnnotAbstractColumnParserRuleCall_4_0 = (RuleCall)cColumnsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cColumnsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cColumnsYAnnotAbstractColumnParserRuleCall_5_1_0 = (RuleCall)cColumnsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//YAnnotForeignKey:
		//	{YAnnotForeignKey} '@foreign' relationship=[YAnnotRel|QualifiedName] '{'
		//	columns+=YAnnotAbstractColumn (',' columns+=YAnnotAbstractColumn)*
		//	'}' ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotForeignKey} '@foreign' relationship=[YAnnotRel|QualifiedName] '{' columns+=YAnnotAbstractColumn (','
		//columns+=YAnnotAbstractColumn)* '}' ';'?
		public Group getGroup() { return cGroup; }
		
		//{YAnnotForeignKey}
		public Action getYAnnotForeignKeyAction_0() { return cYAnnotForeignKeyAction_0; }
		
		//'@foreign'
		public Keyword getForeignKeyword_1() { return cForeignKeyword_1; }
		
		//relationship=[YAnnotRel|QualifiedName]
		public Assignment getRelationshipAssignment_2() { return cRelationshipAssignment_2; }
		
		//[YAnnotRel|QualifiedName]
		public CrossReference getRelationshipYAnnotRelCrossReference_2_0() { return cRelationshipYAnnotRelCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getRelationshipYAnnotRelQualifiedNameParserRuleCall_2_0_1() { return cRelationshipYAnnotRelQualifiedNameParserRuleCall_2_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//columns+=YAnnotAbstractColumn
		public Assignment getColumnsAssignment_4() { return cColumnsAssignment_4; }
		
		//YAnnotAbstractColumn
		public RuleCall getColumnsYAnnotAbstractColumnParserRuleCall_4_0() { return cColumnsYAnnotAbstractColumnParserRuleCall_4_0; }
		
		//(',' columns+=YAnnotAbstractColumn)*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//columns+=YAnnotAbstractColumn
		public Assignment getColumnsAssignment_5_1() { return cColumnsAssignment_5_1; }
		
		//YAnnotAbstractColumn
		public RuleCall getColumnsYAnnotAbstractColumnParserRuleCall_5_1_0() { return cColumnsYAnnotAbstractColumnParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//';'?
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class YAnnotJavaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotJava");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotJavaAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cJavaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cUsesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDatabaseAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cDatabaseYAnnotDatabaseCrossReference_2_1_0 = (CrossReference)cDatabaseAssignment_2_1.eContents().get(0);
		private final RuleCall cDatabaseYAnnotDatabaseIDTerminalRuleCall_2_1_0_1 = (RuleCall)cDatabaseYAnnotDatabaseCrossReference_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///*
		// * Swift Generation Annotations
		// */ YAnnotJava:
		//	{YAnnotJava} '@java' ('uses' database=[YAnnotDatabase])? ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotJava} '@java' ('uses' database=[YAnnotDatabase])? ';'?
		public Group getGroup() { return cGroup; }
		
		//{YAnnotJava}
		public Action getYAnnotJavaAction_0() { return cYAnnotJavaAction_0; }
		
		//'@java'
		public Keyword getJavaKeyword_1() { return cJavaKeyword_1; }
		
		//('uses' database=[YAnnotDatabase])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'uses'
		public Keyword getUsesKeyword_2_0() { return cUsesKeyword_2_0; }
		
		//database=[YAnnotDatabase]
		public Assignment getDatabaseAssignment_2_1() { return cDatabaseAssignment_2_1; }
		
		//[YAnnotDatabase]
		public CrossReference getDatabaseYAnnotDatabaseCrossReference_2_1_0() { return cDatabaseYAnnotDatabaseCrossReference_2_1_0; }
		
		//ID
		public RuleCall getDatabaseYAnnotDatabaseIDTerminalRuleCall_2_1_0_1() { return cDatabaseYAnnotDatabaseIDTerminalRuleCall_2_1_0_1; }
		
		//';'?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class YAnnotSwiftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotSwift");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotSwiftAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSwiftKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cModuleKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cUsesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDatabaseAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cDatabaseYAnnotDatabaseCrossReference_4_1_0 = (CrossReference)cDatabaseAssignment_4_1.eContents().get(0);
		private final RuleCall cDatabaseYAnnotDatabaseIDTerminalRuleCall_4_1_0_1 = (RuleCall)cDatabaseYAnnotDatabaseCrossReference_4_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///*
		// * Swift Generation Annotations
		// */ YAnnotSwift:
		//	{YAnnotSwift} '@swift' 'module' name=ValidID ('uses' database=[YAnnotDatabase])? ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotSwift} '@swift' 'module' name=ValidID ('uses' database=[YAnnotDatabase])? ';'?
		public Group getGroup() { return cGroup; }
		
		//{YAnnotSwift}
		public Action getYAnnotSwiftAction_0() { return cYAnnotSwiftAction_0; }
		
		//'@swift'
		public Keyword getSwiftKeyword_1() { return cSwiftKeyword_1; }
		
		//'module'
		public Keyword getModuleKeyword_2() { return cModuleKeyword_2; }
		
		//name=ValidID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_3_0() { return cNameValidIDParserRuleCall_3_0; }
		
		//('uses' database=[YAnnotDatabase])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'uses'
		public Keyword getUsesKeyword_4_0() { return cUsesKeyword_4_0; }
		
		//database=[YAnnotDatabase]
		public Assignment getDatabaseAssignment_4_1() { return cDatabaseAssignment_4_1; }
		
		//[YAnnotDatabase]
		public CrossReference getDatabaseYAnnotDatabaseCrossReference_4_1_0() { return cDatabaseYAnnotDatabaseCrossReference_4_1_0; }
		
		//ID
		public RuleCall getDatabaseYAnnotDatabaseIDTerminalRuleCall_4_1_0_1() { return cDatabaseYAnnotDatabaseIDTerminalRuleCall_4_1_0_1; }
		
		//';'?
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class YAnnotDatabaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotDatabase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotDatabaseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDatabaseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///*
		// * Database Generation Annotations
		// */ YAnnotDatabase:
		//	{YAnnotDatabase} '@database' name=ValidID ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotDatabase} '@database' name=ValidID ';'?
		public Group getGroup() { return cGroup; }
		
		//{YAnnotDatabase}
		public Action getYAnnotDatabaseAction_0() { return cYAnnotDatabaseAction_0; }
		
		//'@database'
		public Keyword getDatabaseKeyword_1() { return cDatabaseKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class XPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.XPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cYReadStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cYCreateStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cYDeleteStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cYUpdateStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cYReadEachStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXPrimaryExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//@Override
		//XPrimaryExpression xbase::XExpression:
		//	YReadStatement | YCreateStatement | YDeleteStatement | YUpdateStatement | YReadEachStatement | super;
		@Override public ParserRule getRule() { return rule; }
		
		//YReadStatement | YCreateStatement | YDeleteStatement | YUpdateStatement | YReadEachStatement | super
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//YReadStatement
		public RuleCall getYReadStatementParserRuleCall_0() { return cYReadStatementParserRuleCall_0; }
		
		//YCreateStatement
		public RuleCall getYCreateStatementParserRuleCall_1() { return cYCreateStatementParserRuleCall_1; }
		
		//YDeleteStatement
		public RuleCall getYDeleteStatementParserRuleCall_2() { return cYDeleteStatementParserRuleCall_2; }
		
		//YUpdateStatement
		public RuleCall getYUpdateStatementParserRuleCall_3() { return cYUpdateStatementParserRuleCall_3; }
		
		//YReadEachStatement
		public RuleCall getYReadEachStatementParserRuleCall_4() { return cYReadEachStatementParserRuleCall_4; }
		
		//super
		public RuleCall getXPrimaryExpressionParserRuleCall_5() { return cXPrimaryExpressionParserRuleCall_5; }
	}
	public class DBExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.DBExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhereKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cDBOrExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		///*
		// * Database Generation Annotations
		// */ DBExpression:
		//	'where' DBOrExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'where' DBOrExpression
		public Group getGroup() { return cGroup; }
		
		//'where'
		public Keyword getWhereKeyword_0() { return cWhereKeyword_0; }
		
		//DBOrExpression
		public RuleCall getDBOrExpressionParserRuleCall_1() { return cDBOrExpressionParserRuleCall_1; }
	}
	public class DBOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.DBOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDBAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cDBBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0 = (CrossReference)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementOpOrParserRuleCall_1_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandDBAndExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//DBOrExpression DBExpression:
		//	DBAndExpression (=> ({DBBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
		//	rightOperand=DBAndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//DBAndExpression (=> ({DBBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
		//rightOperand=DBAndExpression)*
		public Group getGroup() { return cGroup; }
		
		//DBAndExpression
		public RuleCall getDBAndExpressionParserRuleCall_0() { return cDBAndExpressionParserRuleCall_0; }
		
		//(=> ({DBBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
		//rightOperand=DBAndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({DBBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{DBBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr]
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{DBBinaryOperation.leftOperand=current}
		public Action getDBBinaryOperationLeftOperandAction_1_0_0_0() { return cDBBinaryOperationLeftOperandAction_1_0_0_0; }
		
		//feature=[types::JvmIdentifiableElement|OpOr]
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }
		
		//[types::JvmIdentifiableElement|OpOr]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0; }
		
		//OpOr
		public RuleCall getFeatureJvmIdentifiableElementOpOrParserRuleCall_1_0_0_1_0_1() { return cFeatureJvmIdentifiableElementOpOrParserRuleCall_1_0_0_1_0_1; }
		
		//rightOperand=DBAndExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }
		
		//DBAndExpression
		public RuleCall getRightOperandDBAndExpressionParserRuleCall_1_1_0() { return cRightOperandDBAndExpressionParserRuleCall_1_1_0; }
	}
	public class DBAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.DBAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDBEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cDBBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0 = (CrossReference)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementOpAndParserRuleCall_1_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandDBEqualityExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//DBAndExpression DBExpression:
		//	DBEqualityExpression (=> ({DBBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
		//	rightOperand=DBEqualityExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//DBEqualityExpression (=> ({DBBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
		//rightOperand=DBEqualityExpression)*
		public Group getGroup() { return cGroup; }
		
		//DBEqualityExpression
		public RuleCall getDBEqualityExpressionParserRuleCall_0() { return cDBEqualityExpressionParserRuleCall_0; }
		
		//(=> ({DBBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
		//rightOperand=DBEqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({DBBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{DBBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd]
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{DBBinaryOperation.leftOperand=current}
		public Action getDBBinaryOperationLeftOperandAction_1_0_0_0() { return cDBBinaryOperationLeftOperandAction_1_0_0_0; }
		
		//feature=[types::JvmIdentifiableElement|OpAnd]
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }
		
		//[types::JvmIdentifiableElement|OpAnd]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0; }
		
		//OpAnd
		public RuleCall getFeatureJvmIdentifiableElementOpAndParserRuleCall_1_0_0_1_0_1() { return cFeatureJvmIdentifiableElementOpAndParserRuleCall_1_0_0_1_0_1; }
		
		//rightOperand=DBEqualityExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }
		
		//DBEqualityExpression
		public RuleCall getRightOperandDBEqualityExpressionParserRuleCall_1_1_0() { return cRightOperandDBEqualityExpressionParserRuleCall_1_1_0; }
	}
	public class DBEqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.DBEqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDBRelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cDBBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0 = (CrossReference)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementOpEqualityParserRuleCall_1_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandDBRelationalExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//DBEqualityExpression DBExpression:
		//	DBRelationalExpression (=> ({DBBinaryOperation.leftOperand=current}
		//	feature=[types::JvmIdentifiableElement|OpEquality]) rightOperand=DBRelationalExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//DBRelationalExpression (=> ({DBBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
		//rightOperand=DBRelationalExpression)*
		public Group getGroup() { return cGroup; }
		
		//DBRelationalExpression
		public RuleCall getDBRelationalExpressionParserRuleCall_0() { return cDBRelationalExpressionParserRuleCall_0; }
		
		//(=> ({DBBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
		//rightOperand=DBRelationalExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({DBBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{DBBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality]
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{DBBinaryOperation.leftOperand=current}
		public Action getDBBinaryOperationLeftOperandAction_1_0_0_0() { return cDBBinaryOperationLeftOperandAction_1_0_0_0; }
		
		//feature=[types::JvmIdentifiableElement|OpEquality]
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }
		
		//[types::JvmIdentifiableElement|OpEquality]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0; }
		
		//OpEquality
		public RuleCall getFeatureJvmIdentifiableElementOpEqualityParserRuleCall_1_0_0_1_0_1() { return cFeatureJvmIdentifiableElementOpEqualityParserRuleCall_1_0_0_1_0_1; }
		
		//rightOperand=DBRelationalExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }
		
		//DBRelationalExpression
		public RuleCall getRightOperandDBRelationalExpressionParserRuleCall_1_1_0() { return cRightOperandDBRelationalExpressionParserRuleCall_1_1_0; }
	}
	public class DBRelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.DBRelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftOperandAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cLeftOperandJvmIdentifiableElementCrossReference_0_0 = (CrossReference)cLeftOperandAssignment_0.eContents().get(0);
		private final RuleCall cLeftOperandJvmIdentifiableElementOpCompareParserRuleCall_0_0_1 = (RuleCall)cLeftOperandJvmIdentifiableElementCrossReference_0_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRightOperandJvmIdentifiableElementCrossReference_1_0 = (CrossReference)cRightOperandAssignment_1.eContents().get(0);
		private final RuleCall cRightOperandJvmIdentifiableElementOpCompareParserRuleCall_1_0_1 = (RuleCall)cRightOperandJvmIdentifiableElementCrossReference_1_0.eContents().get(1);
		
		//DBRelationalExpression DBExpression:
		//	leftOperand=[types::JvmIdentifiableElement|OpCompare] rightOperand=[types::JvmIdentifiableElement|OpCompare];
		@Override public ParserRule getRule() { return rule; }
		
		//leftOperand=[types::JvmIdentifiableElement|OpCompare] rightOperand=[types::JvmIdentifiableElement|OpCompare]
		public Group getGroup() { return cGroup; }
		
		//leftOperand=[types::JvmIdentifiableElement|OpCompare]
		public Assignment getLeftOperandAssignment_0() { return cLeftOperandAssignment_0; }
		
		//[types::JvmIdentifiableElement|OpCompare]
		public CrossReference getLeftOperandJvmIdentifiableElementCrossReference_0_0() { return cLeftOperandJvmIdentifiableElementCrossReference_0_0; }
		
		//OpCompare
		public RuleCall getLeftOperandJvmIdentifiableElementOpCompareParserRuleCall_0_0_1() { return cLeftOperandJvmIdentifiableElementOpCompareParserRuleCall_0_0_1; }
		
		//rightOperand=[types::JvmIdentifiableElement|OpCompare]
		public Assignment getRightOperandAssignment_1() { return cRightOperandAssignment_1; }
		
		//[types::JvmIdentifiableElement|OpCompare]
		public CrossReference getRightOperandJvmIdentifiableElementCrossReference_1_0() { return cRightOperandJvmIdentifiableElementCrossReference_1_0; }
		
		//OpCompare
		public RuleCall getRightOperandJvmIdentifiableElementOpCompareParserRuleCall_1_0_1() { return cRightOperandJvmIdentifiableElementOpCompareParserRuleCall_1_0_1; }
	}
	
	public class YAccessLevelElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAccessLevel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPRIVATEPrivateKeyword_0_0 = (Keyword)cPRIVATEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPROTECTEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPROTECTEDProtectedKeyword_1_0 = (Keyword)cPROTECTEDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPUBLICPublicKeyword_2_0 = (Keyword)cPUBLICEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum YAccessLevel:
		//	PRIVATE='private' | PROTECTED='protected' | PUBLIC='public';
		public EnumRule getRule() { return rule; }
		
		//PRIVATE='private' | PROTECTED='protected' | PUBLIC='public'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PRIVATE='private'
		public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_0() { return cPRIVATEEnumLiteralDeclaration_0; }
		
		//'private'
		public Keyword getPRIVATEPrivateKeyword_0_0() { return cPRIVATEPrivateKeyword_0_0; }
		
		//PROTECTED='protected'
		public EnumLiteralDeclaration getPROTECTEDEnumLiteralDeclaration_1() { return cPROTECTEDEnumLiteralDeclaration_1; }
		
		//'protected'
		public Keyword getPROTECTEDProtectedKeyword_1_0() { return cPROTECTEDProtectedKeyword_1_0; }
		
		//PUBLIC='public'
		public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_2() { return cPUBLICEnumLiteralDeclaration_2; }
		
		//'public'
		public Keyword getPUBLICPublicKeyword_2_0() { return cPUBLICPublicKeyword_2_0; }
	}
	
	private final YWidgetElements pYWidget;
	private final YPackageDeclarationElements pYPackageDeclaration;
	private final YAccessLevelElements eYAccessLevel;
	private final YArgumentValueElements pYArgumentValue;
	private final YClassElements pYClass;
	private final YMemberElements pYMember;
	private final YPropertyElements pYProperty;
	private final YTuplesElements pYTuples;
	private final YFunctionElements pYFunction;
	private final YReadStatementElements pYReadStatement;
	private final YReadEachStatementElements pYReadEachStatement;
	private final YCreateStatementElements pYCreateStatement;
	private final YUpdateStatementElements pYUpdateStatement;
	private final YDeleteStatementElements pYDeleteStatement;
	private final YAssociateStatementElements pYAssociateStatement;
	private final YStructRefPairElements pYStructRefPair;
	private final YJoinElements pYJoin;
	private final YJoinDefElements pYJoinDef;
	private final YWhereElements pYWhere;
	private final YAnnotElements pYAnnot;
	private final YAnnotTopElements pYAnnotTop;
	private final YAnnotLengthElements pYAnnotLength;
	private final YAnnotMaxElements pYAnnotMax;
	private final YAnnotDecimalElements pYAnnotDecimal;
	private final YAnnotDefaultElements pYAnnotDefault;
	private final YAnnotDefaultTypeElements pYAnnotDefaultType;
	private final YAnnotDefaultTextElements pYAnnotDefaultText;
	private final YAnnotDefaultNumberElements pYAnnotDefaultNumber;
	private final YAnnotActionElements pYAnnotAction;
	private final YAnnotMessageElements pYAnnotMessage;
	private final YAnnotMsgTypeElements pYAnnotMsgType;
	private final YAnnotEntityInnerElements pYAnnotEntityInner;
	private final YAnnotEntityElements pYAnnotEntity;
	private final YAnnotAttrElements pYAnnotAttr;
	private final YAnnotRelElements pYAnnotRel;
	private final YAnnotIdInnerElements pYAnnotIdInner;
	private final YAnnotIdElements pYAnnotId;
	private final YAnnotTechnicalDesignElements pYAnnotTechnicalDesign;
	private final YAnnotTableElements pYAnnotTable;
	private final YAnnotColumnElements pYAnnotColumn;
	private final YAnnotColumnLikeElements pYAnnotColumnLike;
	private final YAnnotAbstractColumnElements pYAnnotAbstractColumn;
	private final YAnnotPrimaryKeyElements pYAnnotPrimaryKey;
	private final YAnnotForeignKeyElements pYAnnotForeignKey;
	private final YAnnotJavaElements pYAnnotJava;
	private final YAnnotSwiftElements pYAnnotSwift;
	private final YAnnotDatabaseElements pYAnnotDatabase;
	private final XPrimaryExpressionElements pXPrimaryExpression;
	private final DBExpressionElements pDBExpression;
	private final DBOrExpressionElements pDBOrExpression;
	private final DBAndExpressionElements pDBAndExpression;
	private final DBEqualityExpressionElements pDBEqualityExpression;
	private final DBRelationalExpressionElements pDBRelationalExpression;
	
	private final Grammar grammar;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public LangGrammarAccess(GrammarProvider grammarProvider,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pYWidget = new YWidgetElements();
		this.pYPackageDeclaration = new YPackageDeclarationElements();
		this.eYAccessLevel = new YAccessLevelElements();
		this.pYArgumentValue = new YArgumentValueElements();
		this.pYClass = new YClassElements();
		this.pYMember = new YMemberElements();
		this.pYProperty = new YPropertyElements();
		this.pYTuples = new YTuplesElements();
		this.pYFunction = new YFunctionElements();
		this.pYReadStatement = new YReadStatementElements();
		this.pYReadEachStatement = new YReadEachStatementElements();
		this.pYCreateStatement = new YCreateStatementElements();
		this.pYUpdateStatement = new YUpdateStatementElements();
		this.pYDeleteStatement = new YDeleteStatementElements();
		this.pYAssociateStatement = new YAssociateStatementElements();
		this.pYStructRefPair = new YStructRefPairElements();
		this.pYJoin = new YJoinElements();
		this.pYJoinDef = new YJoinDefElements();
		this.pYWhere = new YWhereElements();
		this.pYAnnot = new YAnnotElements();
		this.pYAnnotTop = new YAnnotTopElements();
		this.pYAnnotLength = new YAnnotLengthElements();
		this.pYAnnotMax = new YAnnotMaxElements();
		this.pYAnnotDecimal = new YAnnotDecimalElements();
		this.pYAnnotDefault = new YAnnotDefaultElements();
		this.pYAnnotDefaultType = new YAnnotDefaultTypeElements();
		this.pYAnnotDefaultText = new YAnnotDefaultTextElements();
		this.pYAnnotDefaultNumber = new YAnnotDefaultNumberElements();
		this.pYAnnotAction = new YAnnotActionElements();
		this.pYAnnotMessage = new YAnnotMessageElements();
		this.pYAnnotMsgType = new YAnnotMsgTypeElements();
		this.pYAnnotEntityInner = new YAnnotEntityInnerElements();
		this.pYAnnotEntity = new YAnnotEntityElements();
		this.pYAnnotAttr = new YAnnotAttrElements();
		this.pYAnnotRel = new YAnnotRelElements();
		this.pYAnnotIdInner = new YAnnotIdInnerElements();
		this.pYAnnotId = new YAnnotIdElements();
		this.pYAnnotTechnicalDesign = new YAnnotTechnicalDesignElements();
		this.pYAnnotTable = new YAnnotTableElements();
		this.pYAnnotColumn = new YAnnotColumnElements();
		this.pYAnnotColumnLike = new YAnnotColumnLikeElements();
		this.pYAnnotAbstractColumn = new YAnnotAbstractColumnElements();
		this.pYAnnotPrimaryKey = new YAnnotPrimaryKeyElements();
		this.pYAnnotForeignKey = new YAnnotForeignKeyElements();
		this.pYAnnotJava = new YAnnotJavaElements();
		this.pYAnnotSwift = new YAnnotSwiftElements();
		this.pYAnnotDatabase = new YAnnotDatabaseElements();
		this.pXPrimaryExpression = new XPrimaryExpressionElements();
		this.pDBExpression = new DBExpressionElements();
		this.pDBOrExpression = new DBOrExpressionElements();
		this.pDBAndExpression = new DBAndExpressionElements();
		this.pDBEqualityExpression = new DBEqualityExpressionElements();
		this.pDBRelationalExpression = new DBRelationalExpressionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("eu.jgen.notes.dmw.lite.Lang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//YWidget:
	//	{YWidget} package=YPackageDeclaration
	//	importSection=XImportSection?
	//	annotations+=YAnnotTop*
	//	classes+=YClass*;
	public YWidgetElements getYWidgetAccess() {
		return pYWidget;
	}
	
	public ParserRule getYWidgetRule() {
		return getYWidgetAccess().getRule();
	}
	
	//YPackageDeclaration:
	//	{YPackageDeclaration} 'package' name=QualifiedName;
	public YPackageDeclarationElements getYPackageDeclarationAccess() {
		return pYPackageDeclaration;
	}
	
	public ParserRule getYPackageDeclarationRule() {
		return getYPackageDeclarationAccess().getRule();
	}
	
	//enum YAccessLevel:
	//	PRIVATE='private' | PROTECTED='protected' | PUBLIC='public';
	public YAccessLevelElements getYAccessLevelAccess() {
		return eYAccessLevel;
	}
	
	public EnumRule getYAccessLevelRule() {
		return getYAccessLevelAccess().getRule();
	}
	
	//YArgumentValue:
	//	INT | STRING;
	public YArgumentValueElements getYArgumentValueAccess() {
		return pYArgumentValue;
	}
	
	public ParserRule getYArgumentValueRule() {
		return getYArgumentValueAccess().getRule();
	}
	
	//YClass:
	//	{YClass} 'class' name=ValidID (':' superclass=JvmTypeReference)? ('->' entityRef=[YAnnotEntity|QualifiedName])?
	//	'{'
	//	members+=YMember*
	//	'}';
	public YClassElements getYClassAccess() {
		return pYClass;
	}
	
	public ParserRule getYClassRule() {
		return getYClassAccess().getRule();
	}
	
	//YMember:
	//	YClass | YProperty | YFunction;
	public YMemberElements getYMemberAccess() {
		return pYMember;
	}
	
	public ParserRule getYMemberRule() {
		return getYMemberAccess().getRule();
	}
	
	//YProperty:
	//	access=YAccessLevel? 'var' name=ValidID ':' type=JvmTypeReference tuples=YTuples? optional?='?'? ('->'
	//	attrRef=[YAnnotAttr|QualifiedName])?
	//	annotations+=YAnnot* ';';
	public YPropertyElements getYPropertyAccess() {
		return pYProperty;
	}
	
	public ParserRule getYPropertyRule() {
		return getYPropertyAccess().getRule();
	}
	
	//YTuples:
	//	{YTuples} '<' (includes+=[YProperty] (',' includes+=[YProperty])*)? '>';
	public YTuplesElements getYTuplesAccess() {
		return pYTuples;
	}
	
	public ParserRule getYTuplesRule() {
		return getYTuplesAccess().getRule();
	}
	
	//YFunction:
	//	access=YAccessLevel? 'func' name=ValidID
	//	'(' (params+=JvmTypeReference (',' params+=JvmTypeReference)*)? ')' ('->' type=JvmTypeReference)?
	//	body=XBlockExpression;
	public YFunctionElements getYFunctionAccess() {
		return pYFunction;
	}
	
	public ParserRule getYFunctionRule() {
		return getYFunctionAccess().getRule();
	}
	
	//YReadStatement XExpression:
	//	{YReadStatement} 'db-read' structs+=YStructRefPair (',' structs+=YStructRefPair)*
	//	joinclause=YJoin? ('where' whereclause=XExpression)?
	//	'success' '{'
	//	successExpressions+=XExpression*
	//	'}' 'not' 'found' '{'
	//	notfoundExpressions+=XExpression*
	//	'}';
	public YReadStatementElements getYReadStatementAccess() {
		return pYReadStatement;
	}
	
	public ParserRule getYReadStatementRule() {
		return getYReadStatementAccess().getRule();
	}
	
	//YReadEachStatement:
	//	'readeach' structs+=YStructRefPair (',' structs+=YStructRefPair)* joinclause=YJoin? whereclause=XExpression?
	//	'target' target=[YProperty] success=XBlockExpression;
	public YReadEachStatementElements getYReadEachStatementAccess() {
		return pYReadEachStatement;
	}
	
	public ParserRule getYReadEachStatementRule() {
		return getYReadEachStatementAccess().getRule();
	}
	
	//YCreateStatement XExpression:
	//	{YCreateStatement} 'db-create' struct=YStructRefPair '{'
	//	setExpressions+=XExpression*
	//	'}' 'success' '{'
	//	successExpressions+=XExpression*
	//	'}' 'already' 'exist' '{'
	//	alreadyExistExpressions+=XExpression*
	//	'}';
	public YCreateStatementElements getYCreateStatementAccess() {
		return pYCreateStatement;
	}
	
	public ParserRule getYCreateStatementRule() {
		return getYCreateStatementAccess().getRule();
	}
	
	//YUpdateStatement:
	//	'update' struct=YStructRefPair
	//	setBlock=XBlockExpression
	//	'success' success=XBlockExpression;
	public YUpdateStatementElements getYUpdateStatementAccess() {
		return pYUpdateStatement;
	}
	
	public ParserRule getYUpdateStatementRule() {
		return getYUpdateStatementAccess().getRule();
	}
	
	//YDeleteStatement:
	//	'delete' struct=YStructRefPair ';';
	public YDeleteStatementElements getYDeleteStatementAccess() {
		return pYDeleteStatement;
	}
	
	public ParserRule getYDeleteStatementRule() {
		return getYDeleteStatementAccess().getRule();
	}
	
	//YAssociateStatement:
	//	'associate' joinref=YJoinDef ';';
	public YAssociateStatementElements getYAssociateStatementAccess() {
		return pYAssociateStatement;
	}
	
	public ParserRule getYAssociateStatementRule() {
		return getYAssociateStatementAccess().getRule();
	}
	
	//YStructRefPair:
	//	structproperty=[YProperty] '->' structclass=[YAnnotEntity];
	public YStructRefPairElements getYStructRefPairAccess() {
		return pYStructRefPair;
	}
	
	public ParserRule getYStructRefPairRule() {
		return getYStructRefPairAccess().getRule();
	}
	
	//YJoin:
	//	{YJoin} 'join' joindefs+=YJoinDef ("," joindefs+=YJoinDef)*;
	public YJoinElements getYJoinAccess() {
		return pYJoin;
	}
	
	public ParserRule getYJoinRule() {
		return getYJoinAccess().getRule();
	}
	
	//YJoinDef:
	//	fromView=[YProperty] '->' relRef=[YAnnotRel|QualifiedName] '->' toView=[YProperty];
	public YJoinDefElements getYJoinDefAccess() {
		return pYJoinDef;
	}
	
	public ParserRule getYJoinDefRule() {
		return getYJoinDefAccess().getRule();
	}
	
	//YWhere XExpression:
	//	{YWhere} 'where' expression=XExpression;
	public YWhereElements getYWhereAccess() {
		return pYWhere;
	}
	
	public ParserRule getYWhereRule() {
		return getYWhereAccess().getRule();
	}
	
	///*
	// * Predefined annotations
	// */ YAnnot:
	//	{YAnnot} type=(YAnnotLength | YAnnotDecimal | YAnnotAction | YAnnotMessage | YAnnotMsgType | YAnnotDefault |
	//	YAnnotMax);
	public YAnnotElements getYAnnotAccess() {
		return pYAnnot;
	}
	
	public ParserRule getYAnnotRule() {
		return getYAnnotAccess().getRule();
	}
	
	//YAnnotTop:
	//	type=(YAnnotEntity | YAnnotTechnicalDesign | YAnnotSwift | YAnnotJava | YAnnotDatabase);
	public YAnnotTopElements getYAnnotTopAccess() {
		return pYAnnotTop;
	}
	
	public ParserRule getYAnnotTopRule() {
		return getYAnnotTopAccess().getRule();
	}
	
	//YAnnotLength YAnnot:
	//	{YAnnotLength} '@length' '(' length=INT ')';
	public YAnnotLengthElements getYAnnotLengthAccess() {
		return pYAnnotLength;
	}
	
	public ParserRule getYAnnotLengthRule() {
		return getYAnnotLengthAccess().getRule();
	}
	
	//YAnnotMax YAnnot:
	//	{YAnnotMax} '@max' '(' length=INT ')';
	public YAnnotMaxElements getYAnnotMaxAccess() {
		return pYAnnotMax;
	}
	
	public ParserRule getYAnnotMaxRule() {
		return getYAnnotMaxAccess().getRule();
	}
	
	//YAnnotDecimal YAnnot:
	//	{YAnnotDecimal} '@decimal' '(' length=INT ',' decimal=INT ')';
	public YAnnotDecimalElements getYAnnotDecimalAccess() {
		return pYAnnotDecimal;
	}
	
	public ParserRule getYAnnotDecimalRule() {
		return getYAnnotDecimalAccess().getRule();
	}
	
	//YAnnotDefault YAnnot:
	//	{YAnnotDefault} '@default' '(' type=YAnnotDefaultType ')';
	public YAnnotDefaultElements getYAnnotDefaultAccess() {
		return pYAnnotDefault;
	}
	
	public ParserRule getYAnnotDefaultRule() {
		return getYAnnotDefaultAccess().getRule();
	}
	
	//YAnnotDefaultType:
	//	YAnnotDefaultText | YAnnotDefaultNumber;
	public YAnnotDefaultTypeElements getYAnnotDefaultTypeAccess() {
		return pYAnnotDefaultType;
	}
	
	public ParserRule getYAnnotDefaultTypeRule() {
		return getYAnnotDefaultTypeAccess().getRule();
	}
	
	//YAnnotDefaultText:
	//	value=STRING;
	public YAnnotDefaultTextElements getYAnnotDefaultTextAccess() {
		return pYAnnotDefaultText;
	}
	
	public ParserRule getYAnnotDefaultTextRule() {
		return getYAnnotDefaultTextAccess().getRule();
	}
	
	//YAnnotDefaultNumber:
	//	value=INT;
	public YAnnotDefaultNumberElements getYAnnotDefaultNumberAccess() {
		return pYAnnotDefaultNumber;
	}
	
	public ParserRule getYAnnotDefaultNumberRule() {
		return getYAnnotDefaultNumberAccess().getRule();
	}
	
	//YAnnotAction YAnnot:
	//	{YAnnotAction} '@action' '(' action=ValidID ')';
	public YAnnotActionElements getYAnnotActionAccess() {
		return pYAnnotAction;
	}
	
	public ParserRule getYAnnotActionRule() {
		return getYAnnotActionAccess().getRule();
	}
	
	//YAnnotMessage YAnnot:
	//	{YAnnotMessage} '@message' '(' msg=STRING ')';
	public YAnnotMessageElements getYAnnotMessageAccess() {
		return pYAnnotMessage;
	}
	
	public ParserRule getYAnnotMessageRule() {
		return getYAnnotMessageAccess().getRule();
	}
	
	//YAnnotMsgType YAnnot:
	//	'@msgtype' '(' msgtype=ValidID ')';
	public YAnnotMsgTypeElements getYAnnotMsgTypeAccess() {
		return pYAnnotMsgType;
	}
	
	public ParserRule getYAnnotMsgTypeRule() {
		return getYAnnotMsgTypeAccess().getRule();
	}
	
	//YAnnotEntityInner:
	//	YAnnotAttr | YAnnotRel | YAnnotId;
	public YAnnotEntityInnerElements getYAnnotEntityInnerAccess() {
		return pYAnnotEntityInner;
	}
	
	public ParserRule getYAnnotEntityInnerRule() {
		return getYAnnotEntityInnerAccess().getRule();
	}
	
	//YAnnotEntity:
	//	'@entity' name=ValidID (':' superannot=[YAnnotEntity|QualifiedName])? '{'
	//	annots+=YAnnotEntityInner*
	//	'}';
	public YAnnotEntityElements getYAnnotEntityAccess() {
		return pYAnnotEntity;
	}
	
	public ParserRule getYAnnotEntityRule() {
		return getYAnnotEntityAccess().getRule();
	}
	
	//YAnnotAttr:
	//	{YAnnotAttr} '@attr' name=ValidID ':' yclass=JvmTypeReference optional='?'? annots+=YAnnot* ';'?;
	public YAnnotAttrElements getYAnnotAttrAccess() {
		return pYAnnotAttr;
	}
	
	public ParserRule getYAnnotAttrRule() {
		return getYAnnotAttrAccess().getRule();
	}
	
	//YAnnotRel:
	//	{YAnnotRel} '@rel' parent?='@parent'? name=ValidID optional?='?'? '->' target=[YAnnotEntity|QualifiedName] many?='*'?
	//	('<-'
	//	inverse=[YAnnotRel|QualifiedName])? ';'?;
	public YAnnotRelElements getYAnnotRelAccess() {
		return pYAnnotRel;
	}
	
	public ParserRule getYAnnotRelRule() {
		return getYAnnotRelAccess().getRule();
	}
	
	//YAnnotIdInner:
	//	YAnnotAttr | YAnnotRel;
	public YAnnotIdInnerElements getYAnnotIdInnerAccess() {
		return pYAnnotIdInner;
	}
	
	public ParserRule getYAnnotIdInnerRule() {
		return getYAnnotIdInnerAccess().getRule();
	}
	
	//YAnnotId:
	//	{YAnnotId} '@id' name=ValidID '(' annots+=[YAnnotEntityInner] (',' annots+=[YAnnotEntityInner])* ')' ';'?;
	public YAnnotIdElements getYAnnotIdAccess() {
		return pYAnnotId;
	}
	
	public ParserRule getYAnnotIdRule() {
		return getYAnnotIdAccess().getRule();
	}
	
	///*
	// * Start Technical design
	// */ YAnnotTechnicalDesign:
	//	{YAnnotTechnicalDesign} '@td' 'database' database=[YAnnotDatabase] '{'
	//	features+=YAnnotTable*
	//	'}';
	public YAnnotTechnicalDesignElements getYAnnotTechnicalDesignAccess() {
		return pYAnnotTechnicalDesign;
	}
	
	public ParserRule getYAnnotTechnicalDesignRule() {
		return getYAnnotTechnicalDesignAccess().getRule();
	}
	
	//YAnnotTable:
	//	{YAnnotTable} '@table' name=ValidID '->' entityref=[YAnnotEntity|QualifiedName] '{'
	//	columns+=YAnnotAbstractColumn*
	//	primarykey=YAnnotPrimaryKey?
	//	foreignkeys+=YAnnotForeignKey*
	//	'}';
	public YAnnotTableElements getYAnnotTableAccess() {
		return pYAnnotTable;
	}
	
	public ParserRule getYAnnotTableRule() {
		return getYAnnotTableAccess().getRule();
	}
	
	//YAnnotColumn:
	//	{YAnnotColumn} '->' attrref=[YAnnotAttr|QualifiedName]
	//	'as' type=('VARCHAR' | 'CHAR' | 'INTEGER' | 'BIGINT' | 'SMALLINT' | 'DECIMAL' | 'TIME' | 'DATE' | 'TIMESTAMP' |
	//	'BOOLEAN') optional='?'? annots+=(YAnnotLength | YAnnotDecimal)* ';'?;
	public YAnnotColumnElements getYAnnotColumnAccess() {
		return pYAnnotColumn;
	}
	
	public ParserRule getYAnnotColumnRule() {
		return getYAnnotColumnAccess().getRule();
	}
	
	//YAnnotColumnLike:
	//	{YAnnotColumnLike} '->' columnref=[YAnnotAbstractColumn|QualifiedName] ';'?;
	public YAnnotColumnLikeElements getYAnnotColumnLikeAccess() {
		return pYAnnotColumnLike;
	}
	
	public ParserRule getYAnnotColumnLikeRule() {
		return getYAnnotColumnLikeAccess().getRule();
	}
	
	//YAnnotAbstractColumn:
	//	{YAnnotAbstractColumn} '@column' name=ValidID type=(YAnnotColumn | YAnnotColumnLike);
	public YAnnotAbstractColumnElements getYAnnotAbstractColumnAccess() {
		return pYAnnotAbstractColumn;
	}
	
	public ParserRule getYAnnotAbstractColumnRule() {
		return getYAnnotAbstractColumnAccess().getRule();
	}
	
	//YAnnotPrimaryKey:
	//	{YAnnotPrimaryKey} '@primary' '(' columns+=[YAnnotAbstractColumn]* (',' columns+=[YAnnotAbstractColumn])* ')' ';'?;
	public YAnnotPrimaryKeyElements getYAnnotPrimaryKeyAccess() {
		return pYAnnotPrimaryKey;
	}
	
	public ParserRule getYAnnotPrimaryKeyRule() {
		return getYAnnotPrimaryKeyAccess().getRule();
	}
	
	//YAnnotForeignKey:
	//	{YAnnotForeignKey} '@foreign' relationship=[YAnnotRel|QualifiedName] '{'
	//	columns+=YAnnotAbstractColumn (',' columns+=YAnnotAbstractColumn)*
	//	'}' ';'?;
	public YAnnotForeignKeyElements getYAnnotForeignKeyAccess() {
		return pYAnnotForeignKey;
	}
	
	public ParserRule getYAnnotForeignKeyRule() {
		return getYAnnotForeignKeyAccess().getRule();
	}
	
	///*
	// * Swift Generation Annotations
	// */ YAnnotJava:
	//	{YAnnotJava} '@java' ('uses' database=[YAnnotDatabase])? ';'?;
	public YAnnotJavaElements getYAnnotJavaAccess() {
		return pYAnnotJava;
	}
	
	public ParserRule getYAnnotJavaRule() {
		return getYAnnotJavaAccess().getRule();
	}
	
	///*
	// * Swift Generation Annotations
	// */ YAnnotSwift:
	//	{YAnnotSwift} '@swift' 'module' name=ValidID ('uses' database=[YAnnotDatabase])? ';'?;
	public YAnnotSwiftElements getYAnnotSwiftAccess() {
		return pYAnnotSwift;
	}
	
	public ParserRule getYAnnotSwiftRule() {
		return getYAnnotSwiftAccess().getRule();
	}
	
	///*
	// * Database Generation Annotations
	// */ YAnnotDatabase:
	//	{YAnnotDatabase} '@database' name=ValidID ';'?;
	public YAnnotDatabaseElements getYAnnotDatabaseAccess() {
		return pYAnnotDatabase;
	}
	
	public ParserRule getYAnnotDatabaseRule() {
		return getYAnnotDatabaseAccess().getRule();
	}
	
	//@Override
	//XPrimaryExpression xbase::XExpression:
	//	YReadStatement | YCreateStatement | YDeleteStatement | YUpdateStatement | YReadEachStatement | super;
	public XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return pXPrimaryExpression;
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	///*
	// * Database Generation Annotations
	// */ DBExpression:
	//	'where' DBOrExpression;
	public DBExpressionElements getDBExpressionAccess() {
		return pDBExpression;
	}
	
	public ParserRule getDBExpressionRule() {
		return getDBExpressionAccess().getRule();
	}
	
	//DBOrExpression DBExpression:
	//	DBAndExpression (=> ({DBBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=DBAndExpression)*;
	public DBOrExpressionElements getDBOrExpressionAccess() {
		return pDBOrExpression;
	}
	
	public ParserRule getDBOrExpressionRule() {
		return getDBOrExpressionAccess().getRule();
	}
	
	//DBAndExpression DBExpression:
	//	DBEqualityExpression (=> ({DBBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=DBEqualityExpression)*;
	public DBAndExpressionElements getDBAndExpressionAccess() {
		return pDBAndExpression;
	}
	
	public ParserRule getDBAndExpressionRule() {
		return getDBAndExpressionAccess().getRule();
	}
	
	//DBEqualityExpression DBExpression:
	//	DBRelationalExpression (=> ({DBBinaryOperation.leftOperand=current}
	//	feature=[types::JvmIdentifiableElement|OpEquality]) rightOperand=DBRelationalExpression)*;
	public DBEqualityExpressionElements getDBEqualityExpressionAccess() {
		return pDBEqualityExpression;
	}
	
	public ParserRule getDBEqualityExpressionRule() {
		return getDBEqualityExpressionAccess().getRule();
	}
	
	//DBRelationalExpression DBExpression:
	//	leftOperand=[types::JvmIdentifiableElement|OpCompare] rightOperand=[types::JvmIdentifiableElement|OpCompare];
	public DBRelationalExpressionElements getDBRelationalExpressionAccess() {
		return pDBRelationalExpression;
	}
	
	public ParserRule getDBRelationalExpressionRule() {
		return getDBRelationalExpressionAccess().getRule();
	}
	
	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' |
	//	'<' '<' '=' |
	//	'>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//	'==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
	//	=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//	'->'
	//	| '..<'
	//	| '>' '..'
	//	| '..'
	//	| '=>'
	//	| '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>'
	//	| '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//	'*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
	//	| XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall XExpression:
	//	super::XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//	| => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
	//	')')?
	//	memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXbaseXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXbaseXPrimaryExpressionRule() {
		return getXbaseXPrimaryExpressionAccess().getRule();
	}
	
	//XLiteral XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure XExpression:
	//	=> ({XClosure}
	//	'[')
	//	=> ((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|')?
	//	expression=XExpressionInClosure
	//	']';
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')';
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression XExpression:
	//	{XIfExpression}
	//	'if' '(' if=XExpression ')'
	//	then=XExpression (=> 'else' else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression XExpression:
	//	{XSwitchExpression}
	//	'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')'
	//	| => (declaredParam=JvmFormalParameter ':')? switch=XExpression) '{'
	//	cases+=XCasePart* ('default' ':' default=XExpression)?
	//	'}';
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression}
	//	'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression}
	//	'for' '(' (initExpressions+=XExpressionOrVarDeclaration (',' initExpressions+=XExpressionOrVarDeclaration)*)? ';'
	//	expression=XExpression? ';' (updateExpressions+=XExpression (',' updateExpressions+=XExpression)*)? ')'
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression XExpression:
	//	{XWhileExpression}
	//	'while' '(' predicate=XExpression ')'
	//	body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression}
	//	'do'
	//	body=XExpression
	//	'while' '(' predicate=XExpression ')';
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XBlockExpression XExpression:
	//	{XBlockExpression}
	//	'{' (expressions+=XExpressionOrVarDeclaration ';'?)*
	//	'}';
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('='
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)?
	//	')')?
	//	featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//	ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall XExpression:
	//	{XConstructorCall}
	//	'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<' typeArguments+=JvmArgumentTypeReference (','
	//	typeArguments+=JvmArgumentTypeReference)* '>')? (=> explicitConstructorCall?='(' (arguments+=XShortClosure
	//	| arguments+=XExpression (',' arguments+=XExpression)*)?
	//	')')?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true');
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null';
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')';
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression}
	//	'try'
	//	expression=XExpression (catchClauses+=XCatchClause+ (=> 'finally' finallyExpression=XExpression)?
	//	| 'finally' finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression}
	//	'synchronized' '(') param=XExpression ')' expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//@Override
	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	///**
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes,
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// */ StaticQualifier:
	//	(ValidID '::')+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
	//	| XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>
	//	'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*
	//	| constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? |
	//	"'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
