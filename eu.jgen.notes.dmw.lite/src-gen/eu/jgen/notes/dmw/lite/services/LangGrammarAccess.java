/*
 * generated by Xtext 2.12.0
 */
package eu.jgen.notes.dmw.lite.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class LangGrammarAccess extends AbstractGrammarElementFinder {
	
	public class YWidgetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YWidget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsYImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnnotationsYAnnotTopParserRuleCall_2_0 = (RuleCall)cAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cClassesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassesYClassParserRuleCall_3_0 = (RuleCall)cClassesAssignment_3.eContents().get(0);
		
		//YWidget:
		//	('package' name=QualifiedName ';'?)?
		//	imports+=YImport*
		//	annotations+=YAnnotTop*
		//	classes+=YClass*;
		@Override public ParserRule getRule() { return rule; }
		
		//('package' name=QualifiedName ';'?)? imports+=YImport* annotations+=YAnnotTop* classes+=YClass*
		public Group getGroup() { return cGroup; }
		
		//('package' name=QualifiedName ';'?)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'package'
		public Keyword getPackageKeyword_0_0() { return cPackageKeyword_0_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_1_0() { return cNameQualifiedNameParserRuleCall_0_1_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }
		
		//imports+=YImport*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }
		
		//YImport
		public RuleCall getImportsYImportParserRuleCall_1_0() { return cImportsYImportParserRuleCall_1_0; }
		
		//annotations+=YAnnotTop*
		public Assignment getAnnotationsAssignment_2() { return cAnnotationsAssignment_2; }
		
		//YAnnotTop
		public RuleCall getAnnotationsYAnnotTopParserRuleCall_2_0() { return cAnnotationsYAnnotTopParserRuleCall_2_0; }
		
		//classes+=YClass*
		public Assignment getClassesAssignment_3() { return cClassesAssignment_3; }
		
		//YClass
		public RuleCall getClassesYClassParserRuleCall_3_0() { return cClassesYClassParserRuleCall_3_0; }
	}
	public class YImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//YImport:
		//	'import' importedNamespace=QualifiedNameWithWildcard ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=QualifiedNameWithWildcard ';'
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cValidIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ValidID (=> '.' ValidID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ValidID (=> '.' ValidID)*
		public Group getGroup() { return cGroup; }
		
		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }
		
		//(=> '.' ValidID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> '.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ValidID
		public RuleCall getValidIDParserRuleCall_1_1() { return cValidIDParserRuleCall_1_1; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class ValidIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.ValidID");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ValidID:
		//	ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class YParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YParameter");
		private final RuleCall cYTypedDeclarationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//YParameter:
		//	YTypedDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//YTypedDeclaration
		public RuleCall getYTypedDeclarationParserRuleCall() { return cYTypedDeclarationParserRuleCall; }
	}
	public class YArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueYArgumentValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//YArgument:
		//	name=ValidID ':' value=YArgumentValue;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ValidID ':' value=YArgumentValue
		public Group getGroup() { return cGroup; }
		
		//name=ValidID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0() { return cNameValidIDParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=YArgumentValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//YArgumentValue
		public RuleCall getValueYArgumentValueParserRuleCall_2_0() { return cValueYArgumentValueParserRuleCall_2_0; }
	}
	public class YArgumentValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YArgumentValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//YArgumentValue:
		//	INT | STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}
	public class YClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperclassAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperclassYClassCrossReference_2_1_0 = (CrossReference)cSuperclassAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperclassYClassQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cSuperclassYClassCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cEntityAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cEntityYAnnotEntityCrossReference_3_1_0 = (CrossReference)cEntityAssignment_3_1.eContents().get(0);
		private final RuleCall cEntityYAnnotEntityQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cEntityYAnnotEntityCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cInnersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInnersYClassParserRuleCall_5_0 = (RuleCall)cInnersAssignment_5.eContents().get(0);
		private final Assignment cMembersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMembersYMemberParserRuleCall_6_0 = (RuleCall)cMembersAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//YClass:
		//	'class' name=ValidID (':' superclass=[YClass|QualifiedName])? ('->' entity=[YAnnotEntity|QualifiedName])?
		//	'{'
		//	inners+=YClass*
		//	members+=YMember*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'class' name=ValidID (':' superclass=[YClass|QualifiedName])? ('->' entity=[YAnnotEntity|QualifiedName])? '{'
		//inners+=YClass* members+=YMember* '}'
		public Group getGroup() { return cGroup; }
		
		//'class'
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//(':' superclass=[YClass|QualifiedName])?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//superclass=[YClass|QualifiedName]
		public Assignment getSuperclassAssignment_2_1() { return cSuperclassAssignment_2_1; }
		
		//[YClass|QualifiedName]
		public CrossReference getSuperclassYClassCrossReference_2_1_0() { return cSuperclassYClassCrossReference_2_1_0; }
		
		//QualifiedName
		public RuleCall getSuperclassYClassQualifiedNameParserRuleCall_2_1_0_1() { return cSuperclassYClassQualifiedNameParserRuleCall_2_1_0_1; }
		
		//('->' entity=[YAnnotEntity|QualifiedName])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_0() { return cHyphenMinusGreaterThanSignKeyword_3_0; }
		
		//entity=[YAnnotEntity|QualifiedName]
		public Assignment getEntityAssignment_3_1() { return cEntityAssignment_3_1; }
		
		//[YAnnotEntity|QualifiedName]
		public CrossReference getEntityYAnnotEntityCrossReference_3_1_0() { return cEntityYAnnotEntityCrossReference_3_1_0; }
		
		//QualifiedName
		public RuleCall getEntityYAnnotEntityQualifiedNameParserRuleCall_3_1_0_1() { return cEntityYAnnotEntityQualifiedNameParserRuleCall_3_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//inners+=YClass*
		public Assignment getInnersAssignment_5() { return cInnersAssignment_5; }
		
		//YClass
		public RuleCall getInnersYClassParserRuleCall_5_0() { return cInnersYClassParserRuleCall_5_0; }
		
		//members+=YMember*
		public Assignment getMembersAssignment_6() { return cMembersAssignment_6; }
		
		//YMember
		public RuleCall getMembersYMemberParserRuleCall_6_0() { return cMembersYMemberParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class YMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cYPropertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cYFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//YMember:
		//	YProperty | YFunction;
		@Override public ParserRule getRule() { return rule; }
		
		//YProperty | YFunction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//YProperty
		public RuleCall getYPropertyParserRuleCall_0() { return cYPropertyParserRuleCall_0; }
		
		//YFunction
		public RuleCall getYFunctionParserRuleCall_1() { return cYFunctionParserRuleCall_1; }
	}
	public class YTypedDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YTypedDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(0);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeYClassCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeYClassQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cTypeYClassCrossReference_2_0.eContents().get(1);
		
		//fragment YTypedDeclaration *:
		//	name=ValidID ':' type=[YClass|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//name=ValidID ':' type=[YClass|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//name=ValidID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0() { return cNameValidIDParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=[YClass|QualifiedName]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[YClass|QualifiedName]
		public CrossReference getTypeYClassCrossReference_2_0() { return cTypeYClassCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getTypeYClassQualifiedNameParserRuleCall_2_0_1() { return cTypeYClassQualifiedNameParserRuleCall_2_0_1; }
	}
	public class YPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAccessAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAccessYAccessLevelEnumRuleCall_0_0 = (RuleCall)cAccessAssignment_0.eContents().get(0);
		private final Keyword cVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cYTypedDeclarationParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cTuplesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTuplesYTuplesParserRuleCall_3_0 = (RuleCall)cTuplesAssignment_3.eContents().get(0);
		private final Assignment cOptionalAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cOptionalQuestionMarkKeyword_4_0 = (Keyword)cOptionalAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAttrAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cAttrYAnnotAttrCrossReference_5_1_0 = (CrossReference)cAttrAssignment_5_1.eContents().get(0);
		private final RuleCall cAttrYAnnotAttrQualifiedNameParserRuleCall_5_1_0_1 = (RuleCall)cAttrYAnnotAttrCrossReference_5_1_0.eContents().get(1);
		private final Assignment cPropAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPropYAnnotParserRuleCall_6_0 = (RuleCall)cPropAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//YProperty:
		//	access=YAccessLevel? 'var' YTypedDeclaration tuples=YTuples? optional?='?'? ('->' attr=[YAnnotAttr|QualifiedName])?
		//	prop+=YAnnot* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//access=YAccessLevel? 'var' YTypedDeclaration tuples=YTuples? optional?='?'? ('->' attr=[YAnnotAttr|QualifiedName])?
		//prop+=YAnnot* ';'
		public Group getGroup() { return cGroup; }
		
		//access=YAccessLevel?
		public Assignment getAccessAssignment_0() { return cAccessAssignment_0; }
		
		//YAccessLevel
		public RuleCall getAccessYAccessLevelEnumRuleCall_0_0() { return cAccessYAccessLevelEnumRuleCall_0_0; }
		
		//'var'
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }
		
		//YTypedDeclaration
		public RuleCall getYTypedDeclarationParserRuleCall_2() { return cYTypedDeclarationParserRuleCall_2; }
		
		//tuples=YTuples?
		public Assignment getTuplesAssignment_3() { return cTuplesAssignment_3; }
		
		//YTuples
		public RuleCall getTuplesYTuplesParserRuleCall_3_0() { return cTuplesYTuplesParserRuleCall_3_0; }
		
		//optional?='?'?
		public Assignment getOptionalAssignment_4() { return cOptionalAssignment_4; }
		
		//'?'
		public Keyword getOptionalQuestionMarkKeyword_4_0() { return cOptionalQuestionMarkKeyword_4_0; }
		
		//('->' attr=[YAnnotAttr|QualifiedName])?
		public Group getGroup_5() { return cGroup_5; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_5_0() { return cHyphenMinusGreaterThanSignKeyword_5_0; }
		
		//attr=[YAnnotAttr|QualifiedName]
		public Assignment getAttrAssignment_5_1() { return cAttrAssignment_5_1; }
		
		//[YAnnotAttr|QualifiedName]
		public CrossReference getAttrYAnnotAttrCrossReference_5_1_0() { return cAttrYAnnotAttrCrossReference_5_1_0; }
		
		//QualifiedName
		public RuleCall getAttrYAnnotAttrQualifiedNameParserRuleCall_5_1_0_1() { return cAttrYAnnotAttrQualifiedNameParserRuleCall_5_1_0_1; }
		
		//prop+=YAnnot*
		public Assignment getPropAssignment_6() { return cPropAssignment_6; }
		
		//YAnnot
		public RuleCall getPropYAnnotParserRuleCall_6_0() { return cPropYAnnotParserRuleCall_6_0; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class YTuplesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YTuples");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYTuplesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cIncludesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cIncludesYPropertyCrossReference_2_0_0 = (CrossReference)cIncludesAssignment_2_0.eContents().get(0);
		private final RuleCall cIncludesYPropertyIDTerminalRuleCall_2_0_0_1 = (RuleCall)cIncludesYPropertyCrossReference_2_0_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cIncludesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final CrossReference cIncludesYPropertyCrossReference_2_1_1_0 = (CrossReference)cIncludesAssignment_2_1_1.eContents().get(0);
		private final RuleCall cIncludesYPropertyIDTerminalRuleCall_2_1_1_0_1 = (RuleCall)cIncludesYPropertyCrossReference_2_1_1_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//YTuples:
		//	{YTuples} '<' (includes+=[YProperty] (',' includes+=[YProperty])*)? '>';
		@Override public ParserRule getRule() { return rule; }
		
		//{YTuples} '<' (includes+=[YProperty] (',' includes+=[YProperty])*)? '>'
		public Group getGroup() { return cGroup; }
		
		//{YTuples}
		public Action getYTuplesAction_0() { return cYTuplesAction_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//(includes+=[YProperty] (',' includes+=[YProperty])*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//includes+=[YProperty]
		public Assignment getIncludesAssignment_2_0() { return cIncludesAssignment_2_0; }
		
		//[YProperty]
		public CrossReference getIncludesYPropertyCrossReference_2_0_0() { return cIncludesYPropertyCrossReference_2_0_0; }
		
		//ID
		public RuleCall getIncludesYPropertyIDTerminalRuleCall_2_0_0_1() { return cIncludesYPropertyIDTerminalRuleCall_2_0_0_1; }
		
		//(',' includes+=[YProperty])*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//includes+=[YProperty]
		public Assignment getIncludesAssignment_2_1_1() { return cIncludesAssignment_2_1_1; }
		
		//[YProperty]
		public CrossReference getIncludesYPropertyCrossReference_2_1_1_0() { return cIncludesYPropertyCrossReference_2_1_1_0; }
		
		//ID
		public RuleCall getIncludesYPropertyIDTerminalRuleCall_2_1_1_0_1() { return cIncludesYPropertyIDTerminalRuleCall_2_1_1_0_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}
	public class YFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAccessAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAccessYAccessLevelEnumRuleCall_0_0 = (RuleCall)cAccessAssignment_0.eContents().get(0);
		private final Keyword cFuncKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParamsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParamsYParameterParserRuleCall_4_0_0 = (RuleCall)cParamsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParamsYParameterParserRuleCall_4_1_1_0 = (RuleCall)cParamsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cReturnvalueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Keyword cReturnvalueHyphenMinusGreaterThanSignKeyword_6_0 = (Keyword)cReturnvalueAssignment_6.eContents().get(0);
		private final Assignment cTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cTypeYClassCrossReference_7_0 = (CrossReference)cTypeAssignment_7.eContents().get(0);
		private final RuleCall cTypeYClassQualifiedNameParserRuleCall_7_0_1 = (RuleCall)cTypeYClassCrossReference_7_0.eContents().get(1);
		private final Assignment cBodyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBodyYBlockParserRuleCall_8_0 = (RuleCall)cBodyAssignment_8.eContents().get(0);
		
		//YFunction:
		//	access=YAccessLevel? 'func' name=ValidID
		//	'(' (params+=YParameter (',' params+=YParameter)*)? ')' returnvalue?='->'? type=[YClass|QualifiedName]?
		//	body=YBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//access=YAccessLevel? 'func' name=ValidID '(' (params+=YParameter (',' params+=YParameter)*)? ')' returnvalue?='->'?
		//type=[YClass|QualifiedName]? body=YBlock
		public Group getGroup() { return cGroup; }
		
		//access=YAccessLevel?
		public Assignment getAccessAssignment_0() { return cAccessAssignment_0; }
		
		//YAccessLevel
		public RuleCall getAccessYAccessLevelEnumRuleCall_0_0() { return cAccessYAccessLevelEnumRuleCall_0_0; }
		
		//'func'
		public Keyword getFuncKeyword_1() { return cFuncKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(params+=YParameter (',' params+=YParameter)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//params+=YParameter
		public Assignment getParamsAssignment_4_0() { return cParamsAssignment_4_0; }
		
		//YParameter
		public RuleCall getParamsYParameterParserRuleCall_4_0_0() { return cParamsYParameterParserRuleCall_4_0_0; }
		
		//(',' params+=YParameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//params+=YParameter
		public Assignment getParamsAssignment_4_1_1() { return cParamsAssignment_4_1_1; }
		
		//YParameter
		public RuleCall getParamsYParameterParserRuleCall_4_1_1_0() { return cParamsYParameterParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//returnvalue?='->'?
		public Assignment getReturnvalueAssignment_6() { return cReturnvalueAssignment_6; }
		
		//'->'
		public Keyword getReturnvalueHyphenMinusGreaterThanSignKeyword_6_0() { return cReturnvalueHyphenMinusGreaterThanSignKeyword_6_0; }
		
		//type=[YClass|QualifiedName]?
		public Assignment getTypeAssignment_7() { return cTypeAssignment_7; }
		
		//[YClass|QualifiedName]
		public CrossReference getTypeYClassCrossReference_7_0() { return cTypeYClassCrossReference_7_0; }
		
		//QualifiedName
		public RuleCall getTypeYClassQualifiedNameParserRuleCall_7_0_1() { return cTypeYClassQualifiedNameParserRuleCall_7_0_1; }
		
		//body=YBlock
		public Assignment getBodyAssignment_8() { return cBodyAssignment_8; }
		
		//YBlock
		public RuleCall getBodyYBlockParserRuleCall_8_0() { return cBodyYBlockParserRuleCall_8_0; }
	}
	public class YBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsYStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//YBlock:
		//	{YBlock} '{' statements+=YStatement* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{YBlock} '{' statements+=YStatement* '}'
		public Group getGroup() { return cGroup; }
		
		//{YBlock}
		public Action getYBlockAction_0() { return cYBlockAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//statements+=YStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }
		
		//YStatement
		public RuleCall getStatementsYStatementParserRuleCall_2_0() { return cStatementsYStatementParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class YStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cYVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cYReturnParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cYReadStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cYCreateStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cYUpdateStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cYAssociateStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cYDeleteStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cYReadEachStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cYWhileStatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cYRepeatWhileStatementParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cYForInStatementParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final RuleCall cYExpressionParserRuleCall_11_0 = (RuleCall)cGroup_11.eContents().get(0);
		private final Keyword cSemicolonKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final RuleCall cYIfStatementParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cYSwitchStatementParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		
		//YStatement:
		//	YVariableDeclaration | YReturn | YReadStatement | YCreateStatement | YUpdateStatement | YAssociateStatement |
		//	YDeleteStatement | YReadEachStatement | YWhileStatement | YRepeatWhileStatement | YForInStatement | YExpression ';' |
		//	YIfStatement | YSwitchStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//YVariableDeclaration | YReturn | YReadStatement | YCreateStatement | YUpdateStatement | YAssociateStatement |
		//YDeleteStatement | YReadEachStatement | YWhileStatement | YRepeatWhileStatement | YForInStatement | YExpression ';' |
		//YIfStatement | YSwitchStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//YVariableDeclaration
		public RuleCall getYVariableDeclarationParserRuleCall_0() { return cYVariableDeclarationParserRuleCall_0; }
		
		//YReturn
		public RuleCall getYReturnParserRuleCall_1() { return cYReturnParserRuleCall_1; }
		
		//YReadStatement
		public RuleCall getYReadStatementParserRuleCall_2() { return cYReadStatementParserRuleCall_2; }
		
		//YCreateStatement
		public RuleCall getYCreateStatementParserRuleCall_3() { return cYCreateStatementParserRuleCall_3; }
		
		//YUpdateStatement
		public RuleCall getYUpdateStatementParserRuleCall_4() { return cYUpdateStatementParserRuleCall_4; }
		
		//YAssociateStatement
		public RuleCall getYAssociateStatementParserRuleCall_5() { return cYAssociateStatementParserRuleCall_5; }
		
		//YDeleteStatement
		public RuleCall getYDeleteStatementParserRuleCall_6() { return cYDeleteStatementParserRuleCall_6; }
		
		//YReadEachStatement
		public RuleCall getYReadEachStatementParserRuleCall_7() { return cYReadEachStatementParserRuleCall_7; }
		
		//YWhileStatement
		public RuleCall getYWhileStatementParserRuleCall_8() { return cYWhileStatementParserRuleCall_8; }
		
		//YRepeatWhileStatement
		public RuleCall getYRepeatWhileStatementParserRuleCall_9() { return cYRepeatWhileStatementParserRuleCall_9; }
		
		//YForInStatement
		public RuleCall getYForInStatementParserRuleCall_10() { return cYForInStatementParserRuleCall_10; }
		
		//YExpression ';'
		public Group getGroup_11() { return cGroup_11; }
		
		//YExpression
		public RuleCall getYExpressionParserRuleCall_11_0() { return cYExpressionParserRuleCall_11_0; }
		
		//';'
		public Keyword getSemicolonKeyword_11_1() { return cSemicolonKeyword_11_1; }
		
		//YIfStatement
		public RuleCall getYIfStatementParserRuleCall_12() { return cYIfStatementParserRuleCall_12; }
		
		//YSwitchStatement
		public RuleCall getYSwitchStatementParserRuleCall_13() { return cYSwitchStatementParserRuleCall_13; }
	}
	public class YVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cYTypedDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionYOrExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//YVariableDeclaration:
		//	YTypedDeclaration '=' expression=YOrExpression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//YTypedDeclaration '=' expression=YOrExpression ';'
		public Group getGroup() { return cGroup; }
		
		//YTypedDeclaration
		public RuleCall getYTypedDeclarationParserRuleCall_0() { return cYTypedDeclarationParserRuleCall_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//expression=YOrExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//YOrExpression
		public RuleCall getExpressionYOrExpressionParserRuleCall_2_0() { return cExpressionYOrExpressionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class YReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YReturn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYReturnAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionYOrExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//YReturn:
		//	{YReturn} 'return' expression=YOrExpression? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{YReturn} 'return' expression=YOrExpression? ';'
		public Group getGroup() { return cGroup; }
		
		//{YReturn}
		public Action getYReturnAction_0() { return cYReturnAction_0; }
		
		//'return'
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }
		
		//expression=YOrExpression?
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//YOrExpression
		public RuleCall getExpressionYOrExpressionParserRuleCall_2_0() { return cExpressionYOrExpressionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class YIfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YIfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionYOrExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenBlockYIfBlockParserRuleCall_4_0 = (RuleCall)cThenBlockAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseBlockAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseBlockYIfBlockParserRuleCall_5_1_0 = (RuleCall)cElseBlockAssignment_5_1.eContents().get(0);
		
		//YIfStatement:
		//	'if' '(' expression=YOrExpression ')' thenBlock=YIfBlock (=> 'else' elseBlock=YIfBlock)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' expression=YOrExpression ')' thenBlock=YIfBlock (=> 'else' elseBlock=YIfBlock)?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=YOrExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//YOrExpression
		public RuleCall getExpressionYOrExpressionParserRuleCall_2_0() { return cExpressionYOrExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//thenBlock=YIfBlock
		public Assignment getThenBlockAssignment_4() { return cThenBlockAssignment_4; }
		
		//YIfBlock
		public RuleCall getThenBlockYIfBlockParserRuleCall_4_0() { return cThenBlockYIfBlockParserRuleCall_4_0; }
		
		//(=> 'else' elseBlock=YIfBlock)?
		public Group getGroup_5() { return cGroup_5; }
		
		//=> 'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//elseBlock=YIfBlock
		public Assignment getElseBlockAssignment_5_1() { return cElseBlockAssignment_5_1; }
		
		//YIfBlock
		public RuleCall getElseBlockYIfBlockParserRuleCall_5_1_0() { return cElseBlockYIfBlockParserRuleCall_5_1_0; }
	}
	public class YIfBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YIfBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStatementsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStatementsYStatementParserRuleCall_0_0 = (RuleCall)cStatementsAssignment_0.eContents().get(0);
		private final RuleCall cYBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//YIfBlock YBlock:
		//	statements+=YStatement
		//	| YBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//statements+=YStatement | YBlock
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//statements+=YStatement
		public Assignment getStatementsAssignment_0() { return cStatementsAssignment_0; }
		
		//YStatement
		public RuleCall getStatementsYStatementParserRuleCall_0_0() { return cStatementsYStatementParserRuleCall_0_0; }
		
		//YBlock
		public RuleCall getYBlockParserRuleCall_1() { return cYBlockParserRuleCall_1; }
	}
	public class YSwitchStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YSwitchStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYSwitchStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSwitchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSwitchAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSwitchYExpressionParserRuleCall_2_0 = (RuleCall)cSwitchAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCasesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCasesYSwitchCaseParserRuleCall_4_0 = (RuleCall)cCasesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cDefaultKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cDefaultAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cDefaultYBlockParserRuleCall_5_2_0 = (RuleCall)cDefaultAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//YSwitchStatement:
		//	{YSwitchStatement}
		//	'switch' switch=YExpression '{'
		//	cases+=YSwitchCase* ('default' ':' default=YBlock)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{YSwitchStatement} 'switch' switch=YExpression '{' cases+=YSwitchCase* ('default' ':' default=YBlock)? '}'
		public Group getGroup() { return cGroup; }
		
		//{YSwitchStatement}
		public Action getYSwitchStatementAction_0() { return cYSwitchStatementAction_0; }
		
		//'switch'
		public Keyword getSwitchKeyword_1() { return cSwitchKeyword_1; }
		
		//switch=YExpression
		public Assignment getSwitchAssignment_2() { return cSwitchAssignment_2; }
		
		//YExpression
		public RuleCall getSwitchYExpressionParserRuleCall_2_0() { return cSwitchYExpressionParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//cases+=YSwitchCase*
		public Assignment getCasesAssignment_4() { return cCasesAssignment_4; }
		
		//YSwitchCase
		public RuleCall getCasesYSwitchCaseParserRuleCall_4_0() { return cCasesYSwitchCaseParserRuleCall_4_0; }
		
		//('default' ':' default=YBlock)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'default'
		public Keyword getDefaultKeyword_5_0() { return cDefaultKeyword_5_0; }
		
		//':'
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }
		
		//default=YBlock
		public Assignment getDefaultAssignment_5_2() { return cDefaultAssignment_5_2; }
		
		//YBlock
		public RuleCall getDefaultYBlockParserRuleCall_5_2_0() { return cDefaultYBlockParserRuleCall_5_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class YSwitchCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YSwitchCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYSwitchCaseAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCaseKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCaseAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCaseYExpressionParserRuleCall_1_1_0 = (RuleCall)cCaseAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenYBlockParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		
		//YSwitchCase:
		//	{YSwitchCase} ('case' case=YExpression)?
		//	':' then=YBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//{YSwitchCase} ('case' case=YExpression)? ':' then=YBlock
		public Group getGroup() { return cGroup; }
		
		//{YSwitchCase}
		public Action getYSwitchCaseAction_0() { return cYSwitchCaseAction_0; }
		
		//('case' case=YExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'case'
		public Keyword getCaseKeyword_1_0() { return cCaseKeyword_1_0; }
		
		//case=YExpression
		public Assignment getCaseAssignment_1_1() { return cCaseAssignment_1_1; }
		
		//YExpression
		public RuleCall getCaseYExpressionParserRuleCall_1_1_0() { return cCaseYExpressionParserRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//then=YBlock
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }
		
		//YBlock
		public RuleCall getThenYBlockParserRuleCall_3_0() { return cThenYBlockParserRuleCall_3_0; }
	}
	public class YSymbolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YSymbol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cYVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cYParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//YSymbol:
		//	YVariableDeclaration | YParameter;
		@Override public ParserRule getRule() { return rule; }
		
		//YVariableDeclaration | YParameter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//YVariableDeclaration
		public RuleCall getYVariableDeclarationParserRuleCall_0() { return cYVariableDeclarationParserRuleCall_0; }
		
		//YParameter
		public RuleCall getYParameterParserRuleCall_1() { return cYParameterParserRuleCall_1; }
	}
	public class YNamedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YNamedElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cYClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cYMemberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cYSymbolParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//YNamedElement:
		//	YClass | YMember | YSymbol;
		@Override public ParserRule getRule() { return rule; }
		
		//YClass | YMember | YSymbol
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//YClass
		public RuleCall getYClassParserRuleCall_0() { return cYClassParserRuleCall_0; }
		
		//YMember
		public RuleCall getYMemberParserRuleCall_1() { return cYMemberParserRuleCall_1; }
		
		//YSymbol
		public RuleCall getYSymbolParserRuleCall_2() { return cYSymbolParserRuleCall_2; }
	}
	public class YExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YExpression");
		private final RuleCall cYAssignmentParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//YExpression:
		//	YAssignment;
		@Override public ParserRule getRule() { return rule; }
		
		//YAssignment
		public RuleCall getYAssignmentParserRuleCall() { return cYAssignmentParserRuleCall; }
	}
	public class YAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cYSelectionExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cYAssignmentLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightYOrExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//YAssignment YExpression:
		//	YSelectionExpression ({YAssignment.left=current} '=' right=YOrExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//YSelectionExpression ({YAssignment.left=current} '=' right=YOrExpression)?
		public Group getGroup() { return cGroup; }
		
		//YSelectionExpression
		public RuleCall getYSelectionExpressionParserRuleCall_0() { return cYSelectionExpressionParserRuleCall_0; }
		
		//({YAssignment.left=current} '=' right=YOrExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{YAssignment.left=current}
		public Action getYAssignmentLeftAction_1_0() { return cYAssignmentLeftAction_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//right=YOrExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//YOrExpression
		public RuleCall getRightYOrExpressionParserRuleCall_1_2_0() { return cRightYOrExpressionParserRuleCall_1_2_0; }
	}
	public class YSelectionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YSelectionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cYTerminalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cYMemberSelectionReceiverAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cMemberAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cMemberYMemberCrossReference_1_2_0 = (CrossReference)cMemberAssignment_1_2.eContents().get(0);
		private final RuleCall cMemberYMemberIDTerminalRuleCall_1_2_0_1 = (RuleCall)cMemberYMemberCrossReference_1_2_0.eContents().get(1);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Assignment cFunctioninvocationAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final Keyword cFunctioninvocationLeftParenthesisKeyword_1_3_0_0 = (Keyword)cFunctioninvocationAssignment_1_3_0.eContents().get(0);
		private final Group cGroup_1_3_1 = (Group)cGroup_1_3.eContents().get(1);
		private final Assignment cArgsAssignment_1_3_1_0 = (Assignment)cGroup_1_3_1.eContents().get(0);
		private final RuleCall cArgsYOrExpressionParserRuleCall_1_3_1_0_0 = (RuleCall)cArgsAssignment_1_3_1_0.eContents().get(0);
		private final Group cGroup_1_3_1_1 = (Group)cGroup_1_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_3_1_1_0 = (Keyword)cGroup_1_3_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_3_1_1_1 = (Assignment)cGroup_1_3_1_1.eContents().get(1);
		private final RuleCall cArgsYOrExpressionParserRuleCall_1_3_1_1_1_0 = (RuleCall)cArgsAssignment_1_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3_2 = (Keyword)cGroup_1_3.eContents().get(2);
		
		//YSelectionExpression YExpression:
		//	YTerminalExpression ({YMemberSelection.receiver=current} '.'
		//	member=[YMember] (functioninvocation?='(' (args+=YOrExpression (',' args+=YOrExpression)*)? ')')?)*;
		@Override public ParserRule getRule() { return rule; }
		
		//YTerminalExpression ({YMemberSelection.receiver=current} '.' member=[YMember] (functioninvocation?='('
		//(args+=YOrExpression (',' args+=YOrExpression)*)? ')')?)*
		public Group getGroup() { return cGroup; }
		
		//YTerminalExpression
		public RuleCall getYTerminalExpressionParserRuleCall_0() { return cYTerminalExpressionParserRuleCall_0; }
		
		//({YMemberSelection.receiver=current} '.' member=[YMember] (functioninvocation?='(' (args+=YOrExpression (','
		//args+=YOrExpression)*)? ')')?)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{YMemberSelection.receiver=current}
		public Action getYMemberSelectionReceiverAction_1_0() { return cYMemberSelectionReceiverAction_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//member=[YMember]
		public Assignment getMemberAssignment_1_2() { return cMemberAssignment_1_2; }
		
		//[YMember]
		public CrossReference getMemberYMemberCrossReference_1_2_0() { return cMemberYMemberCrossReference_1_2_0; }
		
		//ID
		public RuleCall getMemberYMemberIDTerminalRuleCall_1_2_0_1() { return cMemberYMemberIDTerminalRuleCall_1_2_0_1; }
		
		//(functioninvocation?='(' (args+=YOrExpression (',' args+=YOrExpression)*)? ')')?
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//functioninvocation?='('
		public Assignment getFunctioninvocationAssignment_1_3_0() { return cFunctioninvocationAssignment_1_3_0; }
		
		//'('
		public Keyword getFunctioninvocationLeftParenthesisKeyword_1_3_0_0() { return cFunctioninvocationLeftParenthesisKeyword_1_3_0_0; }
		
		//(args+=YOrExpression (',' args+=YOrExpression)*)?
		public Group getGroup_1_3_1() { return cGroup_1_3_1; }
		
		//args+=YOrExpression
		public Assignment getArgsAssignment_1_3_1_0() { return cArgsAssignment_1_3_1_0; }
		
		//YOrExpression
		public RuleCall getArgsYOrExpressionParserRuleCall_1_3_1_0_0() { return cArgsYOrExpressionParserRuleCall_1_3_1_0_0; }
		
		//(',' args+=YOrExpression)*
		public Group getGroup_1_3_1_1() { return cGroup_1_3_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_3_1_1_0() { return cCommaKeyword_1_3_1_1_0; }
		
		//args+=YOrExpression
		public Assignment getArgsAssignment_1_3_1_1_1() { return cArgsAssignment_1_3_1_1_1; }
		
		//YOrExpression
		public RuleCall getArgsYOrExpressionParserRuleCall_1_3_1_1_1_0() { return cArgsYOrExpressionParserRuleCall_1_3_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3_2() { return cRightParenthesisKeyword_1_3_2; }
	}
	public class OpSingleAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.OpSingleAssign");
		private final Keyword cEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		///*
		// * Expressions
		// */ OpSingleAssign:
		//	'=';
		@Override public ParserRule getRule() { return rule; }
		
		//'='
		public Keyword getEqualsSignKeyword() { return cEqualsSignKeyword; }
	}
	public class YOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cYAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cYOrExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cOpOrParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightYAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//YOrExpression YExpression:
		//	YAndExpression ({YOrExpression.left=current} OpOr right=YAndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//YAndExpression ({YOrExpression.left=current} OpOr right=YAndExpression)*
		public Group getGroup() { return cGroup; }
		
		//YAndExpression
		public RuleCall getYAndExpressionParserRuleCall_0() { return cYAndExpressionParserRuleCall_0; }
		
		//({YOrExpression.left=current} OpOr right=YAndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{YOrExpression.left=current}
		public Action getYOrExpressionLeftAction_1_0() { return cYOrExpressionLeftAction_1_0; }
		
		//OpOr
		public RuleCall getOpOrParserRuleCall_1_1() { return cOpOrParserRuleCall_1_1; }
		
		//right=YAndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//YAndExpression
		public RuleCall getRightYAndExpressionParserRuleCall_1_2_0() { return cRightYAndExpressionParserRuleCall_1_2_0; }
	}
	public class OpOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.OpOr");
		private final Keyword cVerticalLineVerticalLineKeyword = (Keyword)rule.eContents().get(1);
		
		//OpOr:
		//	'||';
		@Override public ParserRule getRule() { return rule; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword() { return cVerticalLineVerticalLineKeyword; }
	}
	public class YAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cYEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cYAndExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cOpAndParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightYEqualityExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//YAndExpression YExpression:
		//	YEqualityExpression ({YAndExpression.left=current} OpAnd right=YEqualityExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//YEqualityExpression ({YAndExpression.left=current} OpAnd right=YEqualityExpression)*
		public Group getGroup() { return cGroup; }
		
		//YEqualityExpression
		public RuleCall getYEqualityExpressionParserRuleCall_0() { return cYEqualityExpressionParserRuleCall_0; }
		
		//({YAndExpression.left=current} OpAnd right=YEqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{YAndExpression.left=current}
		public Action getYAndExpressionLeftAction_1_0() { return cYAndExpressionLeftAction_1_0; }
		
		//OpAnd
		public RuleCall getOpAndParserRuleCall_1_1() { return cOpAndParserRuleCall_1_1; }
		
		//right=YEqualityExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//YEqualityExpression
		public RuleCall getRightYEqualityExpressionParserRuleCall_1_2_0() { return cRightYEqualityExpressionParserRuleCall_1_2_0; }
	}
	public class OpAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.OpAnd");
		private final Keyword cAmpersandAmpersandKeyword = (Keyword)rule.eContents().get(1);
		
		//OpAnd:
		//	'&&';
		@Override public ParserRule getRule() { return rule; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword() { return cAmpersandAmpersandKeyword; }
	}
	public class YEqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YEqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cYComparisonExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cYEqualityExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightYComparisonExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//YEqualityExpression YExpression:
		//	YComparisonExpression ({YEqualityExpression.left=current} op=("==" | "!=") right=YComparisonExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//YComparisonExpression ({YEqualityExpression.left=current} op=("==" | "!=") right=YComparisonExpression)*
		public Group getGroup() { return cGroup; }
		
		//YComparisonExpression
		public RuleCall getYComparisonExpressionParserRuleCall_0() { return cYComparisonExpressionParserRuleCall_0; }
		
		//({YEqualityExpression.left=current} op=("==" | "!=") right=YComparisonExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{YEqualityExpression.left=current}
		public Action getYEqualityExpressionLeftAction_1_0() { return cYEqualityExpressionLeftAction_1_0; }
		
		//op=("==" | "!=")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//("==" | "!=")
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0; }
		
		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_1; }
		
		//right=YComparisonExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//YComparisonExpression
		public RuleCall getRightYComparisonExpressionParserRuleCall_1_2_0() { return cRightYComparisonExpressionParserRuleCall_1_2_0; }
	}
	public class YComparisonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YComparisonExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cYAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cYComparisonExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOpCompareParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightYAdditiveExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//YComparisonExpression YExpression:
		//	YAdditiveExpression ({YComparisonExpression.left=current} op=OpCompare right=YAdditiveExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//YAdditiveExpression ({YComparisonExpression.left=current} op=OpCompare right=YAdditiveExpression)*
		public Group getGroup() { return cGroup; }
		
		//YAdditiveExpression
		public RuleCall getYAdditiveExpressionParserRuleCall_0() { return cYAdditiveExpressionParserRuleCall_0; }
		
		//({YComparisonExpression.left=current} op=OpCompare right=YAdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{YComparisonExpression.left=current}
		public Action getYComparisonExpressionLeftAction_1_0() { return cYComparisonExpressionLeftAction_1_0; }
		
		//op=OpCompare
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//OpCompare
		public RuleCall getOpOpCompareParserRuleCall_1_1_0() { return cOpOpCompareParserRuleCall_1_1_0; }
		
		//right=YAdditiveExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//YAdditiveExpression
		public RuleCall getRightYAdditiveExpressionParserRuleCall_1_2_0() { return cRightYAdditiveExpressionParserRuleCall_1_2_0; }
	}
	public class OpCompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.OpCompare");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//OpCompare:
		//	'>=' | '<' '=' | '>' | '<';
		@Override public ParserRule getRule() { return rule; }
		
		//'>=' | '<' '=' | '>' | '<'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_0() { return cGreaterThanSignEqualsSignKeyword_0; }
		
		//'<' '='
		public Group getGroup_1() { return cGroup_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
		
		//'<'
		public Keyword getLessThanSignKeyword_3() { return cLessThanSignKeyword_3; }
	}
	public class YAdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cYMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cYPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cYMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightYMultiplicativeExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//YAdditiveExpression YExpression:
		//	YMultiplicativeExpression (({YPlus.left=current} '+' | {YMinus.left=current} '-') right=YMultiplicativeExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//YMultiplicativeExpression (({YPlus.left=current} '+' | {YMinus.left=current} '-') right=YMultiplicativeExpression)*
		public Group getGroup() { return cGroup; }
		
		//YMultiplicativeExpression
		public RuleCall getYMultiplicativeExpressionParserRuleCall_0() { return cYMultiplicativeExpressionParserRuleCall_0; }
		
		//(({YPlus.left=current} '+' | {YMinus.left=current} '-') right=YMultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{YPlus.left=current} '+' | {YMinus.left=current} '-'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{YPlus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{YPlus.left=current}
		public Action getYPlusLeftAction_1_0_0_0() { return cYPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{YMinus.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{YMinus.left=current}
		public Action getYMinusLeftAction_1_0_1_0() { return cYMinusLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=YMultiplicativeExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//YMultiplicativeExpression
		public RuleCall getRightYMultiplicativeExpressionParserRuleCall_1_1_0() { return cRightYMultiplicativeExpressionParserRuleCall_1_1_0; }
	}
	public class OpAddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.OpAdd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpAdd:
		//	'+' | '-';
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}
	public class YMultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YMultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cYPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cYMulOrDivLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightYPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//YMultiplicativeExpression YExpression:
		//	YPrimary ({YMulOrDiv.left=current} op=('*' | '/') right=YPrimary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//YPrimary ({YMulOrDiv.left=current} op=('*' | '/') right=YPrimary)*
		public Group getGroup() { return cGroup; }
		
		//YPrimary
		public RuleCall getYPrimaryParserRuleCall_0() { return cYPrimaryParserRuleCall_0; }
		
		//({YMulOrDiv.left=current} op=('*' | '/') right=YPrimary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{YMulOrDiv.left=current}
		public Action getYMulOrDivLeftAction_1_0() { return cYMulOrDivLeftAction_1_0; }
		
		//op=('*' | '/')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('*' | '/')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }
		
		//right=YPrimary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//YPrimary
		public RuleCall getRightYPrimaryParserRuleCall_1_2_0() { return cRightYPrimaryParserRuleCall_1_2_0; }
	}
	public class YPrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YPrimary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cYParentiesAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cAAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cAYOrExpressionParserRuleCall_0_2_0 = (RuleCall)cAAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cYNotAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionYPrimaryParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final RuleCall cYSelectionExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//YPrimary YExpression:
		//	{YParenties} '(' a=YOrExpression ')' | {YNot} "!" expression=YPrimary | YSelectionExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{YParenties} '(' a=YOrExpression ')' | {YNot} "!" expression=YPrimary | YSelectionExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{YParenties} '(' a=YOrExpression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//{YParenties}
		public Action getYParentiesAction_0_0() { return cYParentiesAction_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//a=YOrExpression
		public Assignment getAAssignment_0_2() { return cAAssignment_0_2; }
		
		//YOrExpression
		public RuleCall getAYOrExpressionParserRuleCall_0_2_0() { return cAYOrExpressionParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//{YNot} "!" expression=YPrimary
		public Group getGroup_1() { return cGroup_1; }
		
		//{YNot}
		public Action getYNotAction_1_0() { return cYNotAction_1_0; }
		
		//"!"
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }
		
		//expression=YPrimary
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//YPrimary
		public RuleCall getExpressionYPrimaryParserRuleCall_1_2_0() { return cExpressionYPrimaryParserRuleCall_1_2_0; }
		
		//YSelectionExpression
		public RuleCall getYSelectionExpressionParserRuleCall_2() { return cYSelectionExpressionParserRuleCall_2; }
	}
	public class YTerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YTerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cYStringConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cYIntConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cYBoolConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cValueAlternatives_2_1_0 = (Alternatives)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_1_0_0 = (Keyword)cValueAlternatives_2_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_1_0_1 = (Keyword)cValueAlternatives_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cYSelfAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cSelfKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cYSuperAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cSuperKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cYNullAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cNullKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cYSymbolRefAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cSymbolAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cSymbolYSymbolCrossReference_6_1_0 = (CrossReference)cSymbolAssignment_6_1.eContents().get(0);
		private final RuleCall cSymbolYSymbolIDTerminalRuleCall_6_1_0_1 = (RuleCall)cSymbolYSymbolCrossReference_6_1_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cYNewAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cNewKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cTypeAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final CrossReference cTypeYClassCrossReference_7_2_0 = (CrossReference)cTypeAssignment_7_2.eContents().get(0);
		private final RuleCall cTypeYClassQualifiedNameParserRuleCall_7_2_0_1 = (RuleCall)cTypeYClassCrossReference_7_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Group cGroup_7_4 = (Group)cGroup_7.eContents().get(4);
		private final Assignment cArgumentsAssignment_7_4_0 = (Assignment)cGroup_7_4.eContents().get(0);
		private final RuleCall cArgumentsYOrExpressionParserRuleCall_7_4_0_0 = (RuleCall)cArgumentsAssignment_7_4_0.eContents().get(0);
		private final Group cGroup_7_4_1 = (Group)cGroup_7_4.eContents().get(1);
		private final Keyword cCommaKeyword_7_4_1_0 = (Keyword)cGroup_7_4_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_7_4_1_1 = (Assignment)cGroup_7_4_1.eContents().get(1);
		private final RuleCall cArgumentsYOrExpressionParserRuleCall_7_4_1_1_0 = (RuleCall)cArgumentsAssignment_7_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_5 = (Keyword)cGroup_7.eContents().get(5);
		
		//YTerminalExpression YExpression:
		//	{YStringConstant} value=STRING | {YIntConstant} value=INT | {YBoolConstant} value=('true' | 'false') | {YSelf} 'self'
		//	| {YSuper} 'super' | {YNull} 'null' | {YSymbolRef} symbol=[YSymbol] | {YNew} 'new' type=[YClass|QualifiedName] '('
		//	(arguments+=YOrExpression (',' arguments+=YOrExpression)*)? ')'
		//	//|	'(' YOrExpression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{YStringConstant} value=STRING | {YIntConstant} value=INT | {YBoolConstant} value=('true' | 'false') | {YSelf} 'self' |
		//{YSuper} 'super' | {YNull} 'null' | {YSymbolRef} symbol=[YSymbol] | {YNew} 'new' type=[YClass|QualifiedName] '('
		//(arguments+=YOrExpression (',' arguments+=YOrExpression)*)? ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{YStringConstant} value=STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//{YStringConstant}
		public Action getYStringConstantAction_0_0() { return cYStringConstantAction_0_0; }
		
		//value=STRING
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_1_0() { return cValueSTRINGTerminalRuleCall_0_1_0; }
		
		//{YIntConstant} value=INT
		public Group getGroup_1() { return cGroup_1; }
		
		//{YIntConstant}
		public Action getYIntConstantAction_1_0() { return cYIntConstantAction_1_0; }
		
		//value=INT
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_1_0() { return cValueINTTerminalRuleCall_1_1_0; }
		
		//{YBoolConstant} value=('true' | 'false')
		public Group getGroup_2() { return cGroup_2; }
		
		//{YBoolConstant}
		public Action getYBoolConstantAction_2_0() { return cYBoolConstantAction_2_0; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_2_1_0() { return cValueAlternatives_2_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_2_1_0_0() { return cValueTrueKeyword_2_1_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_2_1_0_1() { return cValueFalseKeyword_2_1_0_1; }
		
		//{YSelf} 'self'
		public Group getGroup_3() { return cGroup_3; }
		
		//{YSelf}
		public Action getYSelfAction_3_0() { return cYSelfAction_3_0; }
		
		//'self'
		public Keyword getSelfKeyword_3_1() { return cSelfKeyword_3_1; }
		
		//{YSuper} 'super'
		public Group getGroup_4() { return cGroup_4; }
		
		//{YSuper}
		public Action getYSuperAction_4_0() { return cYSuperAction_4_0; }
		
		//'super'
		public Keyword getSuperKeyword_4_1() { return cSuperKeyword_4_1; }
		
		//{YNull} 'null'
		public Group getGroup_5() { return cGroup_5; }
		
		//{YNull}
		public Action getYNullAction_5_0() { return cYNullAction_5_0; }
		
		//'null'
		public Keyword getNullKeyword_5_1() { return cNullKeyword_5_1; }
		
		//{YSymbolRef} symbol=[YSymbol]
		public Group getGroup_6() { return cGroup_6; }
		
		//{YSymbolRef}
		public Action getYSymbolRefAction_6_0() { return cYSymbolRefAction_6_0; }
		
		//symbol=[YSymbol]
		public Assignment getSymbolAssignment_6_1() { return cSymbolAssignment_6_1; }
		
		//[YSymbol]
		public CrossReference getSymbolYSymbolCrossReference_6_1_0() { return cSymbolYSymbolCrossReference_6_1_0; }
		
		//ID
		public RuleCall getSymbolYSymbolIDTerminalRuleCall_6_1_0_1() { return cSymbolYSymbolIDTerminalRuleCall_6_1_0_1; }
		
		//{YNew} 'new' type=[YClass|QualifiedName] '(' (arguments+=YOrExpression (',' arguments+=YOrExpression)*)? ')'
		public Group getGroup_7() { return cGroup_7; }
		
		//{YNew}
		public Action getYNewAction_7_0() { return cYNewAction_7_0; }
		
		//'new'
		public Keyword getNewKeyword_7_1() { return cNewKeyword_7_1; }
		
		//type=[YClass|QualifiedName]
		public Assignment getTypeAssignment_7_2() { return cTypeAssignment_7_2; }
		
		//[YClass|QualifiedName]
		public CrossReference getTypeYClassCrossReference_7_2_0() { return cTypeYClassCrossReference_7_2_0; }
		
		//QualifiedName
		public RuleCall getTypeYClassQualifiedNameParserRuleCall_7_2_0_1() { return cTypeYClassQualifiedNameParserRuleCall_7_2_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_3() { return cLeftParenthesisKeyword_7_3; }
		
		//(arguments+=YOrExpression (',' arguments+=YOrExpression)*)?
		public Group getGroup_7_4() { return cGroup_7_4; }
		
		//arguments+=YOrExpression
		public Assignment getArgumentsAssignment_7_4_0() { return cArgumentsAssignment_7_4_0; }
		
		//YOrExpression
		public RuleCall getArgumentsYOrExpressionParserRuleCall_7_4_0_0() { return cArgumentsYOrExpressionParserRuleCall_7_4_0_0; }
		
		//(',' arguments+=YOrExpression)*
		public Group getGroup_7_4_1() { return cGroup_7_4_1; }
		
		//','
		public Keyword getCommaKeyword_7_4_1_0() { return cCommaKeyword_7_4_1_0; }
		
		//arguments+=YOrExpression
		public Assignment getArgumentsAssignment_7_4_1_1() { return cArgumentsAssignment_7_4_1_1; }
		
		//YOrExpression
		public RuleCall getArgumentsYOrExpressionParserRuleCall_7_4_1_1_0() { return cArgumentsYOrExpressionParserRuleCall_7_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_5() { return cRightParenthesisKeyword_7_5; }
	}
	public class YReadStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YReadStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStructsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStructsYStructRefPairParserRuleCall_1_0 = (RuleCall)cStructsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStructsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStructsYStructRefPairParserRuleCall_2_1_0 = (RuleCall)cStructsAssignment_2_1.eContents().get(0);
		private final Assignment cJoinclauseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cJoinclauseYJoinParserRuleCall_3_0 = (RuleCall)cJoinclauseAssignment_3.eContents().get(0);
		private final Assignment cWhereclauseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cWhereclauseYWhereParserRuleCall_4_0 = (RuleCall)cWhereclauseAssignment_4.eContents().get(0);
		private final Keyword cSuccessKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSuccessAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSuccessYBlockParserRuleCall_6_0 = (RuleCall)cSuccessAssignment_6.eContents().get(0);
		private final Keyword cNotKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cFoundKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cNotfoundAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cNotfoundYBlockParserRuleCall_9_0 = (RuleCall)cNotfoundAssignment_9.eContents().get(0);
		
		//YReadStatement:
		//	'read' structs+=YStructRefPair (',' structs+=YStructRefPair)* joinclause=YJoin? whereclause=YWhere?
		//	'success' success=YBlock
		//	'not' 'found' notfound=YBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//'read' structs+=YStructRefPair (',' structs+=YStructRefPair)* joinclause=YJoin? whereclause=YWhere? 'success'
		//success=YBlock 'not' 'found' notfound=YBlock
		public Group getGroup() { return cGroup; }
		
		//'read'
		public Keyword getReadKeyword_0() { return cReadKeyword_0; }
		
		//structs+=YStructRefPair
		public Assignment getStructsAssignment_1() { return cStructsAssignment_1; }
		
		//YStructRefPair
		public RuleCall getStructsYStructRefPairParserRuleCall_1_0() { return cStructsYStructRefPairParserRuleCall_1_0; }
		
		//(',' structs+=YStructRefPair)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//structs+=YStructRefPair
		public Assignment getStructsAssignment_2_1() { return cStructsAssignment_2_1; }
		
		//YStructRefPair
		public RuleCall getStructsYStructRefPairParserRuleCall_2_1_0() { return cStructsYStructRefPairParserRuleCall_2_1_0; }
		
		//joinclause=YJoin?
		public Assignment getJoinclauseAssignment_3() { return cJoinclauseAssignment_3; }
		
		//YJoin
		public RuleCall getJoinclauseYJoinParserRuleCall_3_0() { return cJoinclauseYJoinParserRuleCall_3_0; }
		
		//whereclause=YWhere?
		public Assignment getWhereclauseAssignment_4() { return cWhereclauseAssignment_4; }
		
		//YWhere
		public RuleCall getWhereclauseYWhereParserRuleCall_4_0() { return cWhereclauseYWhereParserRuleCall_4_0; }
		
		//'success'
		public Keyword getSuccessKeyword_5() { return cSuccessKeyword_5; }
		
		//success=YBlock
		public Assignment getSuccessAssignment_6() { return cSuccessAssignment_6; }
		
		//YBlock
		public RuleCall getSuccessYBlockParserRuleCall_6_0() { return cSuccessYBlockParserRuleCall_6_0; }
		
		//'not'
		public Keyword getNotKeyword_7() { return cNotKeyword_7; }
		
		//'found'
		public Keyword getFoundKeyword_8() { return cFoundKeyword_8; }
		
		//notfound=YBlock
		public Assignment getNotfoundAssignment_9() { return cNotfoundAssignment_9; }
		
		//YBlock
		public RuleCall getNotfoundYBlockParserRuleCall_9_0() { return cNotfoundYBlockParserRuleCall_9_0; }
	}
	public class YReadEachStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YReadEachStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEachKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStructsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStructsYStructRefPairParserRuleCall_2_0 = (RuleCall)cStructsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cStructsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cStructsYStructRefPairParserRuleCall_3_1_0 = (RuleCall)cStructsAssignment_3_1.eContents().get(0);
		private final Assignment cJoinclauseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cJoinclauseYJoinParserRuleCall_4_0 = (RuleCall)cJoinclauseAssignment_4.eContents().get(0);
		private final Assignment cWhereclauseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cWhereclauseYWhereParserRuleCall_5_0 = (RuleCall)cWhereclauseAssignment_5.eContents().get(0);
		private final Keyword cTargetKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTargetAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cTargetYPropertyCrossReference_7_0 = (CrossReference)cTargetAssignment_7.eContents().get(0);
		private final RuleCall cTargetYPropertyIDTerminalRuleCall_7_0_1 = (RuleCall)cTargetYPropertyCrossReference_7_0.eContents().get(1);
		private final Assignment cSuccessAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cSuccessYBlockParserRuleCall_8_0 = (RuleCall)cSuccessAssignment_8.eContents().get(0);
		
		//YReadEachStatement:
		//	'read' 'each' structs+=YStructRefPair (',' structs+=YStructRefPair)* joinclause=YJoin? whereclause=YWhere?
		//	'target' target=[YProperty] success=YBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//'read' 'each' structs+=YStructRefPair (',' structs+=YStructRefPair)* joinclause=YJoin? whereclause=YWhere? 'target'
		//target=[YProperty] success=YBlock
		public Group getGroup() { return cGroup; }
		
		//'read'
		public Keyword getReadKeyword_0() { return cReadKeyword_0; }
		
		//'each'
		public Keyword getEachKeyword_1() { return cEachKeyword_1; }
		
		//structs+=YStructRefPair
		public Assignment getStructsAssignment_2() { return cStructsAssignment_2; }
		
		//YStructRefPair
		public RuleCall getStructsYStructRefPairParserRuleCall_2_0() { return cStructsYStructRefPairParserRuleCall_2_0; }
		
		//(',' structs+=YStructRefPair)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//structs+=YStructRefPair
		public Assignment getStructsAssignment_3_1() { return cStructsAssignment_3_1; }
		
		//YStructRefPair
		public RuleCall getStructsYStructRefPairParserRuleCall_3_1_0() { return cStructsYStructRefPairParserRuleCall_3_1_0; }
		
		//joinclause=YJoin?
		public Assignment getJoinclauseAssignment_4() { return cJoinclauseAssignment_4; }
		
		//YJoin
		public RuleCall getJoinclauseYJoinParserRuleCall_4_0() { return cJoinclauseYJoinParserRuleCall_4_0; }
		
		//whereclause=YWhere?
		public Assignment getWhereclauseAssignment_5() { return cWhereclauseAssignment_5; }
		
		//YWhere
		public RuleCall getWhereclauseYWhereParserRuleCall_5_0() { return cWhereclauseYWhereParserRuleCall_5_0; }
		
		//'target'
		public Keyword getTargetKeyword_6() { return cTargetKeyword_6; }
		
		//target=[YProperty]
		public Assignment getTargetAssignment_7() { return cTargetAssignment_7; }
		
		//[YProperty]
		public CrossReference getTargetYPropertyCrossReference_7_0() { return cTargetYPropertyCrossReference_7_0; }
		
		//ID
		public RuleCall getTargetYPropertyIDTerminalRuleCall_7_0_1() { return cTargetYPropertyIDTerminalRuleCall_7_0_1; }
		
		//success=YBlock
		public Assignment getSuccessAssignment_8() { return cSuccessAssignment_8; }
		
		//YBlock
		public RuleCall getSuccessYBlockParserRuleCall_8_0() { return cSuccessYBlockParserRuleCall_8_0; }
	}
	public class YCreateStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YCreateStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStructAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStructYStructRefPairParserRuleCall_1_0 = (RuleCall)cStructAssignment_1.eContents().get(0);
		private final Assignment cSetBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSetBlockYBlockParserRuleCall_2_0 = (RuleCall)cSetBlockAssignment_2.eContents().get(0);
		private final Keyword cSuccessKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSuccessAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSuccessYBlockParserRuleCall_4_0 = (RuleCall)cSuccessAssignment_4.eContents().get(0);
		private final Keyword cAlreadyKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cExistKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cAlreadyExistAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAlreadyExistYBlockParserRuleCall_7_0 = (RuleCall)cAlreadyExistAssignment_7.eContents().get(0);
		
		//YCreateStatement:
		//	'create' struct=YStructRefPair
		//	setBlock=YBlock
		//	'success' success=YBlock
		//	'already' 'exist' alreadyExist=YBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//'create' struct=YStructRefPair setBlock=YBlock 'success' success=YBlock 'already' 'exist' alreadyExist=YBlock
		public Group getGroup() { return cGroup; }
		
		//'create'
		public Keyword getCreateKeyword_0() { return cCreateKeyword_0; }
		
		//struct=YStructRefPair
		public Assignment getStructAssignment_1() { return cStructAssignment_1; }
		
		//YStructRefPair
		public RuleCall getStructYStructRefPairParserRuleCall_1_0() { return cStructYStructRefPairParserRuleCall_1_0; }
		
		//setBlock=YBlock
		public Assignment getSetBlockAssignment_2() { return cSetBlockAssignment_2; }
		
		//YBlock
		public RuleCall getSetBlockYBlockParserRuleCall_2_0() { return cSetBlockYBlockParserRuleCall_2_0; }
		
		//'success'
		public Keyword getSuccessKeyword_3() { return cSuccessKeyword_3; }
		
		//success=YBlock
		public Assignment getSuccessAssignment_4() { return cSuccessAssignment_4; }
		
		//YBlock
		public RuleCall getSuccessYBlockParserRuleCall_4_0() { return cSuccessYBlockParserRuleCall_4_0; }
		
		//'already'
		public Keyword getAlreadyKeyword_5() { return cAlreadyKeyword_5; }
		
		//'exist'
		public Keyword getExistKeyword_6() { return cExistKeyword_6; }
		
		//alreadyExist=YBlock
		public Assignment getAlreadyExistAssignment_7() { return cAlreadyExistAssignment_7; }
		
		//YBlock
		public RuleCall getAlreadyExistYBlockParserRuleCall_7_0() { return cAlreadyExistYBlockParserRuleCall_7_0; }
	}
	public class YUpdateStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YUpdateStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUpdateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStructAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStructYStructRefPairParserRuleCall_1_0 = (RuleCall)cStructAssignment_1.eContents().get(0);
		private final Assignment cSetBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSetBlockYBlockParserRuleCall_2_0 = (RuleCall)cSetBlockAssignment_2.eContents().get(0);
		private final Keyword cSuccessKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSuccessAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSuccessYBlockParserRuleCall_4_0 = (RuleCall)cSuccessAssignment_4.eContents().get(0);
		
		//YUpdateStatement:
		//	'update' struct=YStructRefPair
		//	setBlock=YBlock
		//	'success' success=YBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//'update' struct=YStructRefPair setBlock=YBlock 'success' success=YBlock
		public Group getGroup() { return cGroup; }
		
		//'update'
		public Keyword getUpdateKeyword_0() { return cUpdateKeyword_0; }
		
		//struct=YStructRefPair
		public Assignment getStructAssignment_1() { return cStructAssignment_1; }
		
		//YStructRefPair
		public RuleCall getStructYStructRefPairParserRuleCall_1_0() { return cStructYStructRefPairParserRuleCall_1_0; }
		
		//setBlock=YBlock
		public Assignment getSetBlockAssignment_2() { return cSetBlockAssignment_2; }
		
		//YBlock
		public RuleCall getSetBlockYBlockParserRuleCall_2_0() { return cSetBlockYBlockParserRuleCall_2_0; }
		
		//'success'
		public Keyword getSuccessKeyword_3() { return cSuccessKeyword_3; }
		
		//success=YBlock
		public Assignment getSuccessAssignment_4() { return cSuccessAssignment_4; }
		
		//YBlock
		public RuleCall getSuccessYBlockParserRuleCall_4_0() { return cSuccessYBlockParserRuleCall_4_0; }
	}
	public class YDeleteStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YDeleteStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeleteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStructAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStructYStructRefPairParserRuleCall_1_0 = (RuleCall)cStructAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//YDeleteStatement:
		//	'delete' struct=YStructRefPair ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'delete' struct=YStructRefPair ';'
		public Group getGroup() { return cGroup; }
		
		//'delete'
		public Keyword getDeleteKeyword_0() { return cDeleteKeyword_0; }
		
		//struct=YStructRefPair
		public Assignment getStructAssignment_1() { return cStructAssignment_1; }
		
		//YStructRefPair
		public RuleCall getStructYStructRefPairParserRuleCall_1_0() { return cStructYStructRefPairParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class YAssociateStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAssociateStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssociateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cJoinrefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cJoinrefYJoinDefParserRuleCall_1_0 = (RuleCall)cJoinrefAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//YAssociateStatement:
		//	'associate' joinref=YJoinDef ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'associate' joinref=YJoinDef ';'
		public Group getGroup() { return cGroup; }
		
		//'associate'
		public Keyword getAssociateKeyword_0() { return cAssociateKeyword_0; }
		
		//joinref=YJoinDef
		public Assignment getJoinrefAssignment_1() { return cJoinrefAssignment_1; }
		
		//YJoinDef
		public RuleCall getJoinrefYJoinDefParserRuleCall_1_0() { return cJoinrefYJoinDefParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class YStructRefPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YStructRefPair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStructpropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cStructpropertyYPropertyCrossReference_0_0 = (CrossReference)cStructpropertyAssignment_0.eContents().get(0);
		private final RuleCall cStructpropertyYPropertyIDTerminalRuleCall_0_0_1 = (RuleCall)cStructpropertyYPropertyCrossReference_0_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStructclassAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cStructclassYAnnotEntityCrossReference_2_0 = (CrossReference)cStructclassAssignment_2.eContents().get(0);
		private final RuleCall cStructclassYAnnotEntityIDTerminalRuleCall_2_0_1 = (RuleCall)cStructclassYAnnotEntityCrossReference_2_0.eContents().get(1);
		
		//YStructRefPair:
		//	structproperty=[YProperty] '->' structclass=[YAnnotEntity];
		@Override public ParserRule getRule() { return rule; }
		
		//structproperty=[YProperty] '->' structclass=[YAnnotEntity]
		public Group getGroup() { return cGroup; }
		
		//structproperty=[YProperty]
		public Assignment getStructpropertyAssignment_0() { return cStructpropertyAssignment_0; }
		
		//[YProperty]
		public CrossReference getStructpropertyYPropertyCrossReference_0_0() { return cStructpropertyYPropertyCrossReference_0_0; }
		
		//ID
		public RuleCall getStructpropertyYPropertyIDTerminalRuleCall_0_0_1() { return cStructpropertyYPropertyIDTerminalRuleCall_0_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//structclass=[YAnnotEntity]
		public Assignment getStructclassAssignment_2() { return cStructclassAssignment_2; }
		
		//[YAnnotEntity]
		public CrossReference getStructclassYAnnotEntityCrossReference_2_0() { return cStructclassYAnnotEntityCrossReference_2_0; }
		
		//ID
		public RuleCall getStructclassYAnnotEntityIDTerminalRuleCall_2_0_1() { return cStructclassYAnnotEntityIDTerminalRuleCall_2_0_1; }
	}
	public class YJoinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YJoin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYJoinAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cJoinKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cJoindefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cJoindefYJoinDefParserRuleCall_2_0 = (RuleCall)cJoindefAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cJoindefAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cJoindefYJoinDefParserRuleCall_3_1_0 = (RuleCall)cJoindefAssignment_3_1.eContents().get(0);
		
		//YJoin:
		//	{YJoin} 'join' joindef+=YJoinDef ("," joindef+=YJoinDef)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{YJoin} 'join' joindef+=YJoinDef ("," joindef+=YJoinDef)*
		public Group getGroup() { return cGroup; }
		
		//{YJoin}
		public Action getYJoinAction_0() { return cYJoinAction_0; }
		
		//'join'
		public Keyword getJoinKeyword_1() { return cJoinKeyword_1; }
		
		//joindef+=YJoinDef
		public Assignment getJoindefAssignment_2() { return cJoindefAssignment_2; }
		
		//YJoinDef
		public RuleCall getJoindefYJoinDefParserRuleCall_2_0() { return cJoindefYJoinDefParserRuleCall_2_0; }
		
		//("," joindef+=YJoinDef)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//joindef+=YJoinDef
		public Assignment getJoindefAssignment_3_1() { return cJoindefAssignment_3_1; }
		
		//YJoinDef
		public RuleCall getJoindefYJoinDefParserRuleCall_3_1_0() { return cJoindefYJoinDefParserRuleCall_3_1_0; }
	}
	public class YJoinDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YJoinDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromViewAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFromViewYPropertyCrossReference_0_0 = (CrossReference)cFromViewAssignment_0.eContents().get(0);
		private final RuleCall cFromViewYPropertyIDTerminalRuleCall_0_0_1 = (RuleCall)cFromViewYPropertyCrossReference_0_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRelRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRelRefYAnnotRelCrossReference_2_0 = (CrossReference)cRelRefAssignment_2.eContents().get(0);
		private final RuleCall cRelRefYAnnotRelQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cRelRefYAnnotRelCrossReference_2_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cToViewAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cToViewYPropertyCrossReference_4_0 = (CrossReference)cToViewAssignment_4.eContents().get(0);
		private final RuleCall cToViewYPropertyIDTerminalRuleCall_4_0_1 = (RuleCall)cToViewYPropertyCrossReference_4_0.eContents().get(1);
		
		//YJoinDef:
		//	fromView=[YProperty] '->' relRef+=[YAnnotRel|QualifiedName] '->' toView=[YProperty];
		@Override public ParserRule getRule() { return rule; }
		
		//fromView=[YProperty] '->' relRef+=[YAnnotRel|QualifiedName] '->' toView=[YProperty]
		public Group getGroup() { return cGroup; }
		
		//fromView=[YProperty]
		public Assignment getFromViewAssignment_0() { return cFromViewAssignment_0; }
		
		//[YProperty]
		public CrossReference getFromViewYPropertyCrossReference_0_0() { return cFromViewYPropertyCrossReference_0_0; }
		
		//ID
		public RuleCall getFromViewYPropertyIDTerminalRuleCall_0_0_1() { return cFromViewYPropertyIDTerminalRuleCall_0_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//relRef+=[YAnnotRel|QualifiedName]
		public Assignment getRelRefAssignment_2() { return cRelRefAssignment_2; }
		
		//[YAnnotRel|QualifiedName]
		public CrossReference getRelRefYAnnotRelCrossReference_2_0() { return cRelRefYAnnotRelCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getRelRefYAnnotRelQualifiedNameParserRuleCall_2_0_1() { return cRelRefYAnnotRelQualifiedNameParserRuleCall_2_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//toView=[YProperty]
		public Assignment getToViewAssignment_4() { return cToViewAssignment_4; }
		
		//[YProperty]
		public CrossReference getToViewYPropertyCrossReference_4_0() { return cToViewYPropertyCrossReference_4_0; }
		
		//ID
		public RuleCall getToViewYPropertyIDTerminalRuleCall_4_0_1() { return cToViewYPropertyIDTerminalRuleCall_4_0_1; }
	}
	public class YWhereElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YWhere");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYWhereAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhereKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionYOrExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//YWhere:
		//	{YWhere} 'where' expression=YOrExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{YWhere} 'where' expression=YOrExpression
		public Group getGroup() { return cGroup; }
		
		//{YWhere}
		public Action getYWhereAction_0() { return cYWhereAction_0; }
		
		//'where'
		public Keyword getWhereKeyword_1() { return cWhereKeyword_1; }
		
		//expression=YOrExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//YOrExpression
		public RuleCall getExpressionYOrExpressionParserRuleCall_2_0() { return cExpressionYOrExpressionParserRuleCall_2_0; }
	}
	public class YWhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YWhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionYOrExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyYBlockParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//YWhileStatement:
		//	'while' expression=YOrExpression
		//	body=YBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//'while' expression=YOrExpression body=YBlock
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//expression=YOrExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//YOrExpression
		public RuleCall getExpressionYOrExpressionParserRuleCall_1_0() { return cExpressionYOrExpressionParserRuleCall_1_0; }
		
		//body=YBlock
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//YBlock
		public RuleCall getBodyYBlockParserRuleCall_2_0() { return cBodyYBlockParserRuleCall_2_0; }
	}
	public class YRepeatWhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YRepeatWhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRepeatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyYBlockParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		private final Keyword cWhileKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionYOrExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//YRepeatWhileStatement:
		//	'repeat'
		//	body=YBlock
		//	'while' '(' expression=YOrExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'repeat' body=YBlock 'while' '(' expression=YOrExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'repeat'
		public Keyword getRepeatKeyword_0() { return cRepeatKeyword_0; }
		
		//body=YBlock
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//YBlock
		public RuleCall getBodyYBlockParserRuleCall_1_0() { return cBodyYBlockParserRuleCall_1_0; }
		
		//'while'
		public Keyword getWhileKeyword_2() { return cWhileKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//expression=YOrExpression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }
		
		//YOrExpression
		public RuleCall getExpressionYOrExpressionParserRuleCall_4_0() { return cExpressionYOrExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class YForInStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YForInStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cItemYPropertyCrossReference_1_0 = (CrossReference)cItemAssignment_1.eContents().get(0);
		private final RuleCall cItemYPropertyIDTerminalRuleCall_1_0_1 = (RuleCall)cItemYPropertyCrossReference_1_0.eContents().get(1);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCollectionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cCollectionYPropertyCrossReference_3_0 = (CrossReference)cCollectionAssignment_3.eContents().get(0);
		private final RuleCall cCollectionYPropertyIDTerminalRuleCall_3_0_1 = (RuleCall)cCollectionYPropertyCrossReference_3_0.eContents().get(1);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyYBlockParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//YForInStatement:
		//	'for' item=[YProperty] 'in' collection=[YProperty] body=YBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//'for' item=[YProperty] 'in' collection=[YProperty] body=YBlock
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//item=[YProperty]
		public Assignment getItemAssignment_1() { return cItemAssignment_1; }
		
		//[YProperty]
		public CrossReference getItemYPropertyCrossReference_1_0() { return cItemYPropertyCrossReference_1_0; }
		
		//ID
		public RuleCall getItemYPropertyIDTerminalRuleCall_1_0_1() { return cItemYPropertyIDTerminalRuleCall_1_0_1; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//collection=[YProperty]
		public Assignment getCollectionAssignment_3() { return cCollectionAssignment_3; }
		
		//[YProperty]
		public CrossReference getCollectionYPropertyCrossReference_3_0() { return cCollectionYPropertyCrossReference_3_0; }
		
		//ID
		public RuleCall getCollectionYPropertyIDTerminalRuleCall_3_0_1() { return cCollectionYPropertyIDTerminalRuleCall_3_0_1; }
		
		//body=YBlock
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//YBlock
		public RuleCall getBodyYBlockParserRuleCall_4_0() { return cBodyYBlockParserRuleCall_4_0; }
	}
	public class YAnnotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cTypeAlternatives_1_0 = (Alternatives)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeYAnnotLengthParserRuleCall_1_0_0 = (RuleCall)cTypeAlternatives_1_0.eContents().get(0);
		private final RuleCall cTypeYAnnotDecimalParserRuleCall_1_0_1 = (RuleCall)cTypeAlternatives_1_0.eContents().get(1);
		private final RuleCall cTypeYAnnotActionParserRuleCall_1_0_2 = (RuleCall)cTypeAlternatives_1_0.eContents().get(2);
		private final RuleCall cTypeYAnnotMessageParserRuleCall_1_0_3 = (RuleCall)cTypeAlternatives_1_0.eContents().get(3);
		private final RuleCall cTypeYAnnotMsgTypeParserRuleCall_1_0_4 = (RuleCall)cTypeAlternatives_1_0.eContents().get(4);
		
		///*
		// * Predefined annotations
		// */ YAnnot:
		//	{YAnnot} type=(YAnnotLength | YAnnotDecimal | YAnnotAction | YAnnotMessage | YAnnotMsgType);
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnot} type=(YAnnotLength | YAnnotDecimal | YAnnotAction | YAnnotMessage | YAnnotMsgType)
		public Group getGroup() { return cGroup; }
		
		//{YAnnot}
		public Action getYAnnotAction_0() { return cYAnnotAction_0; }
		
		//type=(YAnnotLength | YAnnotDecimal | YAnnotAction | YAnnotMessage | YAnnotMsgType)
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//(YAnnotLength | YAnnotDecimal | YAnnotAction | YAnnotMessage | YAnnotMsgType)
		public Alternatives getTypeAlternatives_1_0() { return cTypeAlternatives_1_0; }
		
		//YAnnotLength
		public RuleCall getTypeYAnnotLengthParserRuleCall_1_0_0() { return cTypeYAnnotLengthParserRuleCall_1_0_0; }
		
		//YAnnotDecimal
		public RuleCall getTypeYAnnotDecimalParserRuleCall_1_0_1() { return cTypeYAnnotDecimalParserRuleCall_1_0_1; }
		
		//YAnnotAction
		public RuleCall getTypeYAnnotActionParserRuleCall_1_0_2() { return cTypeYAnnotActionParserRuleCall_1_0_2; }
		
		//YAnnotMessage
		public RuleCall getTypeYAnnotMessageParserRuleCall_1_0_3() { return cTypeYAnnotMessageParserRuleCall_1_0_3; }
		
		//YAnnotMsgType
		public RuleCall getTypeYAnnotMsgTypeParserRuleCall_1_0_4() { return cTypeYAnnotMsgTypeParserRuleCall_1_0_4; }
	}
	public class YAnnotTopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotTop");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeYAnnotEntityParserRuleCall_0_0 = (RuleCall)cTypeAlternatives_0.eContents().get(0);
		private final RuleCall cTypeYAnnotTechnicalDesignParserRuleCall_0_1 = (RuleCall)cTypeAlternatives_0.eContents().get(1);
		private final RuleCall cTypeYAnnotSwiftParserRuleCall_0_2 = (RuleCall)cTypeAlternatives_0.eContents().get(2);
		private final RuleCall cTypeYAnnotJavaParserRuleCall_0_3 = (RuleCall)cTypeAlternatives_0.eContents().get(3);
		private final RuleCall cTypeYAnnotDatabaseParserRuleCall_0_4 = (RuleCall)cTypeAlternatives_0.eContents().get(4);
		
		//YAnnotTop:
		//	type=(YAnnotEntity | YAnnotTechnicalDesign | YAnnotSwift | YAnnotJava | YAnnotDatabase);
		@Override public ParserRule getRule() { return rule; }
		
		//type=(YAnnotEntity | YAnnotTechnicalDesign | YAnnotSwift | YAnnotJava | YAnnotDatabase)
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//(YAnnotEntity | YAnnotTechnicalDesign | YAnnotSwift | YAnnotJava | YAnnotDatabase)
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }
		
		//YAnnotEntity
		public RuleCall getTypeYAnnotEntityParserRuleCall_0_0() { return cTypeYAnnotEntityParserRuleCall_0_0; }
		
		//YAnnotTechnicalDesign
		public RuleCall getTypeYAnnotTechnicalDesignParserRuleCall_0_1() { return cTypeYAnnotTechnicalDesignParserRuleCall_0_1; }
		
		//YAnnotSwift
		public RuleCall getTypeYAnnotSwiftParserRuleCall_0_2() { return cTypeYAnnotSwiftParserRuleCall_0_2; }
		
		//YAnnotJava
		public RuleCall getTypeYAnnotJavaParserRuleCall_0_3() { return cTypeYAnnotJavaParserRuleCall_0_3; }
		
		//YAnnotDatabase
		public RuleCall getTypeYAnnotDatabaseParserRuleCall_0_4() { return cTypeYAnnotDatabaseParserRuleCall_0_4; }
	}
	public class YAnnotLengthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotLength");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotLengthAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLengthKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLengthAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLengthINTTerminalRuleCall_3_0 = (RuleCall)cLengthAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//YAnnotLength YAnnot:
		//	{YAnnotLength} '@length' '(' length=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotLength} '@length' '(' length=INT ')'
		public Group getGroup() { return cGroup; }
		
		//{YAnnotLength}
		public Action getYAnnotLengthAction_0() { return cYAnnotLengthAction_0; }
		
		//'@length'
		public Keyword getLengthKeyword_1() { return cLengthKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//length=INT
		public Assignment getLengthAssignment_3() { return cLengthAssignment_3; }
		
		//INT
		public RuleCall getLengthINTTerminalRuleCall_3_0() { return cLengthINTTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class YAnnotDecimalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotDecimal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotDecimalAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDecimalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLengthAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLengthINTTerminalRuleCall_3_0 = (RuleCall)cLengthAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDecimalAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDecimalINTTerminalRuleCall_5_0 = (RuleCall)cDecimalAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//YAnnotDecimal YAnnot:
		//	{YAnnotDecimal} '@decimal' '(' length=INT ',' decimal=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotDecimal} '@decimal' '(' length=INT ',' decimal=INT ')'
		public Group getGroup() { return cGroup; }
		
		//{YAnnotDecimal}
		public Action getYAnnotDecimalAction_0() { return cYAnnotDecimalAction_0; }
		
		//'@decimal'
		public Keyword getDecimalKeyword_1() { return cDecimalKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//length=INT
		public Assignment getLengthAssignment_3() { return cLengthAssignment_3; }
		
		//INT
		public RuleCall getLengthINTTerminalRuleCall_3_0() { return cLengthINTTerminalRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//decimal=INT
		public Assignment getDecimalAssignment_5() { return cDecimalAssignment_5; }
		
		//INT
		public RuleCall getDecimalINTTerminalRuleCall_5_0() { return cDecimalINTTerminalRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class YAnnotActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cActionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionValidIDParserRuleCall_3_0 = (RuleCall)cActionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//YAnnotAction YAnnot:
		//	{YAnnotAction} '@action' '(' action=ValidID ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotAction} '@action' '(' action=ValidID ')'
		public Group getGroup() { return cGroup; }
		
		//{YAnnotAction}
		public Action getYAnnotActionAction_0() { return cYAnnotActionAction_0; }
		
		//'@action'
		public Keyword getActionKeyword_1() { return cActionKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//action=ValidID
		public Assignment getActionAssignment_3() { return cActionAssignment_3; }
		
		//ValidID
		public RuleCall getActionValidIDParserRuleCall_3_0() { return cActionValidIDParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class YAnnotMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotMessageAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMessageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMsgAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMsgSTRINGTerminalRuleCall_3_0 = (RuleCall)cMsgAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//YAnnotMessage YAnnot:
		//	{YAnnotMessage} '@message' '(' msg=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotMessage} '@message' '(' msg=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//{YAnnotMessage}
		public Action getYAnnotMessageAction_0() { return cYAnnotMessageAction_0; }
		
		//'@message'
		public Keyword getMessageKeyword_1() { return cMessageKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//msg=STRING
		public Assignment getMsgAssignment_3() { return cMsgAssignment_3; }
		
		//STRING
		public RuleCall getMsgSTRINGTerminalRuleCall_3_0() { return cMsgSTRINGTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class YAnnotMsgTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotMsgType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMsgtypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMsgtypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMsgtypeValidIDParserRuleCall_2_0 = (RuleCall)cMsgtypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//YAnnotMsgType YAnnot:
		//	'@msgtype' '(' msgtype=ValidID ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'@msgtype' '(' msgtype=ValidID ')'
		public Group getGroup() { return cGroup; }
		
		//'@msgtype'
		public Keyword getMsgtypeKeyword_0() { return cMsgtypeKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//msgtype=ValidID
		public Assignment getMsgtypeAssignment_2() { return cMsgtypeAssignment_2; }
		
		//ValidID
		public RuleCall getMsgtypeValidIDParserRuleCall_2_0() { return cMsgtypeValidIDParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class YAnnotEntityInnerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotEntityInner");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cYAnnotAttrParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cYAnnotRelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cYAnnotIdParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//YAnnotEntityInner:
		//	YAnnotAttr | YAnnotRel | YAnnotId;
		@Override public ParserRule getRule() { return rule; }
		
		//YAnnotAttr | YAnnotRel | YAnnotId
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//YAnnotAttr
		public RuleCall getYAnnotAttrParserRuleCall_0() { return cYAnnotAttrParserRuleCall_0; }
		
		//YAnnotRel
		public RuleCall getYAnnotRelParserRuleCall_1() { return cYAnnotRelParserRuleCall_1; }
		
		//YAnnotId
		public RuleCall getYAnnotIdParserRuleCall_2() { return cYAnnotIdParserRuleCall_2; }
	}
	public class YAnnotEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotEntity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperannotAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperannotYAnnotEntityCrossReference_2_1_0 = (CrossReference)cSuperannotAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperannotYAnnotEntityQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cSuperannotYAnnotEntityCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAnnotsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAnnotsYAnnotEntityInnerParserRuleCall_4_0 = (RuleCall)cAnnotsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//YAnnotEntity:
		//	'@entity' name=ValidID (':' superannot=[YAnnotEntity|QualifiedName])? '{'
		//	annots+=YAnnotEntityInner*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'@entity' name=ValidID (':' superannot=[YAnnotEntity|QualifiedName])? '{' annots+=YAnnotEntityInner* '}'
		public Group getGroup() { return cGroup; }
		
		//'@entity'
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//(':' superannot=[YAnnotEntity|QualifiedName])?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//superannot=[YAnnotEntity|QualifiedName]
		public Assignment getSuperannotAssignment_2_1() { return cSuperannotAssignment_2_1; }
		
		//[YAnnotEntity|QualifiedName]
		public CrossReference getSuperannotYAnnotEntityCrossReference_2_1_0() { return cSuperannotYAnnotEntityCrossReference_2_1_0; }
		
		//QualifiedName
		public RuleCall getSuperannotYAnnotEntityQualifiedNameParserRuleCall_2_1_0_1() { return cSuperannotYAnnotEntityQualifiedNameParserRuleCall_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//annots+=YAnnotEntityInner*
		public Assignment getAnnotsAssignment_4() { return cAnnotsAssignment_4; }
		
		//YAnnotEntityInner
		public RuleCall getAnnotsYAnnotEntityInnerParserRuleCall_4_0() { return cAnnotsYAnnotEntityInnerParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class YAnnotAttrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotAttr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotAttrAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAttrKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cYclassAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cYclassYClassCrossReference_4_0 = (CrossReference)cYclassAssignment_4.eContents().get(0);
		private final RuleCall cYclassYClassQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cYclassYClassCrossReference_4_0.eContents().get(1);
		private final Assignment cOptionalAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cOptionalQuestionMarkKeyword_5_0 = (Keyword)cOptionalAssignment_5.eContents().get(0);
		private final Assignment cAnnotsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAnnotsYAnnotParserRuleCall_6_0 = (RuleCall)cAnnotsAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//YAnnotAttr:
		//	{YAnnotAttr} '@attr' name=ValidID ':' yclass=[YClass|QualifiedName] optional='?'? annots+=YAnnot* ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotAttr} '@attr' name=ValidID ':' yclass=[YClass|QualifiedName] optional='?'? annots+=YAnnot* ';'?
		public Group getGroup() { return cGroup; }
		
		//{YAnnotAttr}
		public Action getYAnnotAttrAction_0() { return cYAnnotAttrAction_0; }
		
		//'@attr'
		public Keyword getAttrKeyword_1() { return cAttrKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//yclass=[YClass|QualifiedName]
		public Assignment getYclassAssignment_4() { return cYclassAssignment_4; }
		
		//[YClass|QualifiedName]
		public CrossReference getYclassYClassCrossReference_4_0() { return cYclassYClassCrossReference_4_0; }
		
		//QualifiedName
		public RuleCall getYclassYClassQualifiedNameParserRuleCall_4_0_1() { return cYclassYClassQualifiedNameParserRuleCall_4_0_1; }
		
		//optional='?'?
		public Assignment getOptionalAssignment_5() { return cOptionalAssignment_5; }
		
		//'?'
		public Keyword getOptionalQuestionMarkKeyword_5_0() { return cOptionalQuestionMarkKeyword_5_0; }
		
		//annots+=YAnnot*
		public Assignment getAnnotsAssignment_6() { return cAnnotsAssignment_6; }
		
		//YAnnot
		public RuleCall getAnnotsYAnnotParserRuleCall_6_0() { return cAnnotsYAnnotParserRuleCall_6_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class YAnnotRelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotRel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotRelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cParentParentKeyword_2_0 = (Keyword)cParentAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cOptionalAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cOptionalQuestionMarkKeyword_4_0 = (Keyword)cOptionalAssignment_4.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTargetAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cTargetYAnnotEntityCrossReference_6_0 = (CrossReference)cTargetAssignment_6.eContents().get(0);
		private final RuleCall cTargetYAnnotEntityQualifiedNameParserRuleCall_6_0_1 = (RuleCall)cTargetYAnnotEntityCrossReference_6_0.eContents().get(1);
		private final Assignment cManyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Keyword cManyAsteriskKeyword_7_0 = (Keyword)cManyAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cLessThanSignHyphenMinusKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cInverseAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final CrossReference cInverseYAnnotRelCrossReference_8_1_0 = (CrossReference)cInverseAssignment_8_1.eContents().get(0);
		private final RuleCall cInverseYAnnotRelQualifiedNameParserRuleCall_8_1_0_1 = (RuleCall)cInverseYAnnotRelCrossReference_8_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//YAnnotRel:
		//	{YAnnotRel} '@rel' parent?='@parent'? name=ValidID optional?='?'? '->' target=[YAnnotEntity|QualifiedName] many?='*'?
		//	('<-'
		//	inverse=[YAnnotRel|QualifiedName])? ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotRel} '@rel' parent?='@parent'? name=ValidID optional?='?'? '->' target=[YAnnotEntity|QualifiedName] many?='*'?
		//('<-' inverse=[YAnnotRel|QualifiedName])? ';'?
		public Group getGroup() { return cGroup; }
		
		//{YAnnotRel}
		public Action getYAnnotRelAction_0() { return cYAnnotRelAction_0; }
		
		//'@rel'
		public Keyword getRelKeyword_1() { return cRelKeyword_1; }
		
		//parent?='@parent'?
		public Assignment getParentAssignment_2() { return cParentAssignment_2; }
		
		//'@parent'
		public Keyword getParentParentKeyword_2_0() { return cParentParentKeyword_2_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_3_0() { return cNameValidIDParserRuleCall_3_0; }
		
		//optional?='?'?
		public Assignment getOptionalAssignment_4() { return cOptionalAssignment_4; }
		
		//'?'
		public Keyword getOptionalQuestionMarkKeyword_4_0() { return cOptionalQuestionMarkKeyword_4_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_5() { return cHyphenMinusGreaterThanSignKeyword_5; }
		
		//target=[YAnnotEntity|QualifiedName]
		public Assignment getTargetAssignment_6() { return cTargetAssignment_6; }
		
		//[YAnnotEntity|QualifiedName]
		public CrossReference getTargetYAnnotEntityCrossReference_6_0() { return cTargetYAnnotEntityCrossReference_6_0; }
		
		//QualifiedName
		public RuleCall getTargetYAnnotEntityQualifiedNameParserRuleCall_6_0_1() { return cTargetYAnnotEntityQualifiedNameParserRuleCall_6_0_1; }
		
		//many?='*'?
		public Assignment getManyAssignment_7() { return cManyAssignment_7; }
		
		//'*'
		public Keyword getManyAsteriskKeyword_7_0() { return cManyAsteriskKeyword_7_0; }
		
		//('<-' inverse=[YAnnotRel|QualifiedName])?
		public Group getGroup_8() { return cGroup_8; }
		
		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_8_0() { return cLessThanSignHyphenMinusKeyword_8_0; }
		
		//inverse=[YAnnotRel|QualifiedName]
		public Assignment getInverseAssignment_8_1() { return cInverseAssignment_8_1; }
		
		//[YAnnotRel|QualifiedName]
		public CrossReference getInverseYAnnotRelCrossReference_8_1_0() { return cInverseYAnnotRelCrossReference_8_1_0; }
		
		//QualifiedName
		public RuleCall getInverseYAnnotRelQualifiedNameParserRuleCall_8_1_0_1() { return cInverseYAnnotRelQualifiedNameParserRuleCall_8_1_0_1; }
		
		//';'?
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}
	public class YAnnotIdInnerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotIdInner");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cYAnnotAttrParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cYAnnotRelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//YAnnotIdInner:
		//	YAnnotAttr | YAnnotRel;
		@Override public ParserRule getRule() { return rule; }
		
		//YAnnotAttr | YAnnotRel
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//YAnnotAttr
		public RuleCall getYAnnotAttrParserRuleCall_0() { return cYAnnotAttrParserRuleCall_0; }
		
		//YAnnotRel
		public RuleCall getYAnnotRelParserRuleCall_1() { return cYAnnotRelParserRuleCall_1; }
	}
	public class YAnnotIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotIdAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIdKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAnnotsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cAnnotsYAnnotEntityInnerCrossReference_4_0 = (CrossReference)cAnnotsAssignment_4.eContents().get(0);
		private final RuleCall cAnnotsYAnnotEntityInnerIDTerminalRuleCall_4_0_1 = (RuleCall)cAnnotsYAnnotEntityInnerCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAnnotsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cAnnotsYAnnotEntityInnerCrossReference_5_1_0 = (CrossReference)cAnnotsAssignment_5_1.eContents().get(0);
		private final RuleCall cAnnotsYAnnotEntityInnerIDTerminalRuleCall_5_1_0_1 = (RuleCall)cAnnotsYAnnotEntityInnerCrossReference_5_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//YAnnotId:
		//	{YAnnotId} '@id' name=ValidID '(' annots+=[YAnnotEntityInner] (',' annots+=[YAnnotEntityInner])* ')' ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotId} '@id' name=ValidID '(' annots+=[YAnnotEntityInner] (',' annots+=[YAnnotEntityInner])* ')' ';'?
		public Group getGroup() { return cGroup; }
		
		//{YAnnotId}
		public Action getYAnnotIdAction_0() { return cYAnnotIdAction_0; }
		
		//'@id'
		public Keyword getIdKeyword_1() { return cIdKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//annots+=[YAnnotEntityInner]
		public Assignment getAnnotsAssignment_4() { return cAnnotsAssignment_4; }
		
		//[YAnnotEntityInner]
		public CrossReference getAnnotsYAnnotEntityInnerCrossReference_4_0() { return cAnnotsYAnnotEntityInnerCrossReference_4_0; }
		
		//ID
		public RuleCall getAnnotsYAnnotEntityInnerIDTerminalRuleCall_4_0_1() { return cAnnotsYAnnotEntityInnerIDTerminalRuleCall_4_0_1; }
		
		//(',' annots+=[YAnnotEntityInner])*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//annots+=[YAnnotEntityInner]
		public Assignment getAnnotsAssignment_5_1() { return cAnnotsAssignment_5_1; }
		
		//[YAnnotEntityInner]
		public CrossReference getAnnotsYAnnotEntityInnerCrossReference_5_1_0() { return cAnnotsYAnnotEntityInnerCrossReference_5_1_0; }
		
		//ID
		public RuleCall getAnnotsYAnnotEntityInnerIDTerminalRuleCall_5_1_0_1() { return cAnnotsYAnnotEntityInnerIDTerminalRuleCall_5_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//';'?
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class YAnnotTechnicalDesignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotTechnicalDesign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotTechnicalDesignAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTdKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDatabaseKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDatabaseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cDatabaseYAnnotDatabaseCrossReference_3_0 = (CrossReference)cDatabaseAssignment_3.eContents().get(0);
		private final RuleCall cDatabaseYAnnotDatabaseIDTerminalRuleCall_3_0_1 = (RuleCall)cDatabaseYAnnotDatabaseCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFeaturesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFeaturesYAnnotTableParserRuleCall_5_0 = (RuleCall)cFeaturesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		///*
		// * Start Technical design
		// */ YAnnotTechnicalDesign:
		//	{YAnnotTechnicalDesign} '@td' 'database' database=[YAnnotDatabase] '{'
		//	features+=YAnnotTable*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotTechnicalDesign} '@td' 'database' database=[YAnnotDatabase] '{' features+=YAnnotTable* '}'
		public Group getGroup() { return cGroup; }
		
		//{YAnnotTechnicalDesign}
		public Action getYAnnotTechnicalDesignAction_0() { return cYAnnotTechnicalDesignAction_0; }
		
		//'@td'
		public Keyword getTdKeyword_1() { return cTdKeyword_1; }
		
		//'database'
		public Keyword getDatabaseKeyword_2() { return cDatabaseKeyword_2; }
		
		//database=[YAnnotDatabase]
		public Assignment getDatabaseAssignment_3() { return cDatabaseAssignment_3; }
		
		//[YAnnotDatabase]
		public CrossReference getDatabaseYAnnotDatabaseCrossReference_3_0() { return cDatabaseYAnnotDatabaseCrossReference_3_0; }
		
		//ID
		public RuleCall getDatabaseYAnnotDatabaseIDTerminalRuleCall_3_0_1() { return cDatabaseYAnnotDatabaseIDTerminalRuleCall_3_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//features+=YAnnotTable*
		public Assignment getFeaturesAssignment_5() { return cFeaturesAssignment_5; }
		
		//YAnnotTable
		public RuleCall getFeaturesYAnnotTableParserRuleCall_5_0() { return cFeaturesYAnnotTableParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class YAnnotTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotTableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTableKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEntityrefAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cEntityrefYAnnotEntityCrossReference_4_0 = (CrossReference)cEntityrefAssignment_4.eContents().get(0);
		private final RuleCall cEntityrefYAnnotEntityQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cEntityrefYAnnotEntityCrossReference_4_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cColumnsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cColumnsYAnnotAbstractColumnParserRuleCall_6_0 = (RuleCall)cColumnsAssignment_6.eContents().get(0);
		private final Assignment cPrimarykeyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPrimarykeyYAnnotPrimaryKeyParserRuleCall_7_0 = (RuleCall)cPrimarykeyAssignment_7.eContents().get(0);
		private final Assignment cForeignkeysAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cForeignkeysYAnnotForeignKeyParserRuleCall_8_0 = (RuleCall)cForeignkeysAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//YAnnotTable:
		//	{YAnnotTable} '@table' name=ValidID '->' entityref=[YAnnotEntity|QualifiedName] '{'
		//	columns+=YAnnotAbstractColumn*
		//	primarykey=YAnnotPrimaryKey?
		//	foreignkeys+=YAnnotForeignKey*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotTable} '@table' name=ValidID '->' entityref=[YAnnotEntity|QualifiedName] '{' columns+=YAnnotAbstractColumn*
		//primarykey=YAnnotPrimaryKey? foreignkeys+=YAnnotForeignKey* '}'
		public Group getGroup() { return cGroup; }
		
		//{YAnnotTable}
		public Action getYAnnotTableAction_0() { return cYAnnotTableAction_0; }
		
		//'@table'
		public Keyword getTableKeyword_1() { return cTableKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//entityref=[YAnnotEntity|QualifiedName]
		public Assignment getEntityrefAssignment_4() { return cEntityrefAssignment_4; }
		
		//[YAnnotEntity|QualifiedName]
		public CrossReference getEntityrefYAnnotEntityCrossReference_4_0() { return cEntityrefYAnnotEntityCrossReference_4_0; }
		
		//QualifiedName
		public RuleCall getEntityrefYAnnotEntityQualifiedNameParserRuleCall_4_0_1() { return cEntityrefYAnnotEntityQualifiedNameParserRuleCall_4_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//columns+=YAnnotAbstractColumn*
		public Assignment getColumnsAssignment_6() { return cColumnsAssignment_6; }
		
		//YAnnotAbstractColumn
		public RuleCall getColumnsYAnnotAbstractColumnParserRuleCall_6_0() { return cColumnsYAnnotAbstractColumnParserRuleCall_6_0; }
		
		//primarykey=YAnnotPrimaryKey?
		public Assignment getPrimarykeyAssignment_7() { return cPrimarykeyAssignment_7; }
		
		//YAnnotPrimaryKey
		public RuleCall getPrimarykeyYAnnotPrimaryKeyParserRuleCall_7_0() { return cPrimarykeyYAnnotPrimaryKeyParserRuleCall_7_0; }
		
		//foreignkeys+=YAnnotForeignKey*
		public Assignment getForeignkeysAssignment_8() { return cForeignkeysAssignment_8; }
		
		//YAnnotForeignKey
		public RuleCall getForeignkeysYAnnotForeignKeyParserRuleCall_8_0() { return cForeignkeysYAnnotForeignKeyParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class YAnnotColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotColumn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotColumnAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttrrefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAttrrefYAnnotAttrCrossReference_2_0 = (CrossReference)cAttrrefAssignment_2.eContents().get(0);
		private final RuleCall cAttrrefYAnnotAttrQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cAttrrefYAnnotAttrCrossReference_2_0.eContents().get(1);
		private final Keyword cAsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cTypeAlternatives_4_0 = (Alternatives)cTypeAssignment_4.eContents().get(0);
		private final Keyword cTypeVARCHARKeyword_4_0_0 = (Keyword)cTypeAlternatives_4_0.eContents().get(0);
		private final Keyword cTypeCHARKeyword_4_0_1 = (Keyword)cTypeAlternatives_4_0.eContents().get(1);
		private final Keyword cTypeINTEGERKeyword_4_0_2 = (Keyword)cTypeAlternatives_4_0.eContents().get(2);
		private final Keyword cTypeBIGINTKeyword_4_0_3 = (Keyword)cTypeAlternatives_4_0.eContents().get(3);
		private final Keyword cTypeSMALLINTKeyword_4_0_4 = (Keyword)cTypeAlternatives_4_0.eContents().get(4);
		private final Keyword cTypeDECIMALKeyword_4_0_5 = (Keyword)cTypeAlternatives_4_0.eContents().get(5);
		private final Keyword cTypeTIMEKeyword_4_0_6 = (Keyword)cTypeAlternatives_4_0.eContents().get(6);
		private final Keyword cTypeDATEKeyword_4_0_7 = (Keyword)cTypeAlternatives_4_0.eContents().get(7);
		private final Keyword cTypeTIMESTAMPKeyword_4_0_8 = (Keyword)cTypeAlternatives_4_0.eContents().get(8);
		private final Keyword cTypeBOOLEANKeyword_4_0_9 = (Keyword)cTypeAlternatives_4_0.eContents().get(9);
		private final Assignment cOptionalAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cOptionalQuestionMarkKeyword_5_0 = (Keyword)cOptionalAssignment_5.eContents().get(0);
		private final Assignment cAnnotsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Alternatives cAnnotsAlternatives_6_0 = (Alternatives)cAnnotsAssignment_6.eContents().get(0);
		private final RuleCall cAnnotsYAnnotLengthParserRuleCall_6_0_0 = (RuleCall)cAnnotsAlternatives_6_0.eContents().get(0);
		private final RuleCall cAnnotsYAnnotDecimalParserRuleCall_6_0_1 = (RuleCall)cAnnotsAlternatives_6_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//YAnnotColumn:
		//	{YAnnotColumn} '->' attrref=[YAnnotAttr|QualifiedName]
		//	'as' type=('VARCHAR' | 'CHAR' | 'INTEGER' | 'BIGINT' | 'SMALLINT' | 'DECIMAL' | 'TIME' | 'DATE' | 'TIMESTAMP' |
		//	'BOOLEAN') optional='?'? annots+=(YAnnotLength | YAnnotDecimal)* ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotColumn} '->' attrref=[YAnnotAttr|QualifiedName] 'as' type=('VARCHAR' | 'CHAR' | 'INTEGER' | 'BIGINT' | 'SMALLINT'
		//| 'DECIMAL' | 'TIME' | 'DATE' | 'TIMESTAMP' | 'BOOLEAN') optional='?'? annots+=(YAnnotLength | YAnnotDecimal)* ';'?
		public Group getGroup() { return cGroup; }
		
		//{YAnnotColumn}
		public Action getYAnnotColumnAction_0() { return cYAnnotColumnAction_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//attrref=[YAnnotAttr|QualifiedName]
		public Assignment getAttrrefAssignment_2() { return cAttrrefAssignment_2; }
		
		//[YAnnotAttr|QualifiedName]
		public CrossReference getAttrrefYAnnotAttrCrossReference_2_0() { return cAttrrefYAnnotAttrCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getAttrrefYAnnotAttrQualifiedNameParserRuleCall_2_0_1() { return cAttrrefYAnnotAttrQualifiedNameParserRuleCall_2_0_1; }
		
		//'as'
		public Keyword getAsKeyword_3() { return cAsKeyword_3; }
		
		//type=('VARCHAR' | 'CHAR' | 'INTEGER' | 'BIGINT' | 'SMALLINT' | 'DECIMAL' | 'TIME' | 'DATE' | 'TIMESTAMP' | 'BOOLEAN')
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//('VARCHAR' | 'CHAR' | 'INTEGER' | 'BIGINT' | 'SMALLINT' | 'DECIMAL' | 'TIME' | 'DATE' | 'TIMESTAMP' | 'BOOLEAN')
		public Alternatives getTypeAlternatives_4_0() { return cTypeAlternatives_4_0; }
		
		//'VARCHAR'
		public Keyword getTypeVARCHARKeyword_4_0_0() { return cTypeVARCHARKeyword_4_0_0; }
		
		//'CHAR'
		public Keyword getTypeCHARKeyword_4_0_1() { return cTypeCHARKeyword_4_0_1; }
		
		//'INTEGER'
		public Keyword getTypeINTEGERKeyword_4_0_2() { return cTypeINTEGERKeyword_4_0_2; }
		
		//'BIGINT'
		public Keyword getTypeBIGINTKeyword_4_0_3() { return cTypeBIGINTKeyword_4_0_3; }
		
		//'SMALLINT'
		public Keyword getTypeSMALLINTKeyword_4_0_4() { return cTypeSMALLINTKeyword_4_0_4; }
		
		//'DECIMAL'
		public Keyword getTypeDECIMALKeyword_4_0_5() { return cTypeDECIMALKeyword_4_0_5; }
		
		//'TIME'
		public Keyword getTypeTIMEKeyword_4_0_6() { return cTypeTIMEKeyword_4_0_6; }
		
		//'DATE'
		public Keyword getTypeDATEKeyword_4_0_7() { return cTypeDATEKeyword_4_0_7; }
		
		//'TIMESTAMP'
		public Keyword getTypeTIMESTAMPKeyword_4_0_8() { return cTypeTIMESTAMPKeyword_4_0_8; }
		
		//'BOOLEAN'
		public Keyword getTypeBOOLEANKeyword_4_0_9() { return cTypeBOOLEANKeyword_4_0_9; }
		
		//optional='?'?
		public Assignment getOptionalAssignment_5() { return cOptionalAssignment_5; }
		
		//'?'
		public Keyword getOptionalQuestionMarkKeyword_5_0() { return cOptionalQuestionMarkKeyword_5_0; }
		
		//annots+=(YAnnotLength | YAnnotDecimal)*
		public Assignment getAnnotsAssignment_6() { return cAnnotsAssignment_6; }
		
		//(YAnnotLength | YAnnotDecimal)
		public Alternatives getAnnotsAlternatives_6_0() { return cAnnotsAlternatives_6_0; }
		
		//YAnnotLength
		public RuleCall getAnnotsYAnnotLengthParserRuleCall_6_0_0() { return cAnnotsYAnnotLengthParserRuleCall_6_0_0; }
		
		//YAnnotDecimal
		public RuleCall getAnnotsYAnnotDecimalParserRuleCall_6_0_1() { return cAnnotsYAnnotDecimalParserRuleCall_6_0_1; }
		
		//';'?
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class YAnnotColumnLikeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotColumnLike");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotColumnLikeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColumnrefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cColumnrefYAnnotAbstractColumnCrossReference_2_0 = (CrossReference)cColumnrefAssignment_2.eContents().get(0);
		private final RuleCall cColumnrefYAnnotAbstractColumnQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cColumnrefYAnnotAbstractColumnCrossReference_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//YAnnotColumnLike:
		//	{YAnnotColumnLike} '->' columnref=[YAnnotAbstractColumn|QualifiedName] ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotColumnLike} '->' columnref=[YAnnotAbstractColumn|QualifiedName] ';'?
		public Group getGroup() { return cGroup; }
		
		//{YAnnotColumnLike}
		public Action getYAnnotColumnLikeAction_0() { return cYAnnotColumnLikeAction_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//columnref=[YAnnotAbstractColumn|QualifiedName]
		public Assignment getColumnrefAssignment_2() { return cColumnrefAssignment_2; }
		
		//[YAnnotAbstractColumn|QualifiedName]
		public CrossReference getColumnrefYAnnotAbstractColumnCrossReference_2_0() { return cColumnrefYAnnotAbstractColumnCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getColumnrefYAnnotAbstractColumnQualifiedNameParserRuleCall_2_0_1() { return cColumnrefYAnnotAbstractColumnQualifiedNameParserRuleCall_2_0_1; }
		
		//';'?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class YAnnotAbstractColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotAbstractColumn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotAbstractColumnAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cColumnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cTypeAlternatives_3_0 = (Alternatives)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeYAnnotColumnParserRuleCall_3_0_0 = (RuleCall)cTypeAlternatives_3_0.eContents().get(0);
		private final RuleCall cTypeYAnnotColumnLikeParserRuleCall_3_0_1 = (RuleCall)cTypeAlternatives_3_0.eContents().get(1);
		
		//YAnnotAbstractColumn:
		//	{YAnnotAbstractColumn} '@column' name=ValidID type=(YAnnotColumn | YAnnotColumnLike);
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotAbstractColumn} '@column' name=ValidID type=(YAnnotColumn | YAnnotColumnLike)
		public Group getGroup() { return cGroup; }
		
		//{YAnnotAbstractColumn}
		public Action getYAnnotAbstractColumnAction_0() { return cYAnnotAbstractColumnAction_0; }
		
		//'@column'
		public Keyword getColumnKeyword_1() { return cColumnKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//type=(YAnnotColumn | YAnnotColumnLike)
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//(YAnnotColumn | YAnnotColumnLike)
		public Alternatives getTypeAlternatives_3_0() { return cTypeAlternatives_3_0; }
		
		//YAnnotColumn
		public RuleCall getTypeYAnnotColumnParserRuleCall_3_0_0() { return cTypeYAnnotColumnParserRuleCall_3_0_0; }
		
		//YAnnotColumnLike
		public RuleCall getTypeYAnnotColumnLikeParserRuleCall_3_0_1() { return cTypeYAnnotColumnLikeParserRuleCall_3_0_1; }
	}
	public class YAnnotPrimaryKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotPrimaryKey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotPrimaryKeyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrimaryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColumnsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cColumnsYAnnotAbstractColumnCrossReference_3_0 = (CrossReference)cColumnsAssignment_3.eContents().get(0);
		private final RuleCall cColumnsYAnnotAbstractColumnIDTerminalRuleCall_3_0_1 = (RuleCall)cColumnsYAnnotAbstractColumnCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cColumnsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cColumnsYAnnotAbstractColumnCrossReference_4_1_0 = (CrossReference)cColumnsAssignment_4_1.eContents().get(0);
		private final RuleCall cColumnsYAnnotAbstractColumnIDTerminalRuleCall_4_1_0_1 = (RuleCall)cColumnsYAnnotAbstractColumnCrossReference_4_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//YAnnotPrimaryKey:
		//	{YAnnotPrimaryKey} '@primary' '(' columns+=[YAnnotAbstractColumn]* (',' columns+=[YAnnotAbstractColumn])* ')' ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotPrimaryKey} '@primary' '(' columns+=[YAnnotAbstractColumn]* (',' columns+=[YAnnotAbstractColumn])* ')' ';'?
		public Group getGroup() { return cGroup; }
		
		//{YAnnotPrimaryKey}
		public Action getYAnnotPrimaryKeyAction_0() { return cYAnnotPrimaryKeyAction_0; }
		
		//'@primary'
		public Keyword getPrimaryKeyword_1() { return cPrimaryKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//columns+=[YAnnotAbstractColumn]*
		public Assignment getColumnsAssignment_3() { return cColumnsAssignment_3; }
		
		//[YAnnotAbstractColumn]
		public CrossReference getColumnsYAnnotAbstractColumnCrossReference_3_0() { return cColumnsYAnnotAbstractColumnCrossReference_3_0; }
		
		//ID
		public RuleCall getColumnsYAnnotAbstractColumnIDTerminalRuleCall_3_0_1() { return cColumnsYAnnotAbstractColumnIDTerminalRuleCall_3_0_1; }
		
		//(',' columns+=[YAnnotAbstractColumn])*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//columns+=[YAnnotAbstractColumn]
		public Assignment getColumnsAssignment_4_1() { return cColumnsAssignment_4_1; }
		
		//[YAnnotAbstractColumn]
		public CrossReference getColumnsYAnnotAbstractColumnCrossReference_4_1_0() { return cColumnsYAnnotAbstractColumnCrossReference_4_1_0; }
		
		//ID
		public RuleCall getColumnsYAnnotAbstractColumnIDTerminalRuleCall_4_1_0_1() { return cColumnsYAnnotAbstractColumnIDTerminalRuleCall_4_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//';'?
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class YAnnotForeignKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotForeignKey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotForeignKeyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForeignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRelationshipAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRelationshipYAnnotRelCrossReference_2_0 = (CrossReference)cRelationshipAssignment_2.eContents().get(0);
		private final RuleCall cRelationshipYAnnotRelQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cRelationshipYAnnotRelCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cColumnsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cColumnsYAnnotAbstractColumnParserRuleCall_4_0 = (RuleCall)cColumnsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cColumnsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cColumnsYAnnotAbstractColumnParserRuleCall_5_1_0 = (RuleCall)cColumnsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//YAnnotForeignKey:
		//	{YAnnotForeignKey} '@foreign' relationship=[YAnnotRel|QualifiedName] '{'
		//	columns+=YAnnotAbstractColumn (',' columns+=YAnnotAbstractColumn)*
		//	'}' ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotForeignKey} '@foreign' relationship=[YAnnotRel|QualifiedName] '{' columns+=YAnnotAbstractColumn (','
		//columns+=YAnnotAbstractColumn)* '}' ';'?
		public Group getGroup() { return cGroup; }
		
		//{YAnnotForeignKey}
		public Action getYAnnotForeignKeyAction_0() { return cYAnnotForeignKeyAction_0; }
		
		//'@foreign'
		public Keyword getForeignKeyword_1() { return cForeignKeyword_1; }
		
		//relationship=[YAnnotRel|QualifiedName]
		public Assignment getRelationshipAssignment_2() { return cRelationshipAssignment_2; }
		
		//[YAnnotRel|QualifiedName]
		public CrossReference getRelationshipYAnnotRelCrossReference_2_0() { return cRelationshipYAnnotRelCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getRelationshipYAnnotRelQualifiedNameParserRuleCall_2_0_1() { return cRelationshipYAnnotRelQualifiedNameParserRuleCall_2_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//columns+=YAnnotAbstractColumn
		public Assignment getColumnsAssignment_4() { return cColumnsAssignment_4; }
		
		//YAnnotAbstractColumn
		public RuleCall getColumnsYAnnotAbstractColumnParserRuleCall_4_0() { return cColumnsYAnnotAbstractColumnParserRuleCall_4_0; }
		
		//(',' columns+=YAnnotAbstractColumn)*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//columns+=YAnnotAbstractColumn
		public Assignment getColumnsAssignment_5_1() { return cColumnsAssignment_5_1; }
		
		//YAnnotAbstractColumn
		public RuleCall getColumnsYAnnotAbstractColumnParserRuleCall_5_1_0() { return cColumnsYAnnotAbstractColumnParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//';'?
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class YAnnotJavaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotJava");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotJavaAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cJavaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cUsesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDatabaseAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cDatabaseYAnnotDatabaseCrossReference_2_1_0 = (CrossReference)cDatabaseAssignment_2_1.eContents().get(0);
		private final RuleCall cDatabaseYAnnotDatabaseIDTerminalRuleCall_2_1_0_1 = (RuleCall)cDatabaseYAnnotDatabaseCrossReference_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///*
		// * Swift Generation Annotations
		// */ YAnnotJava:
		//	{YAnnotJava} '@java' ('uses' database=[YAnnotDatabase])? ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotJava} '@java' ('uses' database=[YAnnotDatabase])? ';'?
		public Group getGroup() { return cGroup; }
		
		//{YAnnotJava}
		public Action getYAnnotJavaAction_0() { return cYAnnotJavaAction_0; }
		
		//'@java'
		public Keyword getJavaKeyword_1() { return cJavaKeyword_1; }
		
		//('uses' database=[YAnnotDatabase])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'uses'
		public Keyword getUsesKeyword_2_0() { return cUsesKeyword_2_0; }
		
		//database=[YAnnotDatabase]
		public Assignment getDatabaseAssignment_2_1() { return cDatabaseAssignment_2_1; }
		
		//[YAnnotDatabase]
		public CrossReference getDatabaseYAnnotDatabaseCrossReference_2_1_0() { return cDatabaseYAnnotDatabaseCrossReference_2_1_0; }
		
		//ID
		public RuleCall getDatabaseYAnnotDatabaseIDTerminalRuleCall_2_1_0_1() { return cDatabaseYAnnotDatabaseIDTerminalRuleCall_2_1_0_1; }
		
		//';'?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class YAnnotSwiftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotSwift");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotSwiftAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSwiftKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cModuleKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cUsesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDatabaseAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cDatabaseYAnnotDatabaseCrossReference_4_1_0 = (CrossReference)cDatabaseAssignment_4_1.eContents().get(0);
		private final RuleCall cDatabaseYAnnotDatabaseIDTerminalRuleCall_4_1_0_1 = (RuleCall)cDatabaseYAnnotDatabaseCrossReference_4_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///*
		// * Swift Generation Annotations
		// */ YAnnotSwift:
		//	{YAnnotSwift} '@swift' 'module' name=ValidID ('uses' database=[YAnnotDatabase])? ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotSwift} '@swift' 'module' name=ValidID ('uses' database=[YAnnotDatabase])? ';'?
		public Group getGroup() { return cGroup; }
		
		//{YAnnotSwift}
		public Action getYAnnotSwiftAction_0() { return cYAnnotSwiftAction_0; }
		
		//'@swift'
		public Keyword getSwiftKeyword_1() { return cSwiftKeyword_1; }
		
		//'module'
		public Keyword getModuleKeyword_2() { return cModuleKeyword_2; }
		
		//name=ValidID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_3_0() { return cNameValidIDParserRuleCall_3_0; }
		
		//('uses' database=[YAnnotDatabase])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'uses'
		public Keyword getUsesKeyword_4_0() { return cUsesKeyword_4_0; }
		
		//database=[YAnnotDatabase]
		public Assignment getDatabaseAssignment_4_1() { return cDatabaseAssignment_4_1; }
		
		//[YAnnotDatabase]
		public CrossReference getDatabaseYAnnotDatabaseCrossReference_4_1_0() { return cDatabaseYAnnotDatabaseCrossReference_4_1_0; }
		
		//ID
		public RuleCall getDatabaseYAnnotDatabaseIDTerminalRuleCall_4_1_0_1() { return cDatabaseYAnnotDatabaseIDTerminalRuleCall_4_1_0_1; }
		
		//';'?
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class YAnnotDatabaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAnnotDatabase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYAnnotDatabaseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDatabaseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///*
		// * Database Generation Annotations
		// */ YAnnotDatabase:
		//	{YAnnotDatabase} '@database' name=ValidID ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{YAnnotDatabase} '@database' name=ValidID ';'?
		public Group getGroup() { return cGroup; }
		
		//{YAnnotDatabase}
		public Action getYAnnotDatabaseAction_0() { return cYAnnotDatabaseAction_0; }
		
		//'@database'
		public Keyword getDatabaseKeyword_1() { return cDatabaseKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	
	public class YAccessLevelElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eu.jgen.notes.dmw.lite.Lang.YAccessLevel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPRIVATEPrivateKeyword_0_0 = (Keyword)cPRIVATEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPROTECTEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPROTECTEDProtectedKeyword_1_0 = (Keyword)cPROTECTEDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPUBLICPublicKeyword_2_0 = (Keyword)cPUBLICEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum YAccessLevel:
		//	PRIVATE='private' | PROTECTED='protected' | PUBLIC='public';
		public EnumRule getRule() { return rule; }
		
		//PRIVATE='private' | PROTECTED='protected' | PUBLIC='public'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PRIVATE='private'
		public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_0() { return cPRIVATEEnumLiteralDeclaration_0; }
		
		//'private'
		public Keyword getPRIVATEPrivateKeyword_0_0() { return cPRIVATEPrivateKeyword_0_0; }
		
		//PROTECTED='protected'
		public EnumLiteralDeclaration getPROTECTEDEnumLiteralDeclaration_1() { return cPROTECTEDEnumLiteralDeclaration_1; }
		
		//'protected'
		public Keyword getPROTECTEDProtectedKeyword_1_0() { return cPROTECTEDProtectedKeyword_1_0; }
		
		//PUBLIC='public'
		public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_2() { return cPUBLICEnumLiteralDeclaration_2; }
		
		//'public'
		public Keyword getPUBLICPublicKeyword_2_0() { return cPUBLICPublicKeyword_2_0; }
	}
	
	private final YWidgetElements pYWidget;
	private final YImportElements pYImport;
	private final QualifiedNameElements pQualifiedName;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final ValidIDElements pValidID;
	private final YParameterElements pYParameter;
	private final YAccessLevelElements eYAccessLevel;
	private final YArgumentElements pYArgument;
	private final YArgumentValueElements pYArgumentValue;
	private final YClassElements pYClass;
	private final YMemberElements pYMember;
	private final YTypedDeclarationElements pYTypedDeclaration;
	private final YPropertyElements pYProperty;
	private final YTuplesElements pYTuples;
	private final YFunctionElements pYFunction;
	private final YBlockElements pYBlock;
	private final YStatementElements pYStatement;
	private final YVariableDeclarationElements pYVariableDeclaration;
	private final YReturnElements pYReturn;
	private final YIfStatementElements pYIfStatement;
	private final YIfBlockElements pYIfBlock;
	private final YSwitchStatementElements pYSwitchStatement;
	private final YSwitchCaseElements pYSwitchCase;
	private final YSymbolElements pYSymbol;
	private final YNamedElementElements pYNamedElement;
	private final YExpressionElements pYExpression;
	private final YAssignmentElements pYAssignment;
	private final YSelectionExpressionElements pYSelectionExpression;
	private final OpSingleAssignElements pOpSingleAssign;
	private final YOrExpressionElements pYOrExpression;
	private final OpOrElements pOpOr;
	private final YAndExpressionElements pYAndExpression;
	private final OpAndElements pOpAnd;
	private final YEqualityExpressionElements pYEqualityExpression;
	private final YComparisonExpressionElements pYComparisonExpression;
	private final OpCompareElements pOpCompare;
	private final YAdditiveExpressionElements pYAdditiveExpression;
	private final OpAddElements pOpAdd;
	private final YMultiplicativeExpressionElements pYMultiplicativeExpression;
	private final YPrimaryElements pYPrimary;
	private final YTerminalExpressionElements pYTerminalExpression;
	private final YReadStatementElements pYReadStatement;
	private final YReadEachStatementElements pYReadEachStatement;
	private final YCreateStatementElements pYCreateStatement;
	private final YUpdateStatementElements pYUpdateStatement;
	private final YDeleteStatementElements pYDeleteStatement;
	private final YAssociateStatementElements pYAssociateStatement;
	private final YStructRefPairElements pYStructRefPair;
	private final YJoinElements pYJoin;
	private final YJoinDefElements pYJoinDef;
	private final YWhereElements pYWhere;
	private final YWhileStatementElements pYWhileStatement;
	private final YRepeatWhileStatementElements pYRepeatWhileStatement;
	private final YForInStatementElements pYForInStatement;
	private final YAnnotElements pYAnnot;
	private final YAnnotTopElements pYAnnotTop;
	private final YAnnotLengthElements pYAnnotLength;
	private final YAnnotDecimalElements pYAnnotDecimal;
	private final YAnnotActionElements pYAnnotAction;
	private final YAnnotMessageElements pYAnnotMessage;
	private final YAnnotMsgTypeElements pYAnnotMsgType;
	private final YAnnotEntityInnerElements pYAnnotEntityInner;
	private final YAnnotEntityElements pYAnnotEntity;
	private final YAnnotAttrElements pYAnnotAttr;
	private final YAnnotRelElements pYAnnotRel;
	private final YAnnotIdInnerElements pYAnnotIdInner;
	private final YAnnotIdElements pYAnnotId;
	private final YAnnotTechnicalDesignElements pYAnnotTechnicalDesign;
	private final YAnnotTableElements pYAnnotTable;
	private final YAnnotColumnElements pYAnnotColumn;
	private final YAnnotColumnLikeElements pYAnnotColumnLike;
	private final YAnnotAbstractColumnElements pYAnnotAbstractColumn;
	private final YAnnotPrimaryKeyElements pYAnnotPrimaryKey;
	private final YAnnotForeignKeyElements pYAnnotForeignKey;
	private final YAnnotJavaElements pYAnnotJava;
	private final YAnnotSwiftElements pYAnnotSwift;
	private final YAnnotDatabaseElements pYAnnotDatabase;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LangGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pYWidget = new YWidgetElements();
		this.pYImport = new YImportElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pValidID = new ValidIDElements();
		this.pYParameter = new YParameterElements();
		this.eYAccessLevel = new YAccessLevelElements();
		this.pYArgument = new YArgumentElements();
		this.pYArgumentValue = new YArgumentValueElements();
		this.pYClass = new YClassElements();
		this.pYMember = new YMemberElements();
		this.pYTypedDeclaration = new YTypedDeclarationElements();
		this.pYProperty = new YPropertyElements();
		this.pYTuples = new YTuplesElements();
		this.pYFunction = new YFunctionElements();
		this.pYBlock = new YBlockElements();
		this.pYStatement = new YStatementElements();
		this.pYVariableDeclaration = new YVariableDeclarationElements();
		this.pYReturn = new YReturnElements();
		this.pYIfStatement = new YIfStatementElements();
		this.pYIfBlock = new YIfBlockElements();
		this.pYSwitchStatement = new YSwitchStatementElements();
		this.pYSwitchCase = new YSwitchCaseElements();
		this.pYSymbol = new YSymbolElements();
		this.pYNamedElement = new YNamedElementElements();
		this.pYExpression = new YExpressionElements();
		this.pYAssignment = new YAssignmentElements();
		this.pYSelectionExpression = new YSelectionExpressionElements();
		this.pOpSingleAssign = new OpSingleAssignElements();
		this.pYOrExpression = new YOrExpressionElements();
		this.pOpOr = new OpOrElements();
		this.pYAndExpression = new YAndExpressionElements();
		this.pOpAnd = new OpAndElements();
		this.pYEqualityExpression = new YEqualityExpressionElements();
		this.pYComparisonExpression = new YComparisonExpressionElements();
		this.pOpCompare = new OpCompareElements();
		this.pYAdditiveExpression = new YAdditiveExpressionElements();
		this.pOpAdd = new OpAddElements();
		this.pYMultiplicativeExpression = new YMultiplicativeExpressionElements();
		this.pYPrimary = new YPrimaryElements();
		this.pYTerminalExpression = new YTerminalExpressionElements();
		this.pYReadStatement = new YReadStatementElements();
		this.pYReadEachStatement = new YReadEachStatementElements();
		this.pYCreateStatement = new YCreateStatementElements();
		this.pYUpdateStatement = new YUpdateStatementElements();
		this.pYDeleteStatement = new YDeleteStatementElements();
		this.pYAssociateStatement = new YAssociateStatementElements();
		this.pYStructRefPair = new YStructRefPairElements();
		this.pYJoin = new YJoinElements();
		this.pYJoinDef = new YJoinDefElements();
		this.pYWhere = new YWhereElements();
		this.pYWhileStatement = new YWhileStatementElements();
		this.pYRepeatWhileStatement = new YRepeatWhileStatementElements();
		this.pYForInStatement = new YForInStatementElements();
		this.pYAnnot = new YAnnotElements();
		this.pYAnnotTop = new YAnnotTopElements();
		this.pYAnnotLength = new YAnnotLengthElements();
		this.pYAnnotDecimal = new YAnnotDecimalElements();
		this.pYAnnotAction = new YAnnotActionElements();
		this.pYAnnotMessage = new YAnnotMessageElements();
		this.pYAnnotMsgType = new YAnnotMsgTypeElements();
		this.pYAnnotEntityInner = new YAnnotEntityInnerElements();
		this.pYAnnotEntity = new YAnnotEntityElements();
		this.pYAnnotAttr = new YAnnotAttrElements();
		this.pYAnnotRel = new YAnnotRelElements();
		this.pYAnnotIdInner = new YAnnotIdInnerElements();
		this.pYAnnotId = new YAnnotIdElements();
		this.pYAnnotTechnicalDesign = new YAnnotTechnicalDesignElements();
		this.pYAnnotTable = new YAnnotTableElements();
		this.pYAnnotColumn = new YAnnotColumnElements();
		this.pYAnnotColumnLike = new YAnnotColumnLikeElements();
		this.pYAnnotAbstractColumn = new YAnnotAbstractColumnElements();
		this.pYAnnotPrimaryKey = new YAnnotPrimaryKeyElements();
		this.pYAnnotForeignKey = new YAnnotForeignKeyElements();
		this.pYAnnotJava = new YAnnotJavaElements();
		this.pYAnnotSwift = new YAnnotSwiftElements();
		this.pYAnnotDatabase = new YAnnotDatabaseElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("eu.jgen.notes.dmw.lite.Lang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//YWidget:
	//	('package' name=QualifiedName ';'?)?
	//	imports+=YImport*
	//	annotations+=YAnnotTop*
	//	classes+=YClass*;
	public YWidgetElements getYWidgetAccess() {
		return pYWidget;
	}
	
	public ParserRule getYWidgetRule() {
		return getYWidgetAccess().getRule();
	}
	
	//YImport:
	//	'import' importedNamespace=QualifiedNameWithWildcard ';';
	public YImportElements getYImportAccess() {
		return pYImport;
	}
	
	public ParserRule getYImportRule() {
		return getYImportAccess().getRule();
	}
	
	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName '.*'?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//	ID;
	public ValidIDElements getValidIDAccess() {
		return pValidID;
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//YParameter:
	//	YTypedDeclaration;
	public YParameterElements getYParameterAccess() {
		return pYParameter;
	}
	
	public ParserRule getYParameterRule() {
		return getYParameterAccess().getRule();
	}
	
	//enum YAccessLevel:
	//	PRIVATE='private' | PROTECTED='protected' | PUBLIC='public';
	public YAccessLevelElements getYAccessLevelAccess() {
		return eYAccessLevel;
	}
	
	public EnumRule getYAccessLevelRule() {
		return getYAccessLevelAccess().getRule();
	}
	
	//YArgument:
	//	name=ValidID ':' value=YArgumentValue;
	public YArgumentElements getYArgumentAccess() {
		return pYArgument;
	}
	
	public ParserRule getYArgumentRule() {
		return getYArgumentAccess().getRule();
	}
	
	//YArgumentValue:
	//	INT | STRING;
	public YArgumentValueElements getYArgumentValueAccess() {
		return pYArgumentValue;
	}
	
	public ParserRule getYArgumentValueRule() {
		return getYArgumentValueAccess().getRule();
	}
	
	//YClass:
	//	'class' name=ValidID (':' superclass=[YClass|QualifiedName])? ('->' entity=[YAnnotEntity|QualifiedName])?
	//	'{'
	//	inners+=YClass*
	//	members+=YMember*
	//	'}';
	public YClassElements getYClassAccess() {
		return pYClass;
	}
	
	public ParserRule getYClassRule() {
		return getYClassAccess().getRule();
	}
	
	//YMember:
	//	YProperty | YFunction;
	public YMemberElements getYMemberAccess() {
		return pYMember;
	}
	
	public ParserRule getYMemberRule() {
		return getYMemberAccess().getRule();
	}
	
	//fragment YTypedDeclaration *:
	//	name=ValidID ':' type=[YClass|QualifiedName];
	public YTypedDeclarationElements getYTypedDeclarationAccess() {
		return pYTypedDeclaration;
	}
	
	public ParserRule getYTypedDeclarationRule() {
		return getYTypedDeclarationAccess().getRule();
	}
	
	//YProperty:
	//	access=YAccessLevel? 'var' YTypedDeclaration tuples=YTuples? optional?='?'? ('->' attr=[YAnnotAttr|QualifiedName])?
	//	prop+=YAnnot* ';';
	public YPropertyElements getYPropertyAccess() {
		return pYProperty;
	}
	
	public ParserRule getYPropertyRule() {
		return getYPropertyAccess().getRule();
	}
	
	//YTuples:
	//	{YTuples} '<' (includes+=[YProperty] (',' includes+=[YProperty])*)? '>';
	public YTuplesElements getYTuplesAccess() {
		return pYTuples;
	}
	
	public ParserRule getYTuplesRule() {
		return getYTuplesAccess().getRule();
	}
	
	//YFunction:
	//	access=YAccessLevel? 'func' name=ValidID
	//	'(' (params+=YParameter (',' params+=YParameter)*)? ')' returnvalue?='->'? type=[YClass|QualifiedName]?
	//	body=YBlock;
	public YFunctionElements getYFunctionAccess() {
		return pYFunction;
	}
	
	public ParserRule getYFunctionRule() {
		return getYFunctionAccess().getRule();
	}
	
	//YBlock:
	//	{YBlock} '{' statements+=YStatement* '}';
	public YBlockElements getYBlockAccess() {
		return pYBlock;
	}
	
	public ParserRule getYBlockRule() {
		return getYBlockAccess().getRule();
	}
	
	//YStatement:
	//	YVariableDeclaration | YReturn | YReadStatement | YCreateStatement | YUpdateStatement | YAssociateStatement |
	//	YDeleteStatement | YReadEachStatement | YWhileStatement | YRepeatWhileStatement | YForInStatement | YExpression ';' |
	//	YIfStatement | YSwitchStatement;
	public YStatementElements getYStatementAccess() {
		return pYStatement;
	}
	
	public ParserRule getYStatementRule() {
		return getYStatementAccess().getRule();
	}
	
	//YVariableDeclaration:
	//	YTypedDeclaration '=' expression=YOrExpression ';';
	public YVariableDeclarationElements getYVariableDeclarationAccess() {
		return pYVariableDeclaration;
	}
	
	public ParserRule getYVariableDeclarationRule() {
		return getYVariableDeclarationAccess().getRule();
	}
	
	//YReturn:
	//	{YReturn} 'return' expression=YOrExpression? ';';
	public YReturnElements getYReturnAccess() {
		return pYReturn;
	}
	
	public ParserRule getYReturnRule() {
		return getYReturnAccess().getRule();
	}
	
	//YIfStatement:
	//	'if' '(' expression=YOrExpression ')' thenBlock=YIfBlock (=> 'else' elseBlock=YIfBlock)?;
	public YIfStatementElements getYIfStatementAccess() {
		return pYIfStatement;
	}
	
	public ParserRule getYIfStatementRule() {
		return getYIfStatementAccess().getRule();
	}
	
	//YIfBlock YBlock:
	//	statements+=YStatement
	//	| YBlock;
	public YIfBlockElements getYIfBlockAccess() {
		return pYIfBlock;
	}
	
	public ParserRule getYIfBlockRule() {
		return getYIfBlockAccess().getRule();
	}
	
	//YSwitchStatement:
	//	{YSwitchStatement}
	//	'switch' switch=YExpression '{'
	//	cases+=YSwitchCase* ('default' ':' default=YBlock)?
	//	'}';
	public YSwitchStatementElements getYSwitchStatementAccess() {
		return pYSwitchStatement;
	}
	
	public ParserRule getYSwitchStatementRule() {
		return getYSwitchStatementAccess().getRule();
	}
	
	//YSwitchCase:
	//	{YSwitchCase} ('case' case=YExpression)?
	//	':' then=YBlock;
	public YSwitchCaseElements getYSwitchCaseAccess() {
		return pYSwitchCase;
	}
	
	public ParserRule getYSwitchCaseRule() {
		return getYSwitchCaseAccess().getRule();
	}
	
	//YSymbol:
	//	YVariableDeclaration | YParameter;
	public YSymbolElements getYSymbolAccess() {
		return pYSymbol;
	}
	
	public ParserRule getYSymbolRule() {
		return getYSymbolAccess().getRule();
	}
	
	//YNamedElement:
	//	YClass | YMember | YSymbol;
	public YNamedElementElements getYNamedElementAccess() {
		return pYNamedElement;
	}
	
	public ParserRule getYNamedElementRule() {
		return getYNamedElementAccess().getRule();
	}
	
	//YExpression:
	//	YAssignment;
	public YExpressionElements getYExpressionAccess() {
		return pYExpression;
	}
	
	public ParserRule getYExpressionRule() {
		return getYExpressionAccess().getRule();
	}
	
	//YAssignment YExpression:
	//	YSelectionExpression ({YAssignment.left=current} '=' right=YOrExpression)?;
	public YAssignmentElements getYAssignmentAccess() {
		return pYAssignment;
	}
	
	public ParserRule getYAssignmentRule() {
		return getYAssignmentAccess().getRule();
	}
	
	//YSelectionExpression YExpression:
	//	YTerminalExpression ({YMemberSelection.receiver=current} '.'
	//	member=[YMember] (functioninvocation?='(' (args+=YOrExpression (',' args+=YOrExpression)*)? ')')?)*;
	public YSelectionExpressionElements getYSelectionExpressionAccess() {
		return pYSelectionExpression;
	}
	
	public ParserRule getYSelectionExpressionRule() {
		return getYSelectionExpressionAccess().getRule();
	}
	
	///*
	// * Expressions
	// */ OpSingleAssign:
	//	'=';
	public OpSingleAssignElements getOpSingleAssignAccess() {
		return pOpSingleAssign;
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//YOrExpression YExpression:
	//	YAndExpression ({YOrExpression.left=current} OpOr right=YAndExpression)*;
	public YOrExpressionElements getYOrExpressionAccess() {
		return pYOrExpression;
	}
	
	public ParserRule getYOrExpressionRule() {
		return getYOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//	'||';
	public OpOrElements getOpOrAccess() {
		return pOpOr;
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//YAndExpression YExpression:
	//	YEqualityExpression ({YAndExpression.left=current} OpAnd right=YEqualityExpression)*;
	public YAndExpressionElements getYAndExpressionAccess() {
		return pYAndExpression;
	}
	
	public ParserRule getYAndExpressionRule() {
		return getYAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//	'&&';
	public OpAndElements getOpAndAccess() {
		return pOpAnd;
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//YEqualityExpression YExpression:
	//	YComparisonExpression ({YEqualityExpression.left=current} op=("==" | "!=") right=YComparisonExpression)*;
	public YEqualityExpressionElements getYEqualityExpressionAccess() {
		return pYEqualityExpression;
	}
	
	public ParserRule getYEqualityExpressionRule() {
		return getYEqualityExpressionAccess().getRule();
	}
	
	//YComparisonExpression YExpression:
	//	YAdditiveExpression ({YComparisonExpression.left=current} op=OpCompare right=YAdditiveExpression)*;
	public YComparisonExpressionElements getYComparisonExpressionAccess() {
		return pYComparisonExpression;
	}
	
	public ParserRule getYComparisonExpressionRule() {
		return getYComparisonExpressionAccess().getRule();
	}
	
	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public OpCompareElements getOpCompareAccess() {
		return pOpCompare;
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//YAdditiveExpression YExpression:
	//	YMultiplicativeExpression (({YPlus.left=current} '+' | {YMinus.left=current} '-') right=YMultiplicativeExpression)*;
	public YAdditiveExpressionElements getYAdditiveExpressionAccess() {
		return pYAdditiveExpression;
	}
	
	public ParserRule getYAdditiveExpressionRule() {
		return getYAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//	'+' | '-';
	public OpAddElements getOpAddAccess() {
		return pOpAdd;
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//YMultiplicativeExpression YExpression:
	//	YPrimary ({YMulOrDiv.left=current} op=('*' | '/') right=YPrimary)*;
	public YMultiplicativeExpressionElements getYMultiplicativeExpressionAccess() {
		return pYMultiplicativeExpression;
	}
	
	public ParserRule getYMultiplicativeExpressionRule() {
		return getYMultiplicativeExpressionAccess().getRule();
	}
	
	//YPrimary YExpression:
	//	{YParenties} '(' a=YOrExpression ')' | {YNot} "!" expression=YPrimary | YSelectionExpression;
	public YPrimaryElements getYPrimaryAccess() {
		return pYPrimary;
	}
	
	public ParserRule getYPrimaryRule() {
		return getYPrimaryAccess().getRule();
	}
	
	//YTerminalExpression YExpression:
	//	{YStringConstant} value=STRING | {YIntConstant} value=INT | {YBoolConstant} value=('true' | 'false') | {YSelf} 'self'
	//	| {YSuper} 'super' | {YNull} 'null' | {YSymbolRef} symbol=[YSymbol] | {YNew} 'new' type=[YClass|QualifiedName] '('
	//	(arguments+=YOrExpression (',' arguments+=YOrExpression)*)? ')'
	//	//|	'(' YOrExpression ')'
	//;
	public YTerminalExpressionElements getYTerminalExpressionAccess() {
		return pYTerminalExpression;
	}
	
	public ParserRule getYTerminalExpressionRule() {
		return getYTerminalExpressionAccess().getRule();
	}
	
	//YReadStatement:
	//	'read' structs+=YStructRefPair (',' structs+=YStructRefPair)* joinclause=YJoin? whereclause=YWhere?
	//	'success' success=YBlock
	//	'not' 'found' notfound=YBlock;
	public YReadStatementElements getYReadStatementAccess() {
		return pYReadStatement;
	}
	
	public ParserRule getYReadStatementRule() {
		return getYReadStatementAccess().getRule();
	}
	
	//YReadEachStatement:
	//	'read' 'each' structs+=YStructRefPair (',' structs+=YStructRefPair)* joinclause=YJoin? whereclause=YWhere?
	//	'target' target=[YProperty] success=YBlock;
	public YReadEachStatementElements getYReadEachStatementAccess() {
		return pYReadEachStatement;
	}
	
	public ParserRule getYReadEachStatementRule() {
		return getYReadEachStatementAccess().getRule();
	}
	
	//YCreateStatement:
	//	'create' struct=YStructRefPair
	//	setBlock=YBlock
	//	'success' success=YBlock
	//	'already' 'exist' alreadyExist=YBlock;
	public YCreateStatementElements getYCreateStatementAccess() {
		return pYCreateStatement;
	}
	
	public ParserRule getYCreateStatementRule() {
		return getYCreateStatementAccess().getRule();
	}
	
	//YUpdateStatement:
	//	'update' struct=YStructRefPair
	//	setBlock=YBlock
	//	'success' success=YBlock;
	public YUpdateStatementElements getYUpdateStatementAccess() {
		return pYUpdateStatement;
	}
	
	public ParserRule getYUpdateStatementRule() {
		return getYUpdateStatementAccess().getRule();
	}
	
	//YDeleteStatement:
	//	'delete' struct=YStructRefPair ';';
	public YDeleteStatementElements getYDeleteStatementAccess() {
		return pYDeleteStatement;
	}
	
	public ParserRule getYDeleteStatementRule() {
		return getYDeleteStatementAccess().getRule();
	}
	
	//YAssociateStatement:
	//	'associate' joinref=YJoinDef ';';
	public YAssociateStatementElements getYAssociateStatementAccess() {
		return pYAssociateStatement;
	}
	
	public ParserRule getYAssociateStatementRule() {
		return getYAssociateStatementAccess().getRule();
	}
	
	//YStructRefPair:
	//	structproperty=[YProperty] '->' structclass=[YAnnotEntity];
	public YStructRefPairElements getYStructRefPairAccess() {
		return pYStructRefPair;
	}
	
	public ParserRule getYStructRefPairRule() {
		return getYStructRefPairAccess().getRule();
	}
	
	//YJoin:
	//	{YJoin} 'join' joindef+=YJoinDef ("," joindef+=YJoinDef)*;
	public YJoinElements getYJoinAccess() {
		return pYJoin;
	}
	
	public ParserRule getYJoinRule() {
		return getYJoinAccess().getRule();
	}
	
	//YJoinDef:
	//	fromView=[YProperty] '->' relRef+=[YAnnotRel|QualifiedName] '->' toView=[YProperty];
	public YJoinDefElements getYJoinDefAccess() {
		return pYJoinDef;
	}
	
	public ParserRule getYJoinDefRule() {
		return getYJoinDefAccess().getRule();
	}
	
	//YWhere:
	//	{YWhere} 'where' expression=YOrExpression;
	public YWhereElements getYWhereAccess() {
		return pYWhere;
	}
	
	public ParserRule getYWhereRule() {
		return getYWhereAccess().getRule();
	}
	
	//YWhileStatement:
	//	'while' expression=YOrExpression
	//	body=YBlock;
	public YWhileStatementElements getYWhileStatementAccess() {
		return pYWhileStatement;
	}
	
	public ParserRule getYWhileStatementRule() {
		return getYWhileStatementAccess().getRule();
	}
	
	//YRepeatWhileStatement:
	//	'repeat'
	//	body=YBlock
	//	'while' '(' expression=YOrExpression ')';
	public YRepeatWhileStatementElements getYRepeatWhileStatementAccess() {
		return pYRepeatWhileStatement;
	}
	
	public ParserRule getYRepeatWhileStatementRule() {
		return getYRepeatWhileStatementAccess().getRule();
	}
	
	//YForInStatement:
	//	'for' item=[YProperty] 'in' collection=[YProperty] body=YBlock;
	public YForInStatementElements getYForInStatementAccess() {
		return pYForInStatement;
	}
	
	public ParserRule getYForInStatementRule() {
		return getYForInStatementAccess().getRule();
	}
	
	///*
	// * Predefined annotations
	// */ YAnnot:
	//	{YAnnot} type=(YAnnotLength | YAnnotDecimal | YAnnotAction | YAnnotMessage | YAnnotMsgType);
	public YAnnotElements getYAnnotAccess() {
		return pYAnnot;
	}
	
	public ParserRule getYAnnotRule() {
		return getYAnnotAccess().getRule();
	}
	
	//YAnnotTop:
	//	type=(YAnnotEntity | YAnnotTechnicalDesign | YAnnotSwift | YAnnotJava | YAnnotDatabase);
	public YAnnotTopElements getYAnnotTopAccess() {
		return pYAnnotTop;
	}
	
	public ParserRule getYAnnotTopRule() {
		return getYAnnotTopAccess().getRule();
	}
	
	//YAnnotLength YAnnot:
	//	{YAnnotLength} '@length' '(' length=INT ')';
	public YAnnotLengthElements getYAnnotLengthAccess() {
		return pYAnnotLength;
	}
	
	public ParserRule getYAnnotLengthRule() {
		return getYAnnotLengthAccess().getRule();
	}
	
	//YAnnotDecimal YAnnot:
	//	{YAnnotDecimal} '@decimal' '(' length=INT ',' decimal=INT ')';
	public YAnnotDecimalElements getYAnnotDecimalAccess() {
		return pYAnnotDecimal;
	}
	
	public ParserRule getYAnnotDecimalRule() {
		return getYAnnotDecimalAccess().getRule();
	}
	
	//YAnnotAction YAnnot:
	//	{YAnnotAction} '@action' '(' action=ValidID ')';
	public YAnnotActionElements getYAnnotActionAccess() {
		return pYAnnotAction;
	}
	
	public ParserRule getYAnnotActionRule() {
		return getYAnnotActionAccess().getRule();
	}
	
	//YAnnotMessage YAnnot:
	//	{YAnnotMessage} '@message' '(' msg=STRING ')';
	public YAnnotMessageElements getYAnnotMessageAccess() {
		return pYAnnotMessage;
	}
	
	public ParserRule getYAnnotMessageRule() {
		return getYAnnotMessageAccess().getRule();
	}
	
	//YAnnotMsgType YAnnot:
	//	'@msgtype' '(' msgtype=ValidID ')';
	public YAnnotMsgTypeElements getYAnnotMsgTypeAccess() {
		return pYAnnotMsgType;
	}
	
	public ParserRule getYAnnotMsgTypeRule() {
		return getYAnnotMsgTypeAccess().getRule();
	}
	
	//YAnnotEntityInner:
	//	YAnnotAttr | YAnnotRel | YAnnotId;
	public YAnnotEntityInnerElements getYAnnotEntityInnerAccess() {
		return pYAnnotEntityInner;
	}
	
	public ParserRule getYAnnotEntityInnerRule() {
		return getYAnnotEntityInnerAccess().getRule();
	}
	
	//YAnnotEntity:
	//	'@entity' name=ValidID (':' superannot=[YAnnotEntity|QualifiedName])? '{'
	//	annots+=YAnnotEntityInner*
	//	'}';
	public YAnnotEntityElements getYAnnotEntityAccess() {
		return pYAnnotEntity;
	}
	
	public ParserRule getYAnnotEntityRule() {
		return getYAnnotEntityAccess().getRule();
	}
	
	//YAnnotAttr:
	//	{YAnnotAttr} '@attr' name=ValidID ':' yclass=[YClass|QualifiedName] optional='?'? annots+=YAnnot* ';'?;
	public YAnnotAttrElements getYAnnotAttrAccess() {
		return pYAnnotAttr;
	}
	
	public ParserRule getYAnnotAttrRule() {
		return getYAnnotAttrAccess().getRule();
	}
	
	//YAnnotRel:
	//	{YAnnotRel} '@rel' parent?='@parent'? name=ValidID optional?='?'? '->' target=[YAnnotEntity|QualifiedName] many?='*'?
	//	('<-'
	//	inverse=[YAnnotRel|QualifiedName])? ';'?;
	public YAnnotRelElements getYAnnotRelAccess() {
		return pYAnnotRel;
	}
	
	public ParserRule getYAnnotRelRule() {
		return getYAnnotRelAccess().getRule();
	}
	
	//YAnnotIdInner:
	//	YAnnotAttr | YAnnotRel;
	public YAnnotIdInnerElements getYAnnotIdInnerAccess() {
		return pYAnnotIdInner;
	}
	
	public ParserRule getYAnnotIdInnerRule() {
		return getYAnnotIdInnerAccess().getRule();
	}
	
	//YAnnotId:
	//	{YAnnotId} '@id' name=ValidID '(' annots+=[YAnnotEntityInner] (',' annots+=[YAnnotEntityInner])* ')' ';'?;
	public YAnnotIdElements getYAnnotIdAccess() {
		return pYAnnotId;
	}
	
	public ParserRule getYAnnotIdRule() {
		return getYAnnotIdAccess().getRule();
	}
	
	///*
	// * Start Technical design
	// */ YAnnotTechnicalDesign:
	//	{YAnnotTechnicalDesign} '@td' 'database' database=[YAnnotDatabase] '{'
	//	features+=YAnnotTable*
	//	'}';
	public YAnnotTechnicalDesignElements getYAnnotTechnicalDesignAccess() {
		return pYAnnotTechnicalDesign;
	}
	
	public ParserRule getYAnnotTechnicalDesignRule() {
		return getYAnnotTechnicalDesignAccess().getRule();
	}
	
	//YAnnotTable:
	//	{YAnnotTable} '@table' name=ValidID '->' entityref=[YAnnotEntity|QualifiedName] '{'
	//	columns+=YAnnotAbstractColumn*
	//	primarykey=YAnnotPrimaryKey?
	//	foreignkeys+=YAnnotForeignKey*
	//	'}';
	public YAnnotTableElements getYAnnotTableAccess() {
		return pYAnnotTable;
	}
	
	public ParserRule getYAnnotTableRule() {
		return getYAnnotTableAccess().getRule();
	}
	
	//YAnnotColumn:
	//	{YAnnotColumn} '->' attrref=[YAnnotAttr|QualifiedName]
	//	'as' type=('VARCHAR' | 'CHAR' | 'INTEGER' | 'BIGINT' | 'SMALLINT' | 'DECIMAL' | 'TIME' | 'DATE' | 'TIMESTAMP' |
	//	'BOOLEAN') optional='?'? annots+=(YAnnotLength | YAnnotDecimal)* ';'?;
	public YAnnotColumnElements getYAnnotColumnAccess() {
		return pYAnnotColumn;
	}
	
	public ParserRule getYAnnotColumnRule() {
		return getYAnnotColumnAccess().getRule();
	}
	
	//YAnnotColumnLike:
	//	{YAnnotColumnLike} '->' columnref=[YAnnotAbstractColumn|QualifiedName] ';'?;
	public YAnnotColumnLikeElements getYAnnotColumnLikeAccess() {
		return pYAnnotColumnLike;
	}
	
	public ParserRule getYAnnotColumnLikeRule() {
		return getYAnnotColumnLikeAccess().getRule();
	}
	
	//YAnnotAbstractColumn:
	//	{YAnnotAbstractColumn} '@column' name=ValidID type=(YAnnotColumn | YAnnotColumnLike);
	public YAnnotAbstractColumnElements getYAnnotAbstractColumnAccess() {
		return pYAnnotAbstractColumn;
	}
	
	public ParserRule getYAnnotAbstractColumnRule() {
		return getYAnnotAbstractColumnAccess().getRule();
	}
	
	//YAnnotPrimaryKey:
	//	{YAnnotPrimaryKey} '@primary' '(' columns+=[YAnnotAbstractColumn]* (',' columns+=[YAnnotAbstractColumn])* ')' ';'?;
	public YAnnotPrimaryKeyElements getYAnnotPrimaryKeyAccess() {
		return pYAnnotPrimaryKey;
	}
	
	public ParserRule getYAnnotPrimaryKeyRule() {
		return getYAnnotPrimaryKeyAccess().getRule();
	}
	
	//YAnnotForeignKey:
	//	{YAnnotForeignKey} '@foreign' relationship=[YAnnotRel|QualifiedName] '{'
	//	columns+=YAnnotAbstractColumn (',' columns+=YAnnotAbstractColumn)*
	//	'}' ';'?;
	public YAnnotForeignKeyElements getYAnnotForeignKeyAccess() {
		return pYAnnotForeignKey;
	}
	
	public ParserRule getYAnnotForeignKeyRule() {
		return getYAnnotForeignKeyAccess().getRule();
	}
	
	///*
	// * Swift Generation Annotations
	// */ YAnnotJava:
	//	{YAnnotJava} '@java' ('uses' database=[YAnnotDatabase])? ';'?;
	public YAnnotJavaElements getYAnnotJavaAccess() {
		return pYAnnotJava;
	}
	
	public ParserRule getYAnnotJavaRule() {
		return getYAnnotJavaAccess().getRule();
	}
	
	///*
	// * Swift Generation Annotations
	// */ YAnnotSwift:
	//	{YAnnotSwift} '@swift' 'module' name=ValidID ('uses' database=[YAnnotDatabase])? ';'?;
	public YAnnotSwiftElements getYAnnotSwiftAccess() {
		return pYAnnotSwift;
	}
	
	public ParserRule getYAnnotSwiftRule() {
		return getYAnnotSwiftAccess().getRule();
	}
	
	///*
	// * Database Generation Annotations
	// */ YAnnotDatabase:
	//	{YAnnotDatabase} '@database' name=ValidID ';'?;
	public YAnnotDatabaseElements getYAnnotDatabaseAccess() {
		return pYAnnotDatabase;
	}
	
	public ParserRule getYAnnotDatabaseRule() {
		return getYAnnotDatabaseAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
