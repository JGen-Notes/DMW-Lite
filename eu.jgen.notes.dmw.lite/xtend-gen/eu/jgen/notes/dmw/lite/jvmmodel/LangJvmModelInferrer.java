/**
 * generated by Xtext 2.15.0
 */
package eu.jgen.notes.dmw.lite.jvmmodel;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import eu.jgen.notes.dmw.lite.lang.YClass;
import eu.jgen.notes.dmw.lite.lang.YFunction;
import eu.jgen.notes.dmw.lite.lang.YMember;
import eu.jgen.notes.dmw.lite.lang.YProperty;
import eu.jgen.notes.dmw.lite.lang.YWidget;
import eu.jgen.notes.dmw.lite.runtimes.DMWContext;
import eu.jgen.notes.dmw.lite.utility.LangJavaGeneratorHelper;
import eu.jgen.notes.dmw.lite.utility.LangUtil;
import java.util.Arrays;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtend2.lib.StringConcatenationClient;
import org.eclipse.xtext.common.types.JvmConstructor;
import org.eclipse.xtext.common.types.JvmField;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericType;
import org.eclipse.xtext.common.types.JvmMember;
import org.eclipse.xtext.common.types.JvmOperation;
import org.eclipse.xtext.common.types.JvmTypeReference;
import org.eclipse.xtext.common.types.JvmVisibility;
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer;
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor;
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

/**
 * <p>Infers a JVM model from the source model.</p>
 * 
 * <p>The JVM model should contain all elements that would appear in the Java code
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>
 */
@SuppressWarnings("all")
public class LangJvmModelInferrer extends AbstractModelInferrer {
  @Inject
  @Extension
  private JvmTypesBuilder _jvmTypesBuilder;
  
  @Inject
  @Extension
  private LangUtil _langUtil;
  
  @Inject
  @Extension
  private LangJavaGeneratorHelper _langJavaGeneratorHelper;
  
  protected void _infer(final YWidget widget, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    EList<YClass> _classes = widget.getClasses();
    for (final YClass clazz : _classes) {
      this.generateClass(clazz, acceptor, isPreIndexingPhase, widget.getPackage().getName());
    }
  }
  
  private void generateClass(final YClass clazz, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase, final String proposedPackageName) {
    acceptor.<JvmGenericType>accept(this.generateClass(clazz, proposedPackageName));
  }
  
  private JvmGenericType generateClass(final YClass clazz, final String proposedPackageName) {
    String _name = clazz.getName();
    String _plus = ((proposedPackageName + ".") + _name);
    final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
      it.setPackageName(proposedPackageName);
      this._jvmTypesBuilder.setDocumentation(it, this._jvmTypesBuilder.getDocumentation(clazz));
      JvmTypeReference _superclass = clazz.getSuperclass();
      boolean _tripleNotEquals = (_superclass != null);
      if (_tripleNotEquals) {
        EList<JvmTypeReference> _superTypes = it.getSuperTypes();
        JvmTypeReference _cloneWithProxies = this._jvmTypesBuilder.cloneWithProxies(clazz.getSuperclass());
        this._jvmTypesBuilder.<JvmTypeReference>operator_add(_superTypes, _cloneWithProxies);
      }
      EList<YMember> _members = clazz.getMembers();
      for (final YMember member : _members) {
        if ((member instanceof YClass)) {
          EList<JvmMember> _members_1 = it.getMembers();
          JvmGenericType _generateClass = this.generateClass(((YClass) member), proposedPackageName);
          this._jvmTypesBuilder.<JvmGenericType>operator_add(_members_1, _generateClass);
        }
      }
      EList<YMember> _members_2 = clazz.getMembers();
      for (final YMember member_1 : _members_2) {
        if ((member_1 instanceof YProperty)) {
          EList<JvmMember> _members_3 = it.getMembers();
          JvmField _generateProperty = this.generateProperty(((YProperty) member_1));
          this._jvmTypesBuilder.<JvmField>operator_add(_members_3, _generateProperty);
        }
      }
      if (((clazz.getSuperclass() != null) && Objects.equal(clazz.getSuperclass().getSimpleName(), "XWidget"))) {
        EList<JvmMember> _members_4 = it.getMembers();
        final Procedure1<JvmConstructor> _function_1 = (JvmConstructor it_1) -> {
          EList<JvmFormalParameter> _parameters = it_1.getParameters();
          JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(clazz, "context", this._typeReferenceBuilder.typeRef(DMWContext.class));
          this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
          StringConcatenationClient _client = new StringConcatenationClient() {
            @Override
            protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
              _builder.append("super(context);");
              _builder.newLine();
              _builder.append("_initializeStructures();");
              _builder.newLine();
            }
          };
          this._jvmTypesBuilder.setBody(it_1, _client);
        };
        JvmConstructor _constructor = this._jvmTypesBuilder.toConstructor(clazz, _function_1);
        this._jvmTypesBuilder.<JvmConstructor>operator_add(_members_4, _constructor);
        EList<JvmMember> _members_5 = it.getMembers();
        final Procedure1<JvmOperation> _function_2 = (JvmOperation it_1) -> {
          EList<JvmFormalParameter> _parameters = it_1.getParameters();
          JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(clazz, "context", this._typeReferenceBuilder.typeRef(DMWContext.class));
          this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
          it_1.setVisibility(JvmVisibility.PUBLIC);
          it_1.setStatic(true);
          StringConcatenationClient _client = new StringConcatenationClient() {
            @Override
            protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
              _builder.append("return new ");
              String _name = clazz.getName();
              _builder.append(_name);
              _builder.append("(context);");
              _builder.newLineIfNotEmpty();
            }
          };
          this._jvmTypesBuilder.setBody(it_1, _client);
        };
        JvmOperation _method = this._jvmTypesBuilder.toMethod(clazz, "getInstance", this._typeReferenceBuilder.typeRef(it), _function_2);
        this._jvmTypesBuilder.<JvmOperation>operator_add(_members_5, _method);
        EList<YMember> _members_6 = clazz.getMembers();
        for (final YMember member_2 : _members_6) {
          if ((member_2 instanceof YProperty)) {
          }
        }
        EList<JvmMember> _members_7 = it.getMembers();
        final Procedure1<JvmOperation> _function_3 = (JvmOperation it_1) -> {
          it_1.setVisibility(JvmVisibility.PRIVATE);
          StringConcatenationClient _client = new StringConcatenationClient() {
            @Override
            protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
              _builder.append("// initialize all structures");
              _builder.newLine();
              {
                List<YProperty> _findPropertiesTypeStructure = LangJvmModelInferrer.this._langUtil.findPropertiesTypeStructure(clazz);
                for(final YProperty property : _findPropertiesTypeStructure) {
                  _builder.append("_initialize_");
                  String _name = property.getName();
                  _builder.append(_name);
                  _builder.append("();");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          };
          this._jvmTypesBuilder.setBody(it_1, _client);
        };
        JvmOperation _method_1 = this._jvmTypesBuilder.toMethod(clazz, "_initializeStructures", this._typeReferenceBuilder.typeRef(void.class), _function_3);
        this._jvmTypesBuilder.<JvmOperation>operator_add(_members_7, _method_1);
        List<YProperty> _findPropertiesTypeStructure = this._langUtil.findPropertiesTypeStructure(clazz);
        for (final YProperty property : _findPropertiesTypeStructure) {
          EList<JvmMember> _members_8 = it.getMembers();
          String _name_1 = property.getName();
          String _plus_1 = ("_initialize_" + _name_1);
          final Procedure1<JvmOperation> _function_4 = (JvmOperation it_1) -> {
            it_1.setVisibility(JvmVisibility.PRIVATE);
            StringConcatenationClient _client = new StringConcatenationClient() {
              @Override
              protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
                String _generateInitStructureMethod = LangJvmModelInferrer.this.generateInitStructureMethod(property);
                _builder.append(_generateInitStructureMethod);
                _builder.newLineIfNotEmpty();
              }
            };
            this._jvmTypesBuilder.setBody(it_1, _client);
          };
          JvmOperation _method_2 = this._jvmTypesBuilder.toMethod(clazz, _plus_1, this._typeReferenceBuilder.typeRef(void.class), _function_4);
          this._jvmTypesBuilder.<JvmOperation>operator_add(_members_8, _method_2);
        }
      }
      EList<YMember> _members_9 = clazz.getMembers();
      for (final YMember member_3 : _members_9) {
        if ((member_3 instanceof YFunction)) {
          EList<JvmMember> _members_10 = it.getMembers();
          JvmOperation _generateFunction = this.generateFunction(((YFunction) member_3));
          this._jvmTypesBuilder.<JvmOperation>operator_add(_members_10, _generateFunction);
        }
      }
    };
    return this._jvmTypesBuilder.toClass(clazz, _plus, _function);
  }
  
  private JvmOperation generateFunction(final YFunction function) {
    final Procedure1<JvmOperation> _function = (JvmOperation it) -> {
      this._jvmTypesBuilder.setBody(it, function.getBody());
    };
    return this._jvmTypesBuilder.toMethod(function, function.getName(), function.getType(), _function);
  }
  
  private String generateInitStructureMethod(final YProperty property) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("this.");
    String _name = property.getName();
    _builder.append(_name);
    _builder.append(" = new ");
    String _simpleName = property.getType().getSimpleName();
    _builder.append(_simpleName);
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    {
      EList<YMember> _members = this._langUtil.findStructureDeclaration(property).getMembers();
      for(final YMember member : _members) {
        {
          if ((member instanceof YProperty)) {
            String _generateInitializeProperty = this.generateInitializeProperty(((YProperty) member), property.getName());
            _builder.append(_generateInitializeProperty);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder.toString();
  }
  
  private String generateInitializeProperty(final YProperty property, final String structureName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("this.");
    _builder.append(structureName);
    _builder.append(".");
    String _name = property.getName();
    _builder.append(_name);
    _builder.append(".value = ");
    String _propertyDefaultValue = this._langJavaGeneratorHelper.getPropertyDefaultValue(property);
    _builder.append(_propertyDefaultValue);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  private JvmField generateProperty(final YProperty property) {
    JvmField _switchResult = null;
    String _simpleName = property.getType().getSimpleName();
    if (_simpleName != null) {
      switch (_simpleName) {
        default:
          _switchResult = this._jvmTypesBuilder.toField(property, property.getName(), property.getType());
          break;
      }
    } else {
      _switchResult = this._jvmTypesBuilder.toField(property, property.getName(), property.getType());
    }
    JvmField field = _switchResult;
    field.setVisibility(JvmVisibility.PUBLIC);
    return field;
  }
  
  public void infer(final EObject widget, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    if (widget instanceof YWidget) {
      _infer((YWidget)widget, acceptor, isPreIndexingPhase);
      return;
    } else if (widget != null) {
      _infer(widget, acceptor, isPreIndexingPhase);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(widget, acceptor, isPreIndexingPhase).toString());
    }
  }
}
