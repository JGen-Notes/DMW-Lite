/**
 * generated by Xtext 2.12.0
 */
package eu.jgen.notes.dmw.lite.formatting2;

import com.google.inject.Inject;
import eu.jgen.notes.dmw.lite.lang.YAnnotTop;
import eu.jgen.notes.dmw.lite.lang.YClass;
import eu.jgen.notes.dmw.lite.lang.YImport;
import eu.jgen.notes.dmw.lite.lang.YMember;
import eu.jgen.notes.dmw.lite.lang.YWidget;
import eu.jgen.notes.dmw.lite.services.LangGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class LangFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private LangGrammarAccess _langGrammarAccess;
  
  protected void _format(final YWidget yWidget, @Extension final IFormattableDocument document) {
    EList<YImport> _imports = yWidget.getImports();
    for (final YImport yImport : _imports) {
      document.<YImport>format(yImport);
    }
    EList<YAnnotTop> _annotations = yWidget.getAnnotations();
    for (final YAnnotTop yAnnotTop : _annotations) {
      document.<YAnnotTop>format(yAnnotTop);
    }
    EList<YClass> _classes = yWidget.getClasses();
    for (final YClass yClass : _classes) {
      document.<YClass>format(yClass);
    }
  }
  
  protected void _format(final YClass yClass, @Extension final IFormattableDocument document) {
    EList<YClass> _inners = yClass.getInners();
    for (final YClass _yClass : _inners) {
      document.<YClass>format(_yClass);
    }
    EList<YMember> _members = yClass.getMembers();
    for (final YMember yMember : _members) {
      document.<YMember>format(yMember);
    }
  }
  
  public void format(final Object yClass, final IFormattableDocument document) {
    if (yClass instanceof XtextResource) {
      _format((XtextResource)yClass, document);
      return;
    } else if (yClass instanceof YClass) {
      _format((YClass)yClass, document);
      return;
    } else if (yClass instanceof YWidget) {
      _format((YWidget)yClass, document);
      return;
    } else if (yClass instanceof EObject) {
      _format((EObject)yClass, document);
      return;
    } else if (yClass == null) {
      _format((Void)null, document);
      return;
    } else if (yClass != null) {
      _format(yClass, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(yClass, document).toString());
    }
  }
}
