/*
 * generated by Xtext 2.15.0
 */
package eu.jgen.notes.dmw.lite.jvmmodel

import com.google.inject.Inject
import eu.jgen.notes.dmw.lite.lang.YClass
import eu.jgen.notes.dmw.lite.lang.YWidget
import org.eclipse.xtext.common.types.JvmGenericType
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder
import eu.jgen.notes.dmw.lite.lang.YProperty
import org.eclipse.xtext.common.types.JvmField
import org.eclipse.xtext.common.types.JvmVisibility
import eu.jgen.notes.dmw.lite.lang.YFunction
import eu.jgen.notes.dmw.lite.utility.LangUtil
import eu.jgen.notes.dmw.lite.utility.LangJavaGeneratorHelper

/**
 * <p>Infers a JVM model from the source model.</p> 
 * 
 * <p>The JVM model should contain all elements that would appear in the Java code 
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>     
 */
class LangJvmModelInferrer extends AbstractModelInferrer {

	@Inject extension JvmTypesBuilder
	@Inject extension LangUtil
	@Inject extension LangJavaGeneratorHelper

	def dispatch void infer(YWidget widget, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase) {
		for (clazz : widget.classes) {
			generateClass(clazz, acceptor, isPreIndexingPhase, widget.package.name)
		}
	}

	private def void generateClass(YClass clazz, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase,
		String proposedPackageName) {
		acceptor.accept(generateClass(clazz, proposedPackageName))
	}

	private def JvmGenericType generateClass(YClass clazz, String proposedPackageName) {
		clazz.toClass(proposedPackageName + "." + clazz.name) [
			packageName = proposedPackageName
			documentation = clazz.documentation
			if (clazz.superclass !== null) {
				superTypes += clazz.superclass.cloneWithProxies
			}
			for (member : clazz.members) {
				if (member instanceof YClass) {
					members += generateClass((member as YClass), proposedPackageName)
				}
			}
			for (member : clazz.members) {
				if (member instanceof YProperty) {
					members += generateProperty((member as YProperty))
				}
			}
			if (clazz.superclass !== null && clazz.superclass.simpleName == "XWidget") {
				members += clazz.toConstructor [
					parameters += clazz.toParameter("context", typeRef(eu.jgen.notes.dmw.lite.runtimes.DMWContext))
					body = '''
						super(context);
						_initializeStructures();
					'''
				]
				members += clazz.toMethod("getInstance", typeRef()) [
					parameters += clazz.toParameter("context", typeRef(eu.jgen.notes.dmw.lite.runtimes.DMWContext))
					visibility = JvmVisibility.PUBLIC
					static = true
					body='''
					return new «clazz.name»(context);
					'''
				]
				for (member : clazz.members) {
					if (member instanceof YProperty) {
						// members += generateProperty((member as YProperty))
					}
				}
				members += clazz.toMethod("_initializeStructures", typeRef(void)) [
					visibility = JvmVisibility.PRIVATE
					body = '''
						// initialize all structures
						«FOR property : clazz.findPropertiesTypeStructure»
							_initialize_«property.name»();
						«ENDFOR»
					'''
				]
				for (property : clazz.findPropertiesTypeStructure) {
					members += clazz.toMethod("_initialize_" + property.name, typeRef(void)) [
						visibility = JvmVisibility.PRIVATE
						body = '''
							«generateInitStructureMethod(property)»
						'''
					]
				}
			}
			for (member : clazz.members) {
				if (member instanceof YFunction) {
					members += generateFunction((member as YFunction))
				}
			}
		]
	}

	private def generateFunction(YFunction function) {
		return function.toMethod(function.name, function.type) [
			body = function.body
		]
	}

	private def String generateInitStructureMethod(YProperty property) {
		'''
			this.«property.name» = new «property.type.simpleName»();
			«FOR member : property.findStructureDeclaration.members»
				«IF member instanceof YProperty»
					«generateInitializeProperty(member as YProperty, property.name)»
				«ENDIF»
			«ENDFOR»
		'''
	}

	private def String generateInitializeProperty(YProperty property, String structureName) {
		'''
		this.«structureName».«property.name».value = «property.getPropertyDefaultValue»;
		'''
	}

	private def JvmField generateProperty(YProperty property) {
		var field = switch (property.type.simpleName) {
			default: {
				property.toField(property.name, property.type)
			}
		}
		field.visibility = JvmVisibility.PUBLIC
		return field
	}

}
