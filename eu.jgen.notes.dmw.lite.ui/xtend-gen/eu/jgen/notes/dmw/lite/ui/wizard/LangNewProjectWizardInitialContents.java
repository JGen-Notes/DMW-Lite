/**
 * [The "BSD license"]
 * Copyright (c) 2016, JGen Notes
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
 *    and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions
 *    and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package eu.jgen.notes.dmw.lite.ui.wizard;

import com.google.inject.Inject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.resource.FileExtensionProvider;

@SuppressWarnings("all")
public class LangNewProjectWizardInitialContents {
  @Inject
  private FileExtensionProvider fileExtensionProvider;
  
  public void generateInitialContents(final IFileSystemAccess2 fsa) {
    String _primaryFileExtension = this.fileExtensionProvider.getPrimaryFileExtension();
    String _plus = ("src/log/sample/project/LogWidget." + _primaryFileExtension);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This is sample application helping to explain how to widget application");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* is built and how to start development of the widget application.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* We need to declare all entities used in the widget first.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The <code>Log</code> is very simple entity type");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* having three attributes. Entity type has one identifier.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* As you can see, we are using annotations to define entity type and its properties.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Annotation is a mechanism do deliver more specific meta data that will be");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* used later during generation process.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("@entity Log {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*  How to read below: Log has attribute <code>entryType</code> of type <code>Short</code> having");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*  maximum length of 2 digits.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/ ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr entryType : Short @length (2);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr message : String @length (128);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@attr timeCreated : Time;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@id logid (timeCreated);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* We need to define so called exit states that are used to describe global");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* status of the widget. We use <code>class</code> to define all exit states");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* used in the widget application.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ExitStates {\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* We like to tell outside world that process creating log entry was completed successfully.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* We are going to use the following exit state. You need define some properties for each exit state.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Again, we use annotations to provide more specific information detailing this particular");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* exit state.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public var processCompleted : ExitState  ");
    _builder.newLine();
    _builder.append("\t   ");
    _builder.append("@action (normal)  @msgtype(none) @message(\"Process completed.\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* In case log record already exist exit state will be set to the following state.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public var logAlreadyExists : ExitState  ");
    _builder.newLine();
    _builder.append("\t   ");
    _builder.append("@action (normal)  @msgtype(none) @message(\"Log entry already exists.\");");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This is an example of the widget. This widget should create instance of log record");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* in the database. Please notice that your class extending class <code>Widget</code>. ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* You can visit declaration of the class by clicking on the  name once <code>cntl</code>");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* button pressed.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("class LogWidget : Widget {");
    _builder.newLine();
    _builder.append(" \t");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("/*");
    _builder.newLine();
    _builder.append(" \t ");
    _builder.append("* We need to declare inner class defining data structure. You can notice that");
    _builder.newLine();
    _builder.append(" \t ");
    _builder.append("* class <code>Record</code> extends special class <code>Structure</code>.");
    _builder.newLine();
    _builder.append(" \t ");
    _builder.append("* This class is referring to the annotation <code>Log</code>. You can");
    _builder.newLine();
    _builder.append(" \t ");
    _builder.append("* automate creation of the properties by coping definition of the annotation.");
    _builder.newLine();
    _builder.append(" \t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("class Record : Structure -> Log {");
    _builder.newLine();
    _builder.append(" \t\t");
    _builder.append("public var entryType : Short -> Log.entryType;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var message : String -> Log.message;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public var timeCreated : Time -> Log.timeCreated;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* We need to create property exits using class <code>ExitStates</code> defined ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* earlier. Property will be instantiated automatically before creating widget. ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private var exits : ExitStates;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* This object will be instantiated automatically by the session manager.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Properties will be set externally by the invoking process.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public var imp : Record;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* We use this object to create row in the SQL database.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private var current : Record;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* We need to define function which will be executed by the external");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* process. We make it <code>public</code>.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public func start() -> Record {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* Create log record using provided information.");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("create current -> Log {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// we use special word self when referring local properties.");
    _builder.newLine();
    _builder.append("\t\t \t");
    _builder.append("self.current.message = \"Hello World\";");
    _builder.newLine();
    _builder.append("\t\t \t");
    _builder.append("self.current.entryType = self.imp.entryType;");
    _builder.newLine();
    _builder.append("\t\t \t");
    _builder.append("self.current.timeCreated = self.imp.timeCreated;");
    _builder.newLine();
    _builder.append("\t\t \t");
    _builder.append("// or");
    _builder.newLine();
    _builder.append("\t\t \t");
    _builder.append("super.moveStruct(self.imp,self.current);");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("} success {");
    _builder.newLine();
    _builder.append("\t\t \t");
    _builder.append("// we use word super  when referring to properties or functions of the super class");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("super.setExitState(self.exits.processCompleted);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return self.imp;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} already exist {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("super.setExitState(self.exits.logAlreadyExists);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This file has everything what is required in a single file. However, in real world you");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* will keep different information in different files. The DMW Lite supports concept of packages");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* and import statement.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    fsa.generateFile(_plus, _builder);
  }
}
